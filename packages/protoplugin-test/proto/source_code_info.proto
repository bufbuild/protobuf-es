// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @formatter:off

// Comment before syntax.
syntax = "proto3"; // Comment next to syntax.
// Comment after syntax.


// Comment before package.
package testcomments; // Comment next to package.
// Comment after package.

// Comment between package and message.

// Comment before message.
message MessageWithComments {

    //
    // Comment after start of message,
        // with funny indentation,
    // and empty lines on start and end.
    //

    // Comment before field with 5 lines:
    // line 2, next is empty
    //
    // line 4, next is empty
    //
    string foo = 1; // Comment next to field.
    // Comment after field.

    // Comment before oneof.
    oneof result {
        // Comment after start of oneof.

        // Comment before oneof member.
        int32 value = 2; // Comment next to oneof member.
        string error = 3;

        // Comment before end of oneof.
    }
    // Comment after oneof.

    //
    string this_field_has_an_empty_comment = 4;

    string this_field_is_deprecated = 5 [deprecated = true, json_name = "sdf"];

    // Comment before end of message.
}
// Comment after message.

// Comment between message and enum.

// Leading comment for enum.
enum EnumWithComments {
    // Comment between start of enum and first value.

    // Comment before enum value.
    VALUE = 0; // Comment next to enum value.
    // Comment after enum value.

}
// Comment after enum.


// Leading comment for deprecated enum
enum DeprecatedEnumWithComment {
    option deprecated = true;
    DEPRECATED_ENUM_WITH_COMMENT_A = 0;
    DEPRECATED_ENUM_WITH_COMMENT_B = 1;
}


enum DeprecatedEnumNoComment {
    option deprecated = true;
    DEPRECATED_ENUM_NO_COMMENT_A = 0;
    DEPRECATED_ENUM_NO_COMMENT_B = 1;
}



message EmptyMessageWithComment {
    // Comment within empty message.
}


// see https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto
message GoogleCommentExample {

    int32 foo = 1; // Comment attached to foo.
    // Comment attached to bar.
    int32 bar = 2;

    string baz = 3;
    // Comment attached to baz.
    // Another line attached to baz.

    // Comment attached to qux.
    //
    // Another line attached to qux.
    double qux = 4;

    // Detached comment for corge. This is not leading or trailing comments
    // to qux or corge because there are blank lines separating it from
    // both.

    // Detached comment for corge paragraph 2.

    string corge = 5;
    /* Block comment attached
     * to corge.  Leading asterisks
     * will be removed. */
    /* Block comment attached to
     * grault. */
    int32 grault = 6;

    // ignored detached comments.

}

enum SimpleEnum {
    SIMPLE_ZERO = 0;
    SIMPLE_ONE = 1;
}

message RepeatedScalarValuesMessage {
    repeated double double_field = 1;
    repeated float float_field = 2;
    repeated int64 int64_field = 3;
    repeated uint64 uint64_field = 4;
    repeated int32 int32_field = 5;
    repeated fixed64 fixed64_field = 6;
    repeated fixed32 fixed32_field = 7;
    repeated bool bool_field = 8;
    repeated string string_field = 9;
    repeated bytes bytes_field = 11;
    repeated uint32 uint32_field = 12;
    repeated sfixed32 sfixed32_field = 14;
    repeated sfixed64 sfixed64_field = 15;
    repeated sint32 sint32_field = 16;
    repeated sint64 sint64_field = 17;
}

message MapsMessage {
    map<string, string> str_str_field = 1;
    map<string, int32> str_int32_field = 2;
    map<string, int64> str_int64_field = 3;
    map<string, bool> str_bool_field = 4;
    map<string, bytes> str_bytes_field = 5;
    map<int32, string> int32_str_field = 6;
    map<int64, string> int64_str_field = 7;
    map<bool, string> bool_str_field = 8;
    map<string, MapsMessage> str_msg_field = 9;
    map<int32, MapsMessage> int32_msg_field = 10;
    map<int64, MapsMessage> int64_msg_field = 11;
    map<string, MapsEnum> str_enu_field = 12;
    map<int32, MapsEnum> int32_enu_field = 13;
    map<int64, MapsEnum> int64_enu_field = 14;
}

enum MapsEnum {
    MAPS_ENUM_ANY = 0;
    MAPS_ENUM_YES = 1;
    MAPS_ENUM_NO = 2;
}


message JsonNamesMessage {

    string scalar_field = 1 [json_name = "scalarFieldJsonName"];
    repeated string repeated_scalar_field = 2 [json_name = "repeatedScalarFieldJsonName"];

    string a = 3;
    string b = 4 [json_name = ""];
    string c = 5 [json_name = "@type"];

}

// @formatter:on


