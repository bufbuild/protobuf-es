// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.8.0 with parameter "bootstrap_wkt=true,ts_nocheck=false,target=ts"
// @generated from file google/protobuf/cpp_features.proto (package pb, syntax proto2)
/* eslint-disable */

import type { PartialMessage, PlainMessage } from "../../message.js";
import { Message } from "../../message.js";
import { proto2 } from "../../proto2.js";
import type { FieldList } from "../../field-list.js";
import type { BinaryReadOptions } from "../../binary-format.js";
import type { JsonReadOptions, JsonValue } from "../../json-format.js";
import { FeatureSet } from "./descriptor_pb.js";

/**
 * @generated from message pb.CppFeatures
 */
export class CppFeatures extends Message<CppFeatures> {
  /**
   * Whether or not to treat an enum field as closed.  This option is only
   * applicable to enum fields, and will be removed in the future.  It is
   * consistent with the legacy behavior of using proto3 enum types for proto2
   * fields.
   *
   * @generated from field: optional bool legacy_closed_enum = 1;
   */
  legacyClosedEnum?: boolean;

  constructor(data?: PartialMessage<CppFeatures>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "pb.CppFeatures";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "legacy_closed_enum", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CppFeatures {
    return new CppFeatures().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CppFeatures {
    return new CppFeatures().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CppFeatures {
    return new CppFeatures().fromJsonString(jsonString, options);
  }

  static equals(a: CppFeatures | PlainMessage<CppFeatures> | undefined, b: CppFeatures | PlainMessage<CppFeatures> | undefined): boolean {
    return proto2.util.equals(CppFeatures, a, b);
  }
}

/**
 * @generated from extension: optional pb.CppFeatures cpp = 1000;
 */
export const cpp = proto2.makeExtension<FeatureSet, CppFeatures>(
  "pb.cpp", 
  FeatureSet, 
  () => ({ no: 1000, kind: "message", T: CppFeatures, opt: true }),
);

