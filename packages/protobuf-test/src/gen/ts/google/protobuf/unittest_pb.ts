// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file we will use for unit testing.
//
// LINT: ALLOW_GROUPS, LEGACY_NAMES

// @generated by protoc-gen-es v0.2.1 with parameter "ts_nocheck=false,target=ts"
// @generated from file google/protobuf/unittest.proto (package protobuf_unittest, syntax proto2)
/* eslint-disable */

// We don't put this in a package within proto2 because we need to make sure
// that the generated code doesn't depend on being in the proto2 namespace.
// In test_util.h we do "using namespace unittest = protobuf_unittest".

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto2, protoInt64} from "@bufbuild/protobuf";
import {ImportEnum, ImportMessage} from "./unittest_import_pb.js";
import {PublicImportMessage} from "./unittest_import_public_pb.js";

/**
 * @generated from enum protobuf_unittest.ForeignEnum
 */
export enum ForeignEnum {
  /**
   * @generated from enum value: FOREIGN_FOO = 4;
   */
  FOREIGN_FOO = 4,

  /**
   * @generated from enum value: FOREIGN_BAR = 5;
   */
  FOREIGN_BAR = 5,

  /**
   * @generated from enum value: FOREIGN_BAZ = 6;
   */
  FOREIGN_BAZ = 6,
}
// Retrieve enum metadata with: proto2.getEnumType(ForeignEnum)
proto2.util.setEnumType(ForeignEnum, "protobuf_unittest.ForeignEnum", [
  { no: 4, name: "FOREIGN_FOO" },
  { no: 5, name: "FOREIGN_BAR" },
  { no: 6, name: "FOREIGN_BAZ" },
]);

/**
 * Test an enum that has multiple values with the same number.
 *
 * @generated from enum protobuf_unittest.TestEnumWithDupValue
 */
export enum TestEnumWithDupValue {
  /**
   * @generated from enum value: FOO1 = 1;
   */
  FOO1 = 1,

  /**
   * @generated from enum value: BAR1 = 2;
   */
  BAR1 = 2,

  /**
   * @generated from enum value: BAZ = 3;
   */
  BAZ = 3,

  /**
   * @generated from enum value: FOO2 = 1;
   */
  FOO2 = 1,

  /**
   * @generated from enum value: BAR2 = 2;
   */
  BAR2 = 2,
}
// Retrieve enum metadata with: proto2.getEnumType(TestEnumWithDupValue)
proto2.util.setEnumType(TestEnumWithDupValue, "protobuf_unittest.TestEnumWithDupValue", [
  { no: 1, name: "FOO1" },
  { no: 2, name: "BAR1" },
  { no: 3, name: "BAZ" },
  { no: 1, name: "FOO2" },
  { no: 2, name: "BAR2" },
]);

/**
 * Test an enum with large, unordered values.
 *
 * @generated from enum protobuf_unittest.TestSparseEnum
 */
export enum TestSparseEnum {
  /**
   * @generated from enum value: SPARSE_A = 123;
   */
  SPARSE_A = 123,

  /**
   * @generated from enum value: SPARSE_B = 62374;
   */
  SPARSE_B = 62374,

  /**
   * @generated from enum value: SPARSE_C = 12589234;
   */
  SPARSE_C = 12589234,

  /**
   * @generated from enum value: SPARSE_D = -15;
   */
  SPARSE_D = -15,

  /**
   * @generated from enum value: SPARSE_E = -53452;
   */
  SPARSE_E = -53452,

  /**
   * @generated from enum value: SPARSE_F = 0;
   */
  SPARSE_F = 0,

  /**
   * @generated from enum value: SPARSE_G = 2;
   */
  SPARSE_G = 2,
}
// Retrieve enum metadata with: proto2.getEnumType(TestSparseEnum)
proto2.util.setEnumType(TestSparseEnum, "protobuf_unittest.TestSparseEnum", [
  { no: 123, name: "SPARSE_A" },
  { no: 62374, name: "SPARSE_B" },
  { no: 12589234, name: "SPARSE_C" },
  { no: -15, name: "SPARSE_D" },
  { no: -53452, name: "SPARSE_E" },
  { no: 0, name: "SPARSE_F" },
  { no: 2, name: "SPARSE_G" },
]);

/**
 * @generated from enum protobuf_unittest.VeryLargeEnum
 */
export enum VeryLargeEnum {
  /**
   * @generated from enum value: ENUM_LABEL_DEFAULT = 0;
   */
  ENUM_LABEL_DEFAULT = 0,

  /**
   * @generated from enum value: ENUM_LABEL_1 = 1;
   */
  ENUM_LABEL_1 = 1,

  /**
   * @generated from enum value: ENUM_LABEL_2 = 2;
   */
  ENUM_LABEL_2 = 2,

  /**
   * @generated from enum value: ENUM_LABEL_3 = 3;
   */
  ENUM_LABEL_3 = 3,

  /**
   * @generated from enum value: ENUM_LABEL_4 = 4;
   */
  ENUM_LABEL_4 = 4,

  /**
   * @generated from enum value: ENUM_LABEL_5 = 5;
   */
  ENUM_LABEL_5 = 5,

  /**
   * @generated from enum value: ENUM_LABEL_6 = 6;
   */
  ENUM_LABEL_6 = 6,

  /**
   * @generated from enum value: ENUM_LABEL_7 = 7;
   */
  ENUM_LABEL_7 = 7,

  /**
   * @generated from enum value: ENUM_LABEL_8 = 8;
   */
  ENUM_LABEL_8 = 8,

  /**
   * @generated from enum value: ENUM_LABEL_9 = 9;
   */
  ENUM_LABEL_9 = 9,

  /**
   * @generated from enum value: ENUM_LABEL_10 = 10;
   */
  ENUM_LABEL_10 = 10,

  /**
   * @generated from enum value: ENUM_LABEL_11 = 11;
   */
  ENUM_LABEL_11 = 11,

  /**
   * @generated from enum value: ENUM_LABEL_12 = 12;
   */
  ENUM_LABEL_12 = 12,

  /**
   * @generated from enum value: ENUM_LABEL_13 = 13;
   */
  ENUM_LABEL_13 = 13,

  /**
   * @generated from enum value: ENUM_LABEL_14 = 14;
   */
  ENUM_LABEL_14 = 14,

  /**
   * @generated from enum value: ENUM_LABEL_15 = 15;
   */
  ENUM_LABEL_15 = 15,

  /**
   * @generated from enum value: ENUM_LABEL_16 = 16;
   */
  ENUM_LABEL_16 = 16,

  /**
   * @generated from enum value: ENUM_LABEL_17 = 17;
   */
  ENUM_LABEL_17 = 17,

  /**
   * @generated from enum value: ENUM_LABEL_18 = 18;
   */
  ENUM_LABEL_18 = 18,

  /**
   * @generated from enum value: ENUM_LABEL_19 = 19;
   */
  ENUM_LABEL_19 = 19,

  /**
   * @generated from enum value: ENUM_LABEL_20 = 20;
   */
  ENUM_LABEL_20 = 20,

  /**
   * @generated from enum value: ENUM_LABEL_21 = 21;
   */
  ENUM_LABEL_21 = 21,

  /**
   * @generated from enum value: ENUM_LABEL_22 = 22;
   */
  ENUM_LABEL_22 = 22,

  /**
   * @generated from enum value: ENUM_LABEL_23 = 23;
   */
  ENUM_LABEL_23 = 23,

  /**
   * @generated from enum value: ENUM_LABEL_24 = 24;
   */
  ENUM_LABEL_24 = 24,

  /**
   * @generated from enum value: ENUM_LABEL_25 = 25;
   */
  ENUM_LABEL_25 = 25,

  /**
   * @generated from enum value: ENUM_LABEL_26 = 26;
   */
  ENUM_LABEL_26 = 26,

  /**
   * @generated from enum value: ENUM_LABEL_27 = 27;
   */
  ENUM_LABEL_27 = 27,

  /**
   * @generated from enum value: ENUM_LABEL_28 = 28;
   */
  ENUM_LABEL_28 = 28,

  /**
   * @generated from enum value: ENUM_LABEL_29 = 29;
   */
  ENUM_LABEL_29 = 29,

  /**
   * @generated from enum value: ENUM_LABEL_30 = 30;
   */
  ENUM_LABEL_30 = 30,

  /**
   * @generated from enum value: ENUM_LABEL_31 = 31;
   */
  ENUM_LABEL_31 = 31,

  /**
   * @generated from enum value: ENUM_LABEL_32 = 32;
   */
  ENUM_LABEL_32 = 32,

  /**
   * @generated from enum value: ENUM_LABEL_33 = 33;
   */
  ENUM_LABEL_33 = 33,

  /**
   * @generated from enum value: ENUM_LABEL_34 = 34;
   */
  ENUM_LABEL_34 = 34,

  /**
   * @generated from enum value: ENUM_LABEL_35 = 35;
   */
  ENUM_LABEL_35 = 35,

  /**
   * @generated from enum value: ENUM_LABEL_36 = 36;
   */
  ENUM_LABEL_36 = 36,

  /**
   * @generated from enum value: ENUM_LABEL_37 = 37;
   */
  ENUM_LABEL_37 = 37,

  /**
   * @generated from enum value: ENUM_LABEL_38 = 38;
   */
  ENUM_LABEL_38 = 38,

  /**
   * @generated from enum value: ENUM_LABEL_39 = 39;
   */
  ENUM_LABEL_39 = 39,

  /**
   * @generated from enum value: ENUM_LABEL_40 = 40;
   */
  ENUM_LABEL_40 = 40,

  /**
   * @generated from enum value: ENUM_LABEL_41 = 41;
   */
  ENUM_LABEL_41 = 41,

  /**
   * @generated from enum value: ENUM_LABEL_42 = 42;
   */
  ENUM_LABEL_42 = 42,

  /**
   * @generated from enum value: ENUM_LABEL_43 = 43;
   */
  ENUM_LABEL_43 = 43,

  /**
   * @generated from enum value: ENUM_LABEL_44 = 44;
   */
  ENUM_LABEL_44 = 44,

  /**
   * @generated from enum value: ENUM_LABEL_45 = 45;
   */
  ENUM_LABEL_45 = 45,

  /**
   * @generated from enum value: ENUM_LABEL_46 = 46;
   */
  ENUM_LABEL_46 = 46,

  /**
   * @generated from enum value: ENUM_LABEL_47 = 47;
   */
  ENUM_LABEL_47 = 47,

  /**
   * @generated from enum value: ENUM_LABEL_48 = 48;
   */
  ENUM_LABEL_48 = 48,

  /**
   * @generated from enum value: ENUM_LABEL_49 = 49;
   */
  ENUM_LABEL_49 = 49,

  /**
   * @generated from enum value: ENUM_LABEL_50 = 50;
   */
  ENUM_LABEL_50 = 50,

  /**
   * @generated from enum value: ENUM_LABEL_51 = 51;
   */
  ENUM_LABEL_51 = 51,

  /**
   * @generated from enum value: ENUM_LABEL_52 = 52;
   */
  ENUM_LABEL_52 = 52,

  /**
   * @generated from enum value: ENUM_LABEL_53 = 53;
   */
  ENUM_LABEL_53 = 53,

  /**
   * @generated from enum value: ENUM_LABEL_54 = 54;
   */
  ENUM_LABEL_54 = 54,

  /**
   * @generated from enum value: ENUM_LABEL_55 = 55;
   */
  ENUM_LABEL_55 = 55,

  /**
   * @generated from enum value: ENUM_LABEL_56 = 56;
   */
  ENUM_LABEL_56 = 56,

  /**
   * @generated from enum value: ENUM_LABEL_57 = 57;
   */
  ENUM_LABEL_57 = 57,

  /**
   * @generated from enum value: ENUM_LABEL_58 = 58;
   */
  ENUM_LABEL_58 = 58,

  /**
   * @generated from enum value: ENUM_LABEL_59 = 59;
   */
  ENUM_LABEL_59 = 59,

  /**
   * @generated from enum value: ENUM_LABEL_60 = 60;
   */
  ENUM_LABEL_60 = 60,

  /**
   * @generated from enum value: ENUM_LABEL_61 = 61;
   */
  ENUM_LABEL_61 = 61,

  /**
   * @generated from enum value: ENUM_LABEL_62 = 62;
   */
  ENUM_LABEL_62 = 62,

  /**
   * @generated from enum value: ENUM_LABEL_63 = 63;
   */
  ENUM_LABEL_63 = 63,

  /**
   * @generated from enum value: ENUM_LABEL_64 = 64;
   */
  ENUM_LABEL_64 = 64,

  /**
   * @generated from enum value: ENUM_LABEL_65 = 65;
   */
  ENUM_LABEL_65 = 65,

  /**
   * @generated from enum value: ENUM_LABEL_66 = 66;
   */
  ENUM_LABEL_66 = 66,

  /**
   * @generated from enum value: ENUM_LABEL_67 = 67;
   */
  ENUM_LABEL_67 = 67,

  /**
   * @generated from enum value: ENUM_LABEL_68 = 68;
   */
  ENUM_LABEL_68 = 68,

  /**
   * @generated from enum value: ENUM_LABEL_69 = 69;
   */
  ENUM_LABEL_69 = 69,

  /**
   * @generated from enum value: ENUM_LABEL_70 = 70;
   */
  ENUM_LABEL_70 = 70,

  /**
   * @generated from enum value: ENUM_LABEL_71 = 71;
   */
  ENUM_LABEL_71 = 71,

  /**
   * @generated from enum value: ENUM_LABEL_72 = 72;
   */
  ENUM_LABEL_72 = 72,

  /**
   * @generated from enum value: ENUM_LABEL_73 = 73;
   */
  ENUM_LABEL_73 = 73,

  /**
   * @generated from enum value: ENUM_LABEL_74 = 74;
   */
  ENUM_LABEL_74 = 74,

  /**
   * @generated from enum value: ENUM_LABEL_75 = 75;
   */
  ENUM_LABEL_75 = 75,

  /**
   * @generated from enum value: ENUM_LABEL_76 = 76;
   */
  ENUM_LABEL_76 = 76,

  /**
   * @generated from enum value: ENUM_LABEL_77 = 77;
   */
  ENUM_LABEL_77 = 77,

  /**
   * @generated from enum value: ENUM_LABEL_78 = 78;
   */
  ENUM_LABEL_78 = 78,

  /**
   * @generated from enum value: ENUM_LABEL_79 = 79;
   */
  ENUM_LABEL_79 = 79,

  /**
   * @generated from enum value: ENUM_LABEL_80 = 80;
   */
  ENUM_LABEL_80 = 80,

  /**
   * @generated from enum value: ENUM_LABEL_81 = 81;
   */
  ENUM_LABEL_81 = 81,

  /**
   * @generated from enum value: ENUM_LABEL_82 = 82;
   */
  ENUM_LABEL_82 = 82,

  /**
   * @generated from enum value: ENUM_LABEL_83 = 83;
   */
  ENUM_LABEL_83 = 83,

  /**
   * @generated from enum value: ENUM_LABEL_84 = 84;
   */
  ENUM_LABEL_84 = 84,

  /**
   * @generated from enum value: ENUM_LABEL_85 = 85;
   */
  ENUM_LABEL_85 = 85,

  /**
   * @generated from enum value: ENUM_LABEL_86 = 86;
   */
  ENUM_LABEL_86 = 86,

  /**
   * @generated from enum value: ENUM_LABEL_87 = 87;
   */
  ENUM_LABEL_87 = 87,

  /**
   * @generated from enum value: ENUM_LABEL_88 = 88;
   */
  ENUM_LABEL_88 = 88,

  /**
   * @generated from enum value: ENUM_LABEL_89 = 89;
   */
  ENUM_LABEL_89 = 89,

  /**
   * @generated from enum value: ENUM_LABEL_90 = 90;
   */
  ENUM_LABEL_90 = 90,

  /**
   * @generated from enum value: ENUM_LABEL_91 = 91;
   */
  ENUM_LABEL_91 = 91,

  /**
   * @generated from enum value: ENUM_LABEL_92 = 92;
   */
  ENUM_LABEL_92 = 92,

  /**
   * @generated from enum value: ENUM_LABEL_93 = 93;
   */
  ENUM_LABEL_93 = 93,

  /**
   * @generated from enum value: ENUM_LABEL_94 = 94;
   */
  ENUM_LABEL_94 = 94,

  /**
   * @generated from enum value: ENUM_LABEL_95 = 95;
   */
  ENUM_LABEL_95 = 95,

  /**
   * @generated from enum value: ENUM_LABEL_96 = 96;
   */
  ENUM_LABEL_96 = 96,

  /**
   * @generated from enum value: ENUM_LABEL_97 = 97;
   */
  ENUM_LABEL_97 = 97,

  /**
   * @generated from enum value: ENUM_LABEL_98 = 98;
   */
  ENUM_LABEL_98 = 98,

  /**
   * @generated from enum value: ENUM_LABEL_99 = 99;
   */
  ENUM_LABEL_99 = 99,

  /**
   * @generated from enum value: ENUM_LABEL_100 = 100;
   */
  ENUM_LABEL_100 = 100,
}
// Retrieve enum metadata with: proto2.getEnumType(VeryLargeEnum)
proto2.util.setEnumType(VeryLargeEnum, "protobuf_unittest.VeryLargeEnum", [
  { no: 0, name: "ENUM_LABEL_DEFAULT" },
  { no: 1, name: "ENUM_LABEL_1" },
  { no: 2, name: "ENUM_LABEL_2" },
  { no: 3, name: "ENUM_LABEL_3" },
  { no: 4, name: "ENUM_LABEL_4" },
  { no: 5, name: "ENUM_LABEL_5" },
  { no: 6, name: "ENUM_LABEL_6" },
  { no: 7, name: "ENUM_LABEL_7" },
  { no: 8, name: "ENUM_LABEL_8" },
  { no: 9, name: "ENUM_LABEL_9" },
  { no: 10, name: "ENUM_LABEL_10" },
  { no: 11, name: "ENUM_LABEL_11" },
  { no: 12, name: "ENUM_LABEL_12" },
  { no: 13, name: "ENUM_LABEL_13" },
  { no: 14, name: "ENUM_LABEL_14" },
  { no: 15, name: "ENUM_LABEL_15" },
  { no: 16, name: "ENUM_LABEL_16" },
  { no: 17, name: "ENUM_LABEL_17" },
  { no: 18, name: "ENUM_LABEL_18" },
  { no: 19, name: "ENUM_LABEL_19" },
  { no: 20, name: "ENUM_LABEL_20" },
  { no: 21, name: "ENUM_LABEL_21" },
  { no: 22, name: "ENUM_LABEL_22" },
  { no: 23, name: "ENUM_LABEL_23" },
  { no: 24, name: "ENUM_LABEL_24" },
  { no: 25, name: "ENUM_LABEL_25" },
  { no: 26, name: "ENUM_LABEL_26" },
  { no: 27, name: "ENUM_LABEL_27" },
  { no: 28, name: "ENUM_LABEL_28" },
  { no: 29, name: "ENUM_LABEL_29" },
  { no: 30, name: "ENUM_LABEL_30" },
  { no: 31, name: "ENUM_LABEL_31" },
  { no: 32, name: "ENUM_LABEL_32" },
  { no: 33, name: "ENUM_LABEL_33" },
  { no: 34, name: "ENUM_LABEL_34" },
  { no: 35, name: "ENUM_LABEL_35" },
  { no: 36, name: "ENUM_LABEL_36" },
  { no: 37, name: "ENUM_LABEL_37" },
  { no: 38, name: "ENUM_LABEL_38" },
  { no: 39, name: "ENUM_LABEL_39" },
  { no: 40, name: "ENUM_LABEL_40" },
  { no: 41, name: "ENUM_LABEL_41" },
  { no: 42, name: "ENUM_LABEL_42" },
  { no: 43, name: "ENUM_LABEL_43" },
  { no: 44, name: "ENUM_LABEL_44" },
  { no: 45, name: "ENUM_LABEL_45" },
  { no: 46, name: "ENUM_LABEL_46" },
  { no: 47, name: "ENUM_LABEL_47" },
  { no: 48, name: "ENUM_LABEL_48" },
  { no: 49, name: "ENUM_LABEL_49" },
  { no: 50, name: "ENUM_LABEL_50" },
  { no: 51, name: "ENUM_LABEL_51" },
  { no: 52, name: "ENUM_LABEL_52" },
  { no: 53, name: "ENUM_LABEL_53" },
  { no: 54, name: "ENUM_LABEL_54" },
  { no: 55, name: "ENUM_LABEL_55" },
  { no: 56, name: "ENUM_LABEL_56" },
  { no: 57, name: "ENUM_LABEL_57" },
  { no: 58, name: "ENUM_LABEL_58" },
  { no: 59, name: "ENUM_LABEL_59" },
  { no: 60, name: "ENUM_LABEL_60" },
  { no: 61, name: "ENUM_LABEL_61" },
  { no: 62, name: "ENUM_LABEL_62" },
  { no: 63, name: "ENUM_LABEL_63" },
  { no: 64, name: "ENUM_LABEL_64" },
  { no: 65, name: "ENUM_LABEL_65" },
  { no: 66, name: "ENUM_LABEL_66" },
  { no: 67, name: "ENUM_LABEL_67" },
  { no: 68, name: "ENUM_LABEL_68" },
  { no: 69, name: "ENUM_LABEL_69" },
  { no: 70, name: "ENUM_LABEL_70" },
  { no: 71, name: "ENUM_LABEL_71" },
  { no: 72, name: "ENUM_LABEL_72" },
  { no: 73, name: "ENUM_LABEL_73" },
  { no: 74, name: "ENUM_LABEL_74" },
  { no: 75, name: "ENUM_LABEL_75" },
  { no: 76, name: "ENUM_LABEL_76" },
  { no: 77, name: "ENUM_LABEL_77" },
  { no: 78, name: "ENUM_LABEL_78" },
  { no: 79, name: "ENUM_LABEL_79" },
  { no: 80, name: "ENUM_LABEL_80" },
  { no: 81, name: "ENUM_LABEL_81" },
  { no: 82, name: "ENUM_LABEL_82" },
  { no: 83, name: "ENUM_LABEL_83" },
  { no: 84, name: "ENUM_LABEL_84" },
  { no: 85, name: "ENUM_LABEL_85" },
  { no: 86, name: "ENUM_LABEL_86" },
  { no: 87, name: "ENUM_LABEL_87" },
  { no: 88, name: "ENUM_LABEL_88" },
  { no: 89, name: "ENUM_LABEL_89" },
  { no: 90, name: "ENUM_LABEL_90" },
  { no: 91, name: "ENUM_LABEL_91" },
  { no: 92, name: "ENUM_LABEL_92" },
  { no: 93, name: "ENUM_LABEL_93" },
  { no: 94, name: "ENUM_LABEL_94" },
  { no: 95, name: "ENUM_LABEL_95" },
  { no: 96, name: "ENUM_LABEL_96" },
  { no: 97, name: "ENUM_LABEL_97" },
  { no: 98, name: "ENUM_LABEL_98" },
  { no: 99, name: "ENUM_LABEL_99" },
  { no: 100, name: "ENUM_LABEL_100" },
]);

/**
 * This proto includes every type of field in both singular and repeated
 * forms.
 *
 * @generated from message protobuf_unittest.TestAllTypes
 */
export class TestAllTypes extends Message<TestAllTypes> {
  /**
   * Singular
   *
   * @generated from field: optional int32 optional_int32 = 1;
   */
  optionalInt32?: number;

  /**
   * @generated from field: optional int64 optional_int64 = 2;
   */
  optionalInt64?: bigint;

  /**
   * @generated from field: optional uint32 optional_uint32 = 3;
   */
  optionalUint32?: number;

  /**
   * @generated from field: optional uint64 optional_uint64 = 4;
   */
  optionalUint64?: bigint;

  /**
   * @generated from field: optional sint32 optional_sint32 = 5;
   */
  optionalSint32?: number;

  /**
   * @generated from field: optional sint64 optional_sint64 = 6;
   */
  optionalSint64?: bigint;

  /**
   * @generated from field: optional fixed32 optional_fixed32 = 7;
   */
  optionalFixed32?: number;

  /**
   * @generated from field: optional fixed64 optional_fixed64 = 8;
   */
  optionalFixed64?: bigint;

  /**
   * @generated from field: optional sfixed32 optional_sfixed32 = 9;
   */
  optionalSfixed32?: number;

  /**
   * @generated from field: optional sfixed64 optional_sfixed64 = 10;
   */
  optionalSfixed64?: bigint;

  /**
   * @generated from field: optional float optional_float = 11;
   */
  optionalFloat?: number;

  /**
   * @generated from field: optional double optional_double = 12;
   */
  optionalDouble?: number;

  /**
   * @generated from field: optional bool optional_bool = 13;
   */
  optionalBool?: boolean;

  /**
   * @generated from field: optional string optional_string = 14;
   */
  optionalString?: string;

  /**
   * @generated from field: optional bytes optional_bytes = 15;
   */
  optionalBytes?: Uint8Array;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes.OptionalGroup optionalgroup = 16;
   */
  optionalgroup?: TestAllTypes_OptionalGroup;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message = 18;
   */
  optionalNestedMessage?: TestAllTypes_NestedMessage;

  /**
   * @generated from field: optional protobuf_unittest.ForeignMessage optional_foreign_message = 19;
   */
  optionalForeignMessage?: ForeignMessage;

  /**
   * @generated from field: optional protobuf_unittest_import.ImportMessage optional_import_message = 20;
   */
  optionalImportMessage?: ImportMessage;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum = 21;
   */
  optionalNestedEnum?: TestAllTypes_NestedEnum;

  /**
   * @generated from field: optional protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
   */
  optionalForeignEnum?: ForeignEnum;

  /**
   * @generated from field: optional protobuf_unittest_import.ImportEnum optional_import_enum = 23;
   */
  optionalImportEnum?: ImportEnum;

  /**
   * @generated from field: optional string optional_string_piece = 24;
   */
  optionalStringPiece?: string;

  /**
   * @generated from field: optional string optional_cord = 25;
   */
  optionalCord?: string;

  /**
   * Defined in unittest_import_public.proto
   *
   * @generated from field: optional protobuf_unittest_import.PublicImportMessage optional_public_import_message = 26;
   */
  optionalPublicImportMessage?: PublicImportMessage;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message = 27;
   */
  optionalLazyMessage?: TestAllTypes_NestedMessage;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes.NestedMessage optional_unverified_lazy_message = 28;
   */
  optionalUnverifiedLazyMessage?: TestAllTypes_NestedMessage;

  /**
   * Repeated
   *
   * @generated from field: repeated int32 repeated_int32 = 31;
   */
  repeatedInt32: number[] = [];

  /**
   * @generated from field: repeated int64 repeated_int64 = 32;
   */
  repeatedInt64: bigint[] = [];

  /**
   * @generated from field: repeated uint32 repeated_uint32 = 33;
   */
  repeatedUint32: number[] = [];

  /**
   * @generated from field: repeated uint64 repeated_uint64 = 34;
   */
  repeatedUint64: bigint[] = [];

  /**
   * @generated from field: repeated sint32 repeated_sint32 = 35;
   */
  repeatedSint32: number[] = [];

  /**
   * @generated from field: repeated sint64 repeated_sint64 = 36;
   */
  repeatedSint64: bigint[] = [];

  /**
   * @generated from field: repeated fixed32 repeated_fixed32 = 37;
   */
  repeatedFixed32: number[] = [];

  /**
   * @generated from field: repeated fixed64 repeated_fixed64 = 38;
   */
  repeatedFixed64: bigint[] = [];

  /**
   * @generated from field: repeated sfixed32 repeated_sfixed32 = 39;
   */
  repeatedSfixed32: number[] = [];

  /**
   * @generated from field: repeated sfixed64 repeated_sfixed64 = 40;
   */
  repeatedSfixed64: bigint[] = [];

  /**
   * @generated from field: repeated float repeated_float = 41;
   */
  repeatedFloat: number[] = [];

  /**
   * @generated from field: repeated double repeated_double = 42;
   */
  repeatedDouble: number[] = [];

  /**
   * @generated from field: repeated bool repeated_bool = 43;
   */
  repeatedBool: boolean[] = [];

  /**
   * @generated from field: repeated string repeated_string = 44;
   */
  repeatedString: string[] = [];

  /**
   * @generated from field: repeated bytes repeated_bytes = 45;
   */
  repeatedBytes: Uint8Array[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes.RepeatedGroup repeatedgroup = 46;
   */
  repeatedgroup: TestAllTypes_RepeatedGroup[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message = 48;
   */
  repeatedNestedMessage: TestAllTypes_NestedMessage[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.ForeignMessage repeated_foreign_message = 49;
   */
  repeatedForeignMessage: ForeignMessage[] = [];

  /**
   * @generated from field: repeated protobuf_unittest_import.ImportMessage repeated_import_message = 50;
   */
  repeatedImportMessage: ImportMessage[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum = 51;
   */
  repeatedNestedEnum: TestAllTypes_NestedEnum[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.ForeignEnum repeated_foreign_enum = 52;
   */
  repeatedForeignEnum: ForeignEnum[] = [];

  /**
   * @generated from field: repeated protobuf_unittest_import.ImportEnum repeated_import_enum = 53;
   */
  repeatedImportEnum: ImportEnum[] = [];

  /**
   * @generated from field: repeated string repeated_string_piece = 54;
   */
  repeatedStringPiece: string[] = [];

  /**
   * @generated from field: repeated string repeated_cord = 55;
   */
  repeatedCord: string[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message = 57;
   */
  repeatedLazyMessage: TestAllTypes_NestedMessage[] = [];

  /**
   * Singular with defaults
   *
   * @generated from field: optional int32 default_int32 = 61 [default = 41];
   */
  defaultInt32?: number;

  /**
   * @generated from field: optional int64 default_int64 = 62 [default = 42];
   */
  defaultInt64?: bigint;

  /**
   * @generated from field: optional uint32 default_uint32 = 63 [default = 43];
   */
  defaultUint32?: number;

  /**
   * @generated from field: optional uint64 default_uint64 = 64 [default = 44];
   */
  defaultUint64?: bigint;

  /**
   * @generated from field: optional sint32 default_sint32 = 65 [default = -45];
   */
  defaultSint32?: number;

  /**
   * @generated from field: optional sint64 default_sint64 = 66 [default = 46];
   */
  defaultSint64?: bigint;

  /**
   * @generated from field: optional fixed32 default_fixed32 = 67 [default = 47];
   */
  defaultFixed32?: number;

  /**
   * @generated from field: optional fixed64 default_fixed64 = 68 [default = 48];
   */
  defaultFixed64?: bigint;

  /**
   * @generated from field: optional sfixed32 default_sfixed32 = 69 [default = 49];
   */
  defaultSfixed32?: number;

  /**
   * @generated from field: optional sfixed64 default_sfixed64 = 70 [default = -50];
   */
  defaultSfixed64?: bigint;

  /**
   * @generated from field: optional float default_float = 71 [default = 51.5];
   */
  defaultFloat?: number;

  /**
   * @generated from field: optional double default_double = 72 [default = 52000];
   */
  defaultDouble?: number;

  /**
   * @generated from field: optional bool default_bool = 73 [default = true];
   */
  defaultBool?: boolean;

  /**
   * @generated from field: optional string default_string = 74 [default = "hello"];
   */
  defaultString?: string;

  /**
   * @generated from field: optional bytes default_bytes = 75 [default = "world"];
   */
  defaultBytes?: Uint8Array;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum = 81 [default = BAR];
   */
  defaultNestedEnum?: TestAllTypes_NestedEnum;

  /**
   * @generated from field: optional protobuf_unittest.ForeignEnum default_foreign_enum = 82 [default = FOREIGN_BAR];
   */
  defaultForeignEnum?: ForeignEnum;

  /**
   * @generated from field: optional protobuf_unittest_import.ImportEnum default_import_enum = 83 [default = IMPORT_BAR];
   */
  defaultImportEnum?: ImportEnum;

  /**
   * @generated from field: optional string default_string_piece = 84 [default = "abc"];
   */
  defaultStringPiece?: string;

  /**
   * @generated from field: optional string default_cord = 85 [default = "123"];
   */
  defaultCord?: string;

  /**
   * For oneof test
   *
   * @generated from oneof protobuf_unittest.TestAllTypes.oneof_field
   */
  oneofField: {
    /**
     * @generated from field: uint32 oneof_uint32 = 111;
     */
    value: number;
    case: "oneofUint32";
  } | {
    /**
     * @generated from field: protobuf_unittest.TestAllTypes.NestedMessage oneof_nested_message = 112;
     */
    value: TestAllTypes_NestedMessage;
    case: "oneofNestedMessage";
  } | {
    /**
     * @generated from field: string oneof_string = 113;
     */
    value: string;
    case: "oneofString";
  } | {
    /**
     * @generated from field: bytes oneof_bytes = 114;
     */
    value: Uint8Array;
    case: "oneofBytes";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TestAllTypes>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestAllTypes";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "optional_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "optional_int64", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "optional_uint32", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "optional_uint64", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: "optional_sint32", kind: "scalar", T: 17 /* ScalarType.SINT32 */, opt: true },
    { no: 6, name: "optional_sint64", kind: "scalar", T: 18 /* ScalarType.SINT64 */, opt: true },
    { no: 7, name: "optional_fixed32", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, opt: true },
    { no: 8, name: "optional_fixed64", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, opt: true },
    { no: 9, name: "optional_sfixed32", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, opt: true },
    { no: 10, name: "optional_sfixed64", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, opt: true },
    { no: 11, name: "optional_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 12, name: "optional_double", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 13, name: "optional_bool", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 14, name: "optional_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "optional_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 16, name: "optionalgroup", kind: "message", T: TestAllTypes_OptionalGroup, opt: true },
    { no: 18, name: "optional_nested_message", kind: "message", T: TestAllTypes_NestedMessage, opt: true },
    { no: 19, name: "optional_foreign_message", kind: "message", T: ForeignMessage, opt: true },
    { no: 20, name: "optional_import_message", kind: "message", T: ImportMessage, opt: true },
    { no: 21, name: "optional_nested_enum", kind: "enum", T: proto2.getEnumType(TestAllTypes_NestedEnum), opt: true },
    { no: 22, name: "optional_foreign_enum", kind: "enum", T: proto2.getEnumType(ForeignEnum), opt: true },
    { no: 23, name: "optional_import_enum", kind: "enum", T: proto2.getEnumType(ImportEnum), opt: true },
    { no: 24, name: "optional_string_piece", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 25, name: "optional_cord", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 26, name: "optional_public_import_message", kind: "message", T: PublicImportMessage, opt: true },
    { no: 27, name: "optional_lazy_message", kind: "message", T: TestAllTypes_NestedMessage, opt: true },
    { no: 28, name: "optional_unverified_lazy_message", kind: "message", T: TestAllTypes_NestedMessage, opt: true },
    { no: 31, name: "repeated_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 32, name: "repeated_int64", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 33, name: "repeated_uint32", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 34, name: "repeated_uint64", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 35, name: "repeated_sint32", kind: "scalar", T: 17 /* ScalarType.SINT32 */, repeated: true },
    { no: 36, name: "repeated_sint64", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true },
    { no: 37, name: "repeated_fixed32", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, repeated: true },
    { no: 38, name: "repeated_fixed64", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, repeated: true },
    { no: 39, name: "repeated_sfixed32", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, repeated: true },
    { no: 40, name: "repeated_sfixed64", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, repeated: true },
    { no: 41, name: "repeated_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 42, name: "repeated_double", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 43, name: "repeated_bool", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 44, name: "repeated_string", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 45, name: "repeated_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 46, name: "repeatedgroup", kind: "message", T: TestAllTypes_RepeatedGroup, repeated: true },
    { no: 48, name: "repeated_nested_message", kind: "message", T: TestAllTypes_NestedMessage, repeated: true },
    { no: 49, name: "repeated_foreign_message", kind: "message", T: ForeignMessage, repeated: true },
    { no: 50, name: "repeated_import_message", kind: "message", T: ImportMessage, repeated: true },
    { no: 51, name: "repeated_nested_enum", kind: "enum", T: proto2.getEnumType(TestAllTypes_NestedEnum), repeated: true },
    { no: 52, name: "repeated_foreign_enum", kind: "enum", T: proto2.getEnumType(ForeignEnum), repeated: true },
    { no: 53, name: "repeated_import_enum", kind: "enum", T: proto2.getEnumType(ImportEnum), repeated: true },
    { no: 54, name: "repeated_string_piece", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 55, name: "repeated_cord", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 57, name: "repeated_lazy_message", kind: "message", T: TestAllTypes_NestedMessage, repeated: true },
    { no: 61, name: "default_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true, default: 41 },
    { no: 62, name: "default_int64", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true, default: protoInt64.parse("42") },
    { no: 63, name: "default_uint32", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true, default: 43 },
    { no: 64, name: "default_uint64", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true, default: protoInt64.uParse("44") },
    { no: 65, name: "default_sint32", kind: "scalar", T: 17 /* ScalarType.SINT32 */, opt: true, default: -45 },
    { no: 66, name: "default_sint64", kind: "scalar", T: 18 /* ScalarType.SINT64 */, opt: true, default: protoInt64.parse("46") },
    { no: 67, name: "default_fixed32", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, opt: true, default: 47 },
    { no: 68, name: "default_fixed64", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, opt: true, default: protoInt64.uParse("48") },
    { no: 69, name: "default_sfixed32", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, opt: true, default: 49 },
    { no: 70, name: "default_sfixed64", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, opt: true, default: protoInt64.parse("-50") },
    { no: 71, name: "default_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: 51.5 },
    { no: 72, name: "default_double", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true, default: 52000 },
    { no: 73, name: "default_bool", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true, default: true },
    { no: 74, name: "default_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "hello" },
    { no: 75, name: "default_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true, default: new Uint8Array([0x77, 0x6F, 0x72, 0x6C, 0x64]) },
    { no: 81, name: "default_nested_enum", kind: "enum", T: proto2.getEnumType(TestAllTypes_NestedEnum), opt: true, default: TestAllTypes_NestedEnum.BAR },
    { no: 82, name: "default_foreign_enum", kind: "enum", T: proto2.getEnumType(ForeignEnum), opt: true, default: ForeignEnum.FOREIGN_BAR },
    { no: 83, name: "default_import_enum", kind: "enum", T: proto2.getEnumType(ImportEnum), opt: true, default: ImportEnum.IMPORT_BAR },
    { no: 84, name: "default_string_piece", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "abc" },
    { no: 85, name: "default_cord", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "123" },
    { no: 111, name: "oneof_uint32", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "oneof_field" },
    { no: 112, name: "oneof_nested_message", kind: "message", T: TestAllTypes_NestedMessage, oneof: "oneof_field" },
    { no: 113, name: "oneof_string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "oneof_field" },
    { no: 114, name: "oneof_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "oneof_field" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestAllTypes {
    return new TestAllTypes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestAllTypes {
    return new TestAllTypes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestAllTypes {
    return new TestAllTypes().fromJsonString(jsonString, options);
  }

  static equals(a: TestAllTypes | PlainMessage<TestAllTypes> | undefined, b: TestAllTypes | PlainMessage<TestAllTypes> | undefined): boolean {
    return proto2.util.equals(TestAllTypes, a, b);
  }
}

/**
 * @generated from enum protobuf_unittest.TestAllTypes.NestedEnum
 */
export enum TestAllTypes_NestedEnum {
  /**
   * @generated from enum value: FOO = 1;
   */
  FOO = 1,

  /**
   * @generated from enum value: BAR = 2;
   */
  BAR = 2,

  /**
   * @generated from enum value: BAZ = 3;
   */
  BAZ = 3,

  /**
   * Intentionally negative.
   *
   * @generated from enum value: NEG = -1;
   */
  NEG = -1,
}
// Retrieve enum metadata with: proto2.getEnumType(TestAllTypes_NestedEnum)
proto2.util.setEnumType(TestAllTypes_NestedEnum, "protobuf_unittest.TestAllTypes.NestedEnum", [
  { no: 1, name: "FOO" },
  { no: 2, name: "BAR" },
  { no: 3, name: "BAZ" },
  { no: -1, name: "NEG" },
]);

/**
 * @generated from message protobuf_unittest.TestAllTypes.NestedMessage
 */
export class TestAllTypes_NestedMessage extends Message<TestAllTypes_NestedMessage> {
  /**
   * The field name "b" fails to compile in proto1 because it conflicts with
   * a local variable named "b" in one of the generated methods.  Doh.
   * This file needs to compile in proto1 to test backwards-compatibility.
   *
   * @generated from field: optional int32 bb = 1;
   */
  bb?: number;

  constructor(data?: PartialMessage<TestAllTypes_NestedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestAllTypes.NestedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "bb", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestAllTypes_NestedMessage {
    return new TestAllTypes_NestedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestAllTypes_NestedMessage {
    return new TestAllTypes_NestedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestAllTypes_NestedMessage {
    return new TestAllTypes_NestedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestAllTypes_NestedMessage | PlainMessage<TestAllTypes_NestedMessage> | undefined, b: TestAllTypes_NestedMessage | PlainMessage<TestAllTypes_NestedMessage> | undefined): boolean {
    return proto2.util.equals(TestAllTypes_NestedMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestAllTypes.OptionalGroup
 */
export class TestAllTypes_OptionalGroup extends Message<TestAllTypes_OptionalGroup> {
  /**
   * @generated from field: optional int32 a = 17;
   */
  a?: number;

  constructor(data?: PartialMessage<TestAllTypes_OptionalGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestAllTypes.OptionalGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 17, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestAllTypes_OptionalGroup {
    return new TestAllTypes_OptionalGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestAllTypes_OptionalGroup {
    return new TestAllTypes_OptionalGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestAllTypes_OptionalGroup {
    return new TestAllTypes_OptionalGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestAllTypes_OptionalGroup | PlainMessage<TestAllTypes_OptionalGroup> | undefined, b: TestAllTypes_OptionalGroup | PlainMessage<TestAllTypes_OptionalGroup> | undefined): boolean {
    return proto2.util.equals(TestAllTypes_OptionalGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestAllTypes.RepeatedGroup
 */
export class TestAllTypes_RepeatedGroup extends Message<TestAllTypes_RepeatedGroup> {
  /**
   * @generated from field: optional int32 a = 47;
   */
  a?: number;

  constructor(data?: PartialMessage<TestAllTypes_RepeatedGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestAllTypes.RepeatedGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 47, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestAllTypes_RepeatedGroup {
    return new TestAllTypes_RepeatedGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestAllTypes_RepeatedGroup {
    return new TestAllTypes_RepeatedGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestAllTypes_RepeatedGroup {
    return new TestAllTypes_RepeatedGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestAllTypes_RepeatedGroup | PlainMessage<TestAllTypes_RepeatedGroup> | undefined, b: TestAllTypes_RepeatedGroup | PlainMessage<TestAllTypes_RepeatedGroup> | undefined): boolean {
    return proto2.util.equals(TestAllTypes_RepeatedGroup, a, b);
  }
}

/**
 * This proto includes a recursively nested message.
 *
 * @generated from message protobuf_unittest.NestedTestAllTypes
 */
export class NestedTestAllTypes extends Message<NestedTestAllTypes> {
  /**
   * @generated from field: optional protobuf_unittest.NestedTestAllTypes child = 1;
   */
  child?: NestedTestAllTypes;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes payload = 2;
   */
  payload?: TestAllTypes;

  /**
   * @generated from field: repeated protobuf_unittest.NestedTestAllTypes repeated_child = 3;
   */
  repeatedChild: NestedTestAllTypes[] = [];

  /**
   * @generated from field: optional protobuf_unittest.NestedTestAllTypes lazy_child = 4;
   */
  lazyChild?: NestedTestAllTypes;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes eager_child = 5;
   */
  eagerChild?: TestAllTypes;

  constructor(data?: PartialMessage<NestedTestAllTypes>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.NestedTestAllTypes";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "child", kind: "message", T: NestedTestAllTypes, opt: true },
    { no: 2, name: "payload", kind: "message", T: TestAllTypes, opt: true },
    { no: 3, name: "repeated_child", kind: "message", T: NestedTestAllTypes, repeated: true },
    { no: 4, name: "lazy_child", kind: "message", T: NestedTestAllTypes, opt: true },
    { no: 5, name: "eager_child", kind: "message", T: TestAllTypes, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NestedTestAllTypes {
    return new NestedTestAllTypes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NestedTestAllTypes {
    return new NestedTestAllTypes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NestedTestAllTypes {
    return new NestedTestAllTypes().fromJsonString(jsonString, options);
  }

  static equals(a: NestedTestAllTypes | PlainMessage<NestedTestAllTypes> | undefined, b: NestedTestAllTypes | PlainMessage<NestedTestAllTypes> | undefined): boolean {
    return proto2.util.equals(NestedTestAllTypes, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestDeprecatedFields
 */
export class TestDeprecatedFields extends Message<TestDeprecatedFields> {
  /**
   * @generated from field: optional int32 deprecated_int32 = 1 [deprecated = true];
   * @deprecated
   */
  deprecatedInt32?: number;

  /**
   * @generated from oneof protobuf_unittest.TestDeprecatedFields.oneof_fields
   */
  oneofFields: {
    /**
     * @generated from field: int32 deprecated_int32_in_oneof = 2 [deprecated = true];
     * @deprecated
     */
    value: number;
    case: "deprecatedInt32InOneof";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TestDeprecatedFields>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestDeprecatedFields";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "deprecated_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "deprecated_int32_in_oneof", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "oneof_fields" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDeprecatedFields {
    return new TestDeprecatedFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDeprecatedFields {
    return new TestDeprecatedFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDeprecatedFields {
    return new TestDeprecatedFields().fromJsonString(jsonString, options);
  }

  static equals(a: TestDeprecatedFields | PlainMessage<TestDeprecatedFields> | undefined, b: TestDeprecatedFields | PlainMessage<TestDeprecatedFields> | undefined): boolean {
    return proto2.util.equals(TestDeprecatedFields, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestDeprecatedMessage
 * @deprecated
 */
export class TestDeprecatedMessage extends Message<TestDeprecatedMessage> {
  constructor(data?: PartialMessage<TestDeprecatedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestDeprecatedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDeprecatedMessage {
    return new TestDeprecatedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDeprecatedMessage {
    return new TestDeprecatedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDeprecatedMessage {
    return new TestDeprecatedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestDeprecatedMessage | PlainMessage<TestDeprecatedMessage> | undefined, b: TestDeprecatedMessage | PlainMessage<TestDeprecatedMessage> | undefined): boolean {
    return proto2.util.equals(TestDeprecatedMessage, a, b);
  }
}

/**
 * Define these after TestAllTypes to make sure the compiler can handle
 * that.
 *
 * @generated from message protobuf_unittest.ForeignMessage
 */
export class ForeignMessage extends Message<ForeignMessage> {
  /**
   * @generated from field: optional int32 c = 1;
   */
  c?: number;

  /**
   * @generated from field: optional int32 d = 2;
   */
  d?: number;

  constructor(data?: PartialMessage<ForeignMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.ForeignMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "c", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "d", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForeignMessage {
    return new ForeignMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForeignMessage {
    return new ForeignMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForeignMessage {
    return new ForeignMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ForeignMessage | PlainMessage<ForeignMessage> | undefined, b: ForeignMessage | PlainMessage<ForeignMessage> | undefined): boolean {
    return proto2.util.equals(ForeignMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestReservedFields
 */
export class TestReservedFields extends Message<TestReservedFields> {
  constructor(data?: PartialMessage<TestReservedFields>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestReservedFields";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestReservedFields {
    return new TestReservedFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestReservedFields {
    return new TestReservedFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestReservedFields {
    return new TestReservedFields().fromJsonString(jsonString, options);
  }

  static equals(a: TestReservedFields | PlainMessage<TestReservedFields> | undefined, b: TestReservedFields | PlainMessage<TestReservedFields> | undefined): boolean {
    return proto2.util.equals(TestReservedFields, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestAllExtensions
 */
export class TestAllExtensions extends Message<TestAllExtensions> {
  constructor(data?: PartialMessage<TestAllExtensions>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestAllExtensions";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestAllExtensions {
    return new TestAllExtensions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestAllExtensions {
    return new TestAllExtensions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestAllExtensions {
    return new TestAllExtensions().fromJsonString(jsonString, options);
  }

  static equals(a: TestAllExtensions | PlainMessage<TestAllExtensions> | undefined, b: TestAllExtensions | PlainMessage<TestAllExtensions> | undefined): boolean {
    return proto2.util.equals(TestAllExtensions, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.OptionalGroup_extension
 */
export class OptionalGroup_extension extends Message<OptionalGroup_extension> {
  /**
   * @generated from field: optional int32 a = 17;
   */
  a?: number;

  constructor(data?: PartialMessage<OptionalGroup_extension>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.OptionalGroup_extension";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 17, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OptionalGroup_extension {
    return new OptionalGroup_extension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OptionalGroup_extension {
    return new OptionalGroup_extension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OptionalGroup_extension {
    return new OptionalGroup_extension().fromJsonString(jsonString, options);
  }

  static equals(a: OptionalGroup_extension | PlainMessage<OptionalGroup_extension> | undefined, b: OptionalGroup_extension | PlainMessage<OptionalGroup_extension> | undefined): boolean {
    return proto2.util.equals(OptionalGroup_extension, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.RepeatedGroup_extension
 */
export class RepeatedGroup_extension extends Message<RepeatedGroup_extension> {
  /**
   * @generated from field: optional int32 a = 47;
   */
  a?: number;

  constructor(data?: PartialMessage<RepeatedGroup_extension>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.RepeatedGroup_extension";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 47, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepeatedGroup_extension {
    return new RepeatedGroup_extension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepeatedGroup_extension {
    return new RepeatedGroup_extension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepeatedGroup_extension {
    return new RepeatedGroup_extension().fromJsonString(jsonString, options);
  }

  static equals(a: RepeatedGroup_extension | PlainMessage<RepeatedGroup_extension> | undefined, b: RepeatedGroup_extension | PlainMessage<RepeatedGroup_extension> | undefined): boolean {
    return proto2.util.equals(RepeatedGroup_extension, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestGroup
 */
export class TestGroup extends Message<TestGroup> {
  /**
   * @generated from field: optional protobuf_unittest.TestGroup.OptionalGroup optionalgroup = 16;
   */
  optionalgroup?: TestGroup_OptionalGroup;

  /**
   * @generated from field: optional protobuf_unittest.ForeignEnum optional_foreign_enum = 22;
   */
  optionalForeignEnum?: ForeignEnum;

  constructor(data?: PartialMessage<TestGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 16, name: "optionalgroup", kind: "message", T: TestGroup_OptionalGroup, opt: true },
    { no: 22, name: "optional_foreign_enum", kind: "enum", T: proto2.getEnumType(ForeignEnum), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestGroup {
    return new TestGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestGroup {
    return new TestGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestGroup {
    return new TestGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestGroup | PlainMessage<TestGroup> | undefined, b: TestGroup | PlainMessage<TestGroup> | undefined): boolean {
    return proto2.util.equals(TestGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestGroup.OptionalGroup
 */
export class TestGroup_OptionalGroup extends Message<TestGroup_OptionalGroup> {
  /**
   * @generated from field: optional int32 a = 17;
   */
  a?: number;

  constructor(data?: PartialMessage<TestGroup_OptionalGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestGroup.OptionalGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 17, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestGroup_OptionalGroup {
    return new TestGroup_OptionalGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestGroup_OptionalGroup {
    return new TestGroup_OptionalGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestGroup_OptionalGroup {
    return new TestGroup_OptionalGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestGroup_OptionalGroup | PlainMessage<TestGroup_OptionalGroup> | undefined, b: TestGroup_OptionalGroup | PlainMessage<TestGroup_OptionalGroup> | undefined): boolean {
    return proto2.util.equals(TestGroup_OptionalGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestGroupExtension
 */
export class TestGroupExtension extends Message<TestGroupExtension> {
  constructor(data?: PartialMessage<TestGroupExtension>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestGroupExtension";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestGroupExtension {
    return new TestGroupExtension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestGroupExtension {
    return new TestGroupExtension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestGroupExtension {
    return new TestGroupExtension().fromJsonString(jsonString, options);
  }

  static equals(a: TestGroupExtension | PlainMessage<TestGroupExtension> | undefined, b: TestGroupExtension | PlainMessage<TestGroupExtension> | undefined): boolean {
    return proto2.util.equals(TestGroupExtension, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestNestedExtension
 */
export class TestNestedExtension extends Message<TestNestedExtension> {
  constructor(data?: PartialMessage<TestNestedExtension>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedExtension";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedExtension {
    return new TestNestedExtension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedExtension {
    return new TestNestedExtension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedExtension {
    return new TestNestedExtension().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedExtension | PlainMessage<TestNestedExtension> | undefined, b: TestNestedExtension | PlainMessage<TestNestedExtension> | undefined): boolean {
    return proto2.util.equals(TestNestedExtension, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestNestedExtension.OptionalGroup_extension
 */
export class TestNestedExtension_OptionalGroup_extension extends Message<TestNestedExtension_OptionalGroup_extension> {
  /**
   * @generated from field: optional int32 a = 17;
   */
  a?: number;

  constructor(data?: PartialMessage<TestNestedExtension_OptionalGroup_extension>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedExtension.OptionalGroup_extension";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 17, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedExtension_OptionalGroup_extension {
    return new TestNestedExtension_OptionalGroup_extension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedExtension_OptionalGroup_extension {
    return new TestNestedExtension_OptionalGroup_extension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedExtension_OptionalGroup_extension {
    return new TestNestedExtension_OptionalGroup_extension().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedExtension_OptionalGroup_extension | PlainMessage<TestNestedExtension_OptionalGroup_extension> | undefined, b: TestNestedExtension_OptionalGroup_extension | PlainMessage<TestNestedExtension_OptionalGroup_extension> | undefined): boolean {
    return proto2.util.equals(TestNestedExtension_OptionalGroup_extension, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestChildExtension
 */
export class TestChildExtension extends Message<TestChildExtension> {
  /**
   * @generated from field: optional string a = 1;
   */
  a?: string;

  /**
   * @generated from field: optional string b = 2;
   */
  b?: string;

  /**
   * @generated from field: optional protobuf_unittest.TestAllExtensions optional_extension = 3;
   */
  optionalExtension?: TestAllExtensions;

  constructor(data?: PartialMessage<TestChildExtension>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestChildExtension";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "b", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "optional_extension", kind: "message", T: TestAllExtensions, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestChildExtension {
    return new TestChildExtension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestChildExtension {
    return new TestChildExtension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestChildExtension {
    return new TestChildExtension().fromJsonString(jsonString, options);
  }

  static equals(a: TestChildExtension | PlainMessage<TestChildExtension> | undefined, b: TestChildExtension | PlainMessage<TestChildExtension> | undefined): boolean {
    return proto2.util.equals(TestChildExtension, a, b);
  }
}

/**
 * Emulates wireformat data of TestChildExtension with dynamic extension
 * (DynamicExtension).
 *
 * @generated from message protobuf_unittest.TestChildExtensionData
 */
export class TestChildExtensionData extends Message<TestChildExtensionData> {
  /**
   * @generated from field: optional string a = 1;
   */
  a?: string;

  /**
   * @generated from field: optional string b = 2;
   */
  b?: string;

  /**
   * @generated from field: optional protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData optional_extension = 3;
   */
  optionalExtension?: TestChildExtensionData_NestedTestAllExtensionsData;

  constructor(data?: PartialMessage<TestChildExtensionData>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestChildExtensionData";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "b", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "optional_extension", kind: "message", T: TestChildExtensionData_NestedTestAllExtensionsData, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestChildExtensionData {
    return new TestChildExtensionData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestChildExtensionData {
    return new TestChildExtensionData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestChildExtensionData {
    return new TestChildExtensionData().fromJsonString(jsonString, options);
  }

  static equals(a: TestChildExtensionData | PlainMessage<TestChildExtensionData> | undefined, b: TestChildExtensionData | PlainMessage<TestChildExtensionData> | undefined): boolean {
    return proto2.util.equals(TestChildExtensionData, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData
 */
export class TestChildExtensionData_NestedTestAllExtensionsData extends Message<TestChildExtensionData_NestedTestAllExtensionsData> {
  /**
   * @generated from field: optional protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions dynamic = 409707008;
   */
  dynamic?: TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions;

  constructor(data?: PartialMessage<TestChildExtensionData_NestedTestAllExtensionsData>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 409707008, name: "dynamic", kind: "message", T: TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestChildExtensionData_NestedTestAllExtensionsData {
    return new TestChildExtensionData_NestedTestAllExtensionsData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestChildExtensionData_NestedTestAllExtensionsData {
    return new TestChildExtensionData_NestedTestAllExtensionsData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestChildExtensionData_NestedTestAllExtensionsData {
    return new TestChildExtensionData_NestedTestAllExtensionsData().fromJsonString(jsonString, options);
  }

  static equals(a: TestChildExtensionData_NestedTestAllExtensionsData | PlainMessage<TestChildExtensionData_NestedTestAllExtensionsData> | undefined, b: TestChildExtensionData_NestedTestAllExtensionsData | PlainMessage<TestChildExtensionData_NestedTestAllExtensionsData> | undefined): boolean {
    return proto2.util.equals(TestChildExtensionData_NestedTestAllExtensionsData, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions
 */
export class TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions extends Message<TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions> {
  /**
   * @generated from field: optional int32 a = 1;
   */
  a?: number;

  /**
   * @generated from field: optional int32 b = 2;
   */
  b?: number;

  constructor(data?: PartialMessage<TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "b", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions {
    return new TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions {
    return new TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions {
    return new TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions().fromJsonString(jsonString, options);
  }

  static equals(a: TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions | PlainMessage<TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions> | undefined, b: TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions | PlainMessage<TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions> | undefined): boolean {
    return proto2.util.equals(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestNestedChildExtension
 */
export class TestNestedChildExtension extends Message<TestNestedChildExtension> {
  /**
   * @generated from field: optional int32 a = 1;
   */
  a?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestChildExtension child = 2;
   */
  child?: TestChildExtension;

  constructor(data?: PartialMessage<TestNestedChildExtension>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedChildExtension";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "child", kind: "message", T: TestChildExtension, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedChildExtension {
    return new TestNestedChildExtension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedChildExtension {
    return new TestNestedChildExtension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedChildExtension {
    return new TestNestedChildExtension().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedChildExtension | PlainMessage<TestNestedChildExtension> | undefined, b: TestNestedChildExtension | PlainMessage<TestNestedChildExtension> | undefined): boolean {
    return proto2.util.equals(TestNestedChildExtension, a, b);
  }
}

/**
 * Emulates wireformat data of TestNestedChildExtension with dynamic extension
 * (DynamicExtension).
 *
 * @generated from message protobuf_unittest.TestNestedChildExtensionData
 */
export class TestNestedChildExtensionData extends Message<TestNestedChildExtensionData> {
  /**
   * @generated from field: optional int32 a = 1;
   */
  a?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestChildExtensionData child = 2;
   */
  child?: TestChildExtensionData;

  constructor(data?: PartialMessage<TestNestedChildExtensionData>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedChildExtensionData";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "child", kind: "message", T: TestChildExtensionData, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedChildExtensionData {
    return new TestNestedChildExtensionData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedChildExtensionData {
    return new TestNestedChildExtensionData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedChildExtensionData {
    return new TestNestedChildExtensionData().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedChildExtensionData | PlainMessage<TestNestedChildExtensionData> | undefined, b: TestNestedChildExtensionData | PlainMessage<TestNestedChildExtensionData> | undefined): boolean {
    return proto2.util.equals(TestNestedChildExtensionData, a, b);
  }
}

/**
 * We have separate messages for testing required fields because it's
 * annoying to have to fill in required fields in TestProto in order to
 * do anything with it.  Note that we don't need to test every type of
 * required filed because the code output is basically identical to
 * optional fields for all types.
 *
 * @generated from message protobuf_unittest.TestRequired
 */
export class TestRequired extends Message<TestRequired> {
  /**
   * @generated from field: required int32 a = 1;
   */
  a?: number;

  /**
   * @generated from field: optional int32 dummy2 = 2;
   */
  dummy2?: number;

  /**
   * @generated from field: required int32 b = 3;
   */
  b?: number;

  /**
   * Pad the field count to 32 so that we can test that IsInitialized()
   * properly checks multiple elements of has_bits_.
   *
   * @generated from field: optional int32 dummy4 = 4;
   */
  dummy4?: number;

  /**
   * @generated from field: optional int32 dummy5 = 5;
   */
  dummy5?: number;

  /**
   * @generated from field: optional int32 dummy6 = 6;
   */
  dummy6?: number;

  /**
   * @generated from field: optional int32 dummy7 = 7;
   */
  dummy7?: number;

  /**
   * @generated from field: optional int32 dummy8 = 8;
   */
  dummy8?: number;

  /**
   * @generated from field: optional int32 dummy9 = 9;
   */
  dummy9?: number;

  /**
   * @generated from field: optional int32 dummy10 = 10;
   */
  dummy10?: number;

  /**
   * @generated from field: optional int32 dummy11 = 11;
   */
  dummy11?: number;

  /**
   * @generated from field: optional int32 dummy12 = 12;
   */
  dummy12?: number;

  /**
   * @generated from field: optional int32 dummy13 = 13;
   */
  dummy13?: number;

  /**
   * @generated from field: optional int32 dummy14 = 14;
   */
  dummy14?: number;

  /**
   * @generated from field: optional int32 dummy15 = 15;
   */
  dummy15?: number;

  /**
   * @generated from field: optional int32 dummy16 = 16;
   */
  dummy16?: number;

  /**
   * @generated from field: optional int32 dummy17 = 17;
   */
  dummy17?: number;

  /**
   * @generated from field: optional int32 dummy18 = 18;
   */
  dummy18?: number;

  /**
   * @generated from field: optional int32 dummy19 = 19;
   */
  dummy19?: number;

  /**
   * @generated from field: optional int32 dummy20 = 20;
   */
  dummy20?: number;

  /**
   * @generated from field: optional int32 dummy21 = 21;
   */
  dummy21?: number;

  /**
   * @generated from field: optional int32 dummy22 = 22;
   */
  dummy22?: number;

  /**
   * @generated from field: optional int32 dummy23 = 23;
   */
  dummy23?: number;

  /**
   * @generated from field: optional int32 dummy24 = 24;
   */
  dummy24?: number;

  /**
   * @generated from field: optional int32 dummy25 = 25;
   */
  dummy25?: number;

  /**
   * @generated from field: optional int32 dummy26 = 26;
   */
  dummy26?: number;

  /**
   * @generated from field: optional int32 dummy27 = 27;
   */
  dummy27?: number;

  /**
   * @generated from field: optional int32 dummy28 = 28;
   */
  dummy28?: number;

  /**
   * @generated from field: optional int32 dummy29 = 29;
   */
  dummy29?: number;

  /**
   * @generated from field: optional int32 dummy30 = 30;
   */
  dummy30?: number;

  /**
   * @generated from field: optional int32 dummy31 = 31;
   */
  dummy31?: number;

  /**
   * @generated from field: optional int32 dummy32 = 32;
   */
  dummy32?: number;

  /**
   * @generated from field: required int32 c = 33;
   */
  c?: number;

  /**
   * Add an optional child message to make this non-trivial for go/pdlazy.
   *
   * @generated from field: optional protobuf_unittest.ForeignMessage optional_foreign = 34;
   */
  optionalForeign?: ForeignMessage;

  constructor(data?: PartialMessage<TestRequired>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestRequired";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "dummy2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "b", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "dummy4", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "dummy5", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "dummy6", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "dummy7", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 8, name: "dummy8", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 9, name: "dummy9", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 10, name: "dummy10", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 11, name: "dummy11", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 12, name: "dummy12", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 13, name: "dummy13", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 14, name: "dummy14", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 15, name: "dummy15", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 16, name: "dummy16", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 17, name: "dummy17", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 18, name: "dummy18", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 19, name: "dummy19", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 20, name: "dummy20", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 21, name: "dummy21", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 22, name: "dummy22", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 23, name: "dummy23", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 24, name: "dummy24", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 25, name: "dummy25", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 26, name: "dummy26", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 27, name: "dummy27", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 28, name: "dummy28", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 29, name: "dummy29", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 30, name: "dummy30", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 31, name: "dummy31", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 32, name: "dummy32", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 33, name: "c", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 34, name: "optional_foreign", kind: "message", T: ForeignMessage, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRequired {
    return new TestRequired().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRequired {
    return new TestRequired().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRequired {
    return new TestRequired().fromJsonString(jsonString, options);
  }

  static equals(a: TestRequired | PlainMessage<TestRequired> | undefined, b: TestRequired | PlainMessage<TestRequired> | undefined): boolean {
    return proto2.util.equals(TestRequired, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestRequiredForeign
 */
export class TestRequiredForeign extends Message<TestRequiredForeign> {
  /**
   * @generated from field: optional protobuf_unittest.TestRequired optional_message = 1;
   */
  optionalMessage?: TestRequired;

  /**
   * @generated from field: repeated protobuf_unittest.TestRequired repeated_message = 2;
   */
  repeatedMessage: TestRequired[] = [];

  /**
   * @generated from field: optional int32 dummy = 3;
   */
  dummy?: number;

  constructor(data?: PartialMessage<TestRequiredForeign>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestRequiredForeign";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "optional_message", kind: "message", T: TestRequired, opt: true },
    { no: 2, name: "repeated_message", kind: "message", T: TestRequired, repeated: true },
    { no: 3, name: "dummy", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRequiredForeign {
    return new TestRequiredForeign().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRequiredForeign {
    return new TestRequiredForeign().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRequiredForeign {
    return new TestRequiredForeign().fromJsonString(jsonString, options);
  }

  static equals(a: TestRequiredForeign | PlainMessage<TestRequiredForeign> | undefined, b: TestRequiredForeign | PlainMessage<TestRequiredForeign> | undefined): boolean {
    return proto2.util.equals(TestRequiredForeign, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestRequiredMessage
 */
export class TestRequiredMessage extends Message<TestRequiredMessage> {
  /**
   * @generated from field: optional protobuf_unittest.TestRequired optional_message = 1;
   */
  optionalMessage?: TestRequired;

  /**
   * @generated from field: repeated protobuf_unittest.TestRequired repeated_message = 2;
   */
  repeatedMessage: TestRequired[] = [];

  /**
   * @generated from field: required protobuf_unittest.TestRequired required_message = 3;
   */
  requiredMessage?: TestRequired;

  constructor(data?: PartialMessage<TestRequiredMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestRequiredMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "optional_message", kind: "message", T: TestRequired, opt: true },
    { no: 2, name: "repeated_message", kind: "message", T: TestRequired, repeated: true },
    { no: 3, name: "required_message", kind: "message", T: TestRequired },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRequiredMessage {
    return new TestRequiredMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRequiredMessage {
    return new TestRequiredMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRequiredMessage {
    return new TestRequiredMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestRequiredMessage | PlainMessage<TestRequiredMessage> | undefined, b: TestRequiredMessage | PlainMessage<TestRequiredMessage> | undefined): boolean {
    return proto2.util.equals(TestRequiredMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestNestedRequiredForeign
 */
export class TestNestedRequiredForeign extends Message<TestNestedRequiredForeign> {
  /**
   * @generated from field: optional protobuf_unittest.TestNestedRequiredForeign child = 1;
   */
  child?: TestNestedRequiredForeign;

  /**
   * @generated from field: optional protobuf_unittest.TestRequiredForeign payload = 2;
   */
  payload?: TestRequiredForeign;

  /**
   * @generated from field: optional int32 dummy = 3;
   */
  dummy?: number;

  constructor(data?: PartialMessage<TestNestedRequiredForeign>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedRequiredForeign";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "child", kind: "message", T: TestNestedRequiredForeign, opt: true },
    { no: 2, name: "payload", kind: "message", T: TestRequiredForeign, opt: true },
    { no: 3, name: "dummy", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedRequiredForeign {
    return new TestNestedRequiredForeign().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedRequiredForeign {
    return new TestNestedRequiredForeign().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedRequiredForeign {
    return new TestNestedRequiredForeign().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedRequiredForeign | PlainMessage<TestNestedRequiredForeign> | undefined, b: TestNestedRequiredForeign | PlainMessage<TestNestedRequiredForeign> | undefined): boolean {
    return proto2.util.equals(TestNestedRequiredForeign, a, b);
  }
}

/**
 * Test that we can use NestedMessage from outside TestAllTypes.
 *
 * @generated from message protobuf_unittest.TestForeignNested
 */
export class TestForeignNested extends Message<TestForeignNested> {
  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes.NestedMessage foreign_nested = 1;
   */
  foreignNested?: TestAllTypes_NestedMessage;

  constructor(data?: PartialMessage<TestForeignNested>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestForeignNested";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "foreign_nested", kind: "message", T: TestAllTypes_NestedMessage, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestForeignNested {
    return new TestForeignNested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestForeignNested {
    return new TestForeignNested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestForeignNested {
    return new TestForeignNested().fromJsonString(jsonString, options);
  }

  static equals(a: TestForeignNested | PlainMessage<TestForeignNested> | undefined, b: TestForeignNested | PlainMessage<TestForeignNested> | undefined): boolean {
    return proto2.util.equals(TestForeignNested, a, b);
  }
}

/**
 * TestEmptyMessage is used to test unknown field support.
 *
 * @generated from message protobuf_unittest.TestEmptyMessage
 */
export class TestEmptyMessage extends Message<TestEmptyMessage> {
  constructor(data?: PartialMessage<TestEmptyMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestEmptyMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestEmptyMessage {
    return new TestEmptyMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestEmptyMessage {
    return new TestEmptyMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestEmptyMessage {
    return new TestEmptyMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestEmptyMessage | PlainMessage<TestEmptyMessage> | undefined, b: TestEmptyMessage | PlainMessage<TestEmptyMessage> | undefined): boolean {
    return proto2.util.equals(TestEmptyMessage, a, b);
  }
}

/**
 * Like above, but declare all field numbers as potential extensions.  No
 * actual extensions should ever be defined for this type.
 *
 * @generated from message protobuf_unittest.TestEmptyMessageWithExtensions
 */
export class TestEmptyMessageWithExtensions extends Message<TestEmptyMessageWithExtensions> {
  constructor(data?: PartialMessage<TestEmptyMessageWithExtensions>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestEmptyMessageWithExtensions";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestEmptyMessageWithExtensions {
    return new TestEmptyMessageWithExtensions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestEmptyMessageWithExtensions {
    return new TestEmptyMessageWithExtensions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestEmptyMessageWithExtensions {
    return new TestEmptyMessageWithExtensions().fromJsonString(jsonString, options);
  }

  static equals(a: TestEmptyMessageWithExtensions | PlainMessage<TestEmptyMessageWithExtensions> | undefined, b: TestEmptyMessageWithExtensions | PlainMessage<TestEmptyMessageWithExtensions> | undefined): boolean {
    return proto2.util.equals(TestEmptyMessageWithExtensions, a, b);
  }
}

/**
 * Needed for a Python test.
 *
 * @generated from message protobuf_unittest.TestPickleNestedMessage
 */
export class TestPickleNestedMessage extends Message<TestPickleNestedMessage> {
  constructor(data?: PartialMessage<TestPickleNestedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestPickleNestedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestPickleNestedMessage {
    return new TestPickleNestedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestPickleNestedMessage {
    return new TestPickleNestedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestPickleNestedMessage {
    return new TestPickleNestedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestPickleNestedMessage | PlainMessage<TestPickleNestedMessage> | undefined, b: TestPickleNestedMessage | PlainMessage<TestPickleNestedMessage> | undefined): boolean {
    return proto2.util.equals(TestPickleNestedMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestPickleNestedMessage.NestedMessage
 */
export class TestPickleNestedMessage_NestedMessage extends Message<TestPickleNestedMessage_NestedMessage> {
  /**
   * @generated from field: optional int32 bb = 1;
   */
  bb?: number;

  constructor(data?: PartialMessage<TestPickleNestedMessage_NestedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestPickleNestedMessage.NestedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "bb", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestPickleNestedMessage_NestedMessage {
    return new TestPickleNestedMessage_NestedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestPickleNestedMessage_NestedMessage {
    return new TestPickleNestedMessage_NestedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestPickleNestedMessage_NestedMessage {
    return new TestPickleNestedMessage_NestedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestPickleNestedMessage_NestedMessage | PlainMessage<TestPickleNestedMessage_NestedMessage> | undefined, b: TestPickleNestedMessage_NestedMessage | PlainMessage<TestPickleNestedMessage_NestedMessage> | undefined): boolean {
    return proto2.util.equals(TestPickleNestedMessage_NestedMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage
 */
export class TestPickleNestedMessage_NestedMessage_NestedNestedMessage extends Message<TestPickleNestedMessage_NestedMessage_NestedNestedMessage> {
  /**
   * @generated from field: optional int32 cc = 1;
   */
  cc?: number;

  constructor(data?: PartialMessage<TestPickleNestedMessage_NestedMessage_NestedNestedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "cc", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestPickleNestedMessage_NestedMessage_NestedNestedMessage {
    return new TestPickleNestedMessage_NestedMessage_NestedNestedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestPickleNestedMessage_NestedMessage_NestedNestedMessage {
    return new TestPickleNestedMessage_NestedMessage_NestedNestedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestPickleNestedMessage_NestedMessage_NestedNestedMessage {
    return new TestPickleNestedMessage_NestedMessage_NestedNestedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestPickleNestedMessage_NestedMessage_NestedNestedMessage | PlainMessage<TestPickleNestedMessage_NestedMessage_NestedNestedMessage> | undefined, b: TestPickleNestedMessage_NestedMessage_NestedNestedMessage | PlainMessage<TestPickleNestedMessage_NestedMessage_NestedNestedMessage> | undefined): boolean {
    return proto2.util.equals(TestPickleNestedMessage_NestedMessage_NestedNestedMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestMultipleExtensionRanges
 */
export class TestMultipleExtensionRanges extends Message<TestMultipleExtensionRanges> {
  constructor(data?: PartialMessage<TestMultipleExtensionRanges>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestMultipleExtensionRanges";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMultipleExtensionRanges {
    return new TestMultipleExtensionRanges().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMultipleExtensionRanges {
    return new TestMultipleExtensionRanges().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMultipleExtensionRanges {
    return new TestMultipleExtensionRanges().fromJsonString(jsonString, options);
  }

  static equals(a: TestMultipleExtensionRanges | PlainMessage<TestMultipleExtensionRanges> | undefined, b: TestMultipleExtensionRanges | PlainMessage<TestMultipleExtensionRanges> | undefined): boolean {
    return proto2.util.equals(TestMultipleExtensionRanges, a, b);
  }
}

/**
 * Test that really large tag numbers don't break anything.
 *
 * @generated from message protobuf_unittest.TestReallyLargeTagNumber
 */
export class TestReallyLargeTagNumber extends Message<TestReallyLargeTagNumber> {
  /**
   * The largest possible tag number is 2^28 - 1, since the wire format uses
   * three bits to communicate wire type.
   *
   * @generated from field: optional int32 a = 1;
   */
  a?: number;

  /**
   * @generated from field: optional int32 bb = 268435455;
   */
  bb?: number;

  constructor(data?: PartialMessage<TestReallyLargeTagNumber>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestReallyLargeTagNumber";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 268435455, name: "bb", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestReallyLargeTagNumber {
    return new TestReallyLargeTagNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestReallyLargeTagNumber {
    return new TestReallyLargeTagNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestReallyLargeTagNumber {
    return new TestReallyLargeTagNumber().fromJsonString(jsonString, options);
  }

  static equals(a: TestReallyLargeTagNumber | PlainMessage<TestReallyLargeTagNumber> | undefined, b: TestReallyLargeTagNumber | PlainMessage<TestReallyLargeTagNumber> | undefined): boolean {
    return proto2.util.equals(TestReallyLargeTagNumber, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestRecursiveMessage
 */
export class TestRecursiveMessage extends Message<TestRecursiveMessage> {
  /**
   * @generated from field: optional protobuf_unittest.TestRecursiveMessage a = 1;
   */
  a?: TestRecursiveMessage;

  /**
   * @generated from field: optional int32 i = 2;
   */
  i?: number;

  constructor(data?: PartialMessage<TestRecursiveMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestRecursiveMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "message", T: TestRecursiveMessage, opt: true },
    { no: 2, name: "i", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRecursiveMessage {
    return new TestRecursiveMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRecursiveMessage {
    return new TestRecursiveMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRecursiveMessage {
    return new TestRecursiveMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestRecursiveMessage | PlainMessage<TestRecursiveMessage> | undefined, b: TestRecursiveMessage | PlainMessage<TestRecursiveMessage> | undefined): boolean {
    return proto2.util.equals(TestRecursiveMessage, a, b);
  }
}

/**
 * Test that mutual recursion works.
 *
 * @generated from message protobuf_unittest.TestMutualRecursionA
 */
export class TestMutualRecursionA extends Message<TestMutualRecursionA> {
  /**
   * @generated from field: optional protobuf_unittest.TestMutualRecursionB bb = 1;
   */
  bb?: TestMutualRecursionB;

  /**
   * @generated from field: optional protobuf_unittest.TestMutualRecursionA.SubGroup subgroup = 2;
   */
  subgroup?: TestMutualRecursionA_SubGroup;

  constructor(data?: PartialMessage<TestMutualRecursionA>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestMutualRecursionA";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "bb", kind: "message", T: TestMutualRecursionB, opt: true },
    { no: 2, name: "subgroup", kind: "message", T: TestMutualRecursionA_SubGroup, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMutualRecursionA {
    return new TestMutualRecursionA().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMutualRecursionA {
    return new TestMutualRecursionA().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMutualRecursionA {
    return new TestMutualRecursionA().fromJsonString(jsonString, options);
  }

  static equals(a: TestMutualRecursionA | PlainMessage<TestMutualRecursionA> | undefined, b: TestMutualRecursionA | PlainMessage<TestMutualRecursionA> | undefined): boolean {
    return proto2.util.equals(TestMutualRecursionA, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestMutualRecursionA.SubMessage
 */
export class TestMutualRecursionA_SubMessage extends Message<TestMutualRecursionA_SubMessage> {
  /**
   * @generated from field: optional protobuf_unittest.TestMutualRecursionB b = 1;
   */
  b?: TestMutualRecursionB;

  constructor(data?: PartialMessage<TestMutualRecursionA_SubMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestMutualRecursionA.SubMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "b", kind: "message", T: TestMutualRecursionB, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMutualRecursionA_SubMessage {
    return new TestMutualRecursionA_SubMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMutualRecursionA_SubMessage {
    return new TestMutualRecursionA_SubMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMutualRecursionA_SubMessage {
    return new TestMutualRecursionA_SubMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestMutualRecursionA_SubMessage | PlainMessage<TestMutualRecursionA_SubMessage> | undefined, b: TestMutualRecursionA_SubMessage | PlainMessage<TestMutualRecursionA_SubMessage> | undefined): boolean {
    return proto2.util.equals(TestMutualRecursionA_SubMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestMutualRecursionA.SubGroup
 */
export class TestMutualRecursionA_SubGroup extends Message<TestMutualRecursionA_SubGroup> {
  /**
   * Needed because of bug in javatest
   *
   * @generated from field: optional protobuf_unittest.TestMutualRecursionA.SubMessage sub_message = 3;
   */
  subMessage?: TestMutualRecursionA_SubMessage;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes not_in_this_scc = 4;
   */
  notInThisScc?: TestAllTypes;

  constructor(data?: PartialMessage<TestMutualRecursionA_SubGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestMutualRecursionA.SubGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 3, name: "sub_message", kind: "message", T: TestMutualRecursionA_SubMessage, opt: true },
    { no: 4, name: "not_in_this_scc", kind: "message", T: TestAllTypes, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMutualRecursionA_SubGroup {
    return new TestMutualRecursionA_SubGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMutualRecursionA_SubGroup {
    return new TestMutualRecursionA_SubGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMutualRecursionA_SubGroup {
    return new TestMutualRecursionA_SubGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestMutualRecursionA_SubGroup | PlainMessage<TestMutualRecursionA_SubGroup> | undefined, b: TestMutualRecursionA_SubGroup | PlainMessage<TestMutualRecursionA_SubGroup> | undefined): boolean {
    return proto2.util.equals(TestMutualRecursionA_SubGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestMutualRecursionB
 */
export class TestMutualRecursionB extends Message<TestMutualRecursionB> {
  /**
   * @generated from field: optional protobuf_unittest.TestMutualRecursionA a = 1;
   */
  a?: TestMutualRecursionA;

  /**
   * @generated from field: optional int32 optional_int32 = 2;
   */
  optionalInt32?: number;

  constructor(data?: PartialMessage<TestMutualRecursionB>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestMutualRecursionB";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "message", T: TestMutualRecursionA, opt: true },
    { no: 2, name: "optional_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMutualRecursionB {
    return new TestMutualRecursionB().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMutualRecursionB {
    return new TestMutualRecursionB().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMutualRecursionB {
    return new TestMutualRecursionB().fromJsonString(jsonString, options);
  }

  static equals(a: TestMutualRecursionB | PlainMessage<TestMutualRecursionB> | undefined, b: TestMutualRecursionB | PlainMessage<TestMutualRecursionB> | undefined): boolean {
    return proto2.util.equals(TestMutualRecursionB, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestIsInitialized
 */
export class TestIsInitialized extends Message<TestIsInitialized> {
  /**
   * @generated from field: optional protobuf_unittest.TestIsInitialized.SubMessage sub_message = 1;
   */
  subMessage?: TestIsInitialized_SubMessage;

  constructor(data?: PartialMessage<TestIsInitialized>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestIsInitialized";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "sub_message", kind: "message", T: TestIsInitialized_SubMessage, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestIsInitialized {
    return new TestIsInitialized().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestIsInitialized {
    return new TestIsInitialized().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestIsInitialized {
    return new TestIsInitialized().fromJsonString(jsonString, options);
  }

  static equals(a: TestIsInitialized | PlainMessage<TestIsInitialized> | undefined, b: TestIsInitialized | PlainMessage<TestIsInitialized> | undefined): boolean {
    return proto2.util.equals(TestIsInitialized, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestIsInitialized.SubMessage
 */
export class TestIsInitialized_SubMessage extends Message<TestIsInitialized_SubMessage> {
  /**
   * @generated from field: optional protobuf_unittest.TestIsInitialized.SubMessage.SubGroup subgroup = 1;
   */
  subgroup?: TestIsInitialized_SubMessage_SubGroup;

  constructor(data?: PartialMessage<TestIsInitialized_SubMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestIsInitialized.SubMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "subgroup", kind: "message", T: TestIsInitialized_SubMessage_SubGroup, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestIsInitialized_SubMessage {
    return new TestIsInitialized_SubMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestIsInitialized_SubMessage {
    return new TestIsInitialized_SubMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestIsInitialized_SubMessage {
    return new TestIsInitialized_SubMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestIsInitialized_SubMessage | PlainMessage<TestIsInitialized_SubMessage> | undefined, b: TestIsInitialized_SubMessage | PlainMessage<TestIsInitialized_SubMessage> | undefined): boolean {
    return proto2.util.equals(TestIsInitialized_SubMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestIsInitialized.SubMessage.SubGroup
 */
export class TestIsInitialized_SubMessage_SubGroup extends Message<TestIsInitialized_SubMessage_SubGroup> {
  /**
   * @generated from field: required int32 i = 2;
   */
  i?: number;

  constructor(data?: PartialMessage<TestIsInitialized_SubMessage_SubGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestIsInitialized.SubMessage.SubGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 2, name: "i", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestIsInitialized_SubMessage_SubGroup {
    return new TestIsInitialized_SubMessage_SubGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestIsInitialized_SubMessage_SubGroup {
    return new TestIsInitialized_SubMessage_SubGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestIsInitialized_SubMessage_SubGroup {
    return new TestIsInitialized_SubMessage_SubGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestIsInitialized_SubMessage_SubGroup | PlainMessage<TestIsInitialized_SubMessage_SubGroup> | undefined, b: TestIsInitialized_SubMessage_SubGroup | PlainMessage<TestIsInitialized_SubMessage_SubGroup> | undefined): boolean {
    return proto2.util.equals(TestIsInitialized_SubMessage_SubGroup, a, b);
  }
}

/**
 * Test that groups have disjoint field numbers from their siblings and
 * parents.  This is NOT possible in proto1; only google.protobuf.  When attempting
 * to compile with proto1, this will emit an error; so we only include it
 * in protobuf_unittest_proto.
 *
 * NO_PROTO1
 *
 * @generated from message protobuf_unittest.TestDupFieldNumber
 */
export class TestDupFieldNumber extends Message<TestDupFieldNumber> {
  /**
   * NO_PROTO1
   *
   * @generated from field: optional int32 a = 1;
   */
  a?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestDupFieldNumber.Foo foo = 2;
   */
  foo?: TestDupFieldNumber_Foo;

  /**
   * @generated from field: optional protobuf_unittest.TestDupFieldNumber.Bar bar = 3;
   */
  bar?: TestDupFieldNumber_Bar;

  constructor(data?: PartialMessage<TestDupFieldNumber>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestDupFieldNumber";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "foo", kind: "message", T: TestDupFieldNumber_Foo, opt: true },
    { no: 3, name: "bar", kind: "message", T: TestDupFieldNumber_Bar, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDupFieldNumber {
    return new TestDupFieldNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDupFieldNumber {
    return new TestDupFieldNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDupFieldNumber {
    return new TestDupFieldNumber().fromJsonString(jsonString, options);
  }

  static equals(a: TestDupFieldNumber | PlainMessage<TestDupFieldNumber> | undefined, b: TestDupFieldNumber | PlainMessage<TestDupFieldNumber> | undefined): boolean {
    return proto2.util.equals(TestDupFieldNumber, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestDupFieldNumber.Foo
 */
export class TestDupFieldNumber_Foo extends Message<TestDupFieldNumber_Foo> {
  /**
   * @generated from field: optional int32 a = 1;
   */
  a?: number;

  constructor(data?: PartialMessage<TestDupFieldNumber_Foo>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestDupFieldNumber.Foo";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDupFieldNumber_Foo {
    return new TestDupFieldNumber_Foo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDupFieldNumber_Foo {
    return new TestDupFieldNumber_Foo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDupFieldNumber_Foo {
    return new TestDupFieldNumber_Foo().fromJsonString(jsonString, options);
  }

  static equals(a: TestDupFieldNumber_Foo | PlainMessage<TestDupFieldNumber_Foo> | undefined, b: TestDupFieldNumber_Foo | PlainMessage<TestDupFieldNumber_Foo> | undefined): boolean {
    return proto2.util.equals(TestDupFieldNumber_Foo, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestDupFieldNumber.Bar
 */
export class TestDupFieldNumber_Bar extends Message<TestDupFieldNumber_Bar> {
  /**
   * @generated from field: optional int32 a = 1;
   */
  a?: number;

  constructor(data?: PartialMessage<TestDupFieldNumber_Bar>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestDupFieldNumber.Bar";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDupFieldNumber_Bar {
    return new TestDupFieldNumber_Bar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDupFieldNumber_Bar {
    return new TestDupFieldNumber_Bar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDupFieldNumber_Bar {
    return new TestDupFieldNumber_Bar().fromJsonString(jsonString, options);
  }

  static equals(a: TestDupFieldNumber_Bar | PlainMessage<TestDupFieldNumber_Bar> | undefined, b: TestDupFieldNumber_Bar | PlainMessage<TestDupFieldNumber_Bar> | undefined): boolean {
    return proto2.util.equals(TestDupFieldNumber_Bar, a, b);
  }
}

/**
 * Additional messages for testing lazy fields.
 *
 * @generated from message protobuf_unittest.TestEagerMessage
 */
export class TestEagerMessage extends Message<TestEagerMessage> {
  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes sub_message = 1;
   */
  subMessage?: TestAllTypes;

  constructor(data?: PartialMessage<TestEagerMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestEagerMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "sub_message", kind: "message", T: TestAllTypes, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestEagerMessage {
    return new TestEagerMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestEagerMessage {
    return new TestEagerMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestEagerMessage {
    return new TestEagerMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestEagerMessage | PlainMessage<TestEagerMessage> | undefined, b: TestEagerMessage | PlainMessage<TestEagerMessage> | undefined): boolean {
    return proto2.util.equals(TestEagerMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestLazyMessage
 */
export class TestLazyMessage extends Message<TestLazyMessage> {
  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes sub_message = 1;
   */
  subMessage?: TestAllTypes;

  constructor(data?: PartialMessage<TestLazyMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestLazyMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "sub_message", kind: "message", T: TestAllTypes, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestLazyMessage {
    return new TestLazyMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestLazyMessage {
    return new TestLazyMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestLazyMessage {
    return new TestLazyMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestLazyMessage | PlainMessage<TestLazyMessage> | undefined, b: TestLazyMessage | PlainMessage<TestLazyMessage> | undefined): boolean {
    return proto2.util.equals(TestLazyMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestEagerMaybeLazy
 */
export class TestEagerMaybeLazy extends Message<TestEagerMaybeLazy> {
  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes message_foo = 1;
   */
  messageFoo?: TestAllTypes;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes message_bar = 2;
   */
  messageBar?: TestAllTypes;

  /**
   * @generated from field: optional protobuf_unittest.TestEagerMaybeLazy.NestedMessage message_baz = 3;
   */
  messageBaz?: TestEagerMaybeLazy_NestedMessage;

  constructor(data?: PartialMessage<TestEagerMaybeLazy>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestEagerMaybeLazy";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "message_foo", kind: "message", T: TestAllTypes, opt: true },
    { no: 2, name: "message_bar", kind: "message", T: TestAllTypes, opt: true },
    { no: 3, name: "message_baz", kind: "message", T: TestEagerMaybeLazy_NestedMessage, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestEagerMaybeLazy {
    return new TestEagerMaybeLazy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestEagerMaybeLazy {
    return new TestEagerMaybeLazy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestEagerMaybeLazy {
    return new TestEagerMaybeLazy().fromJsonString(jsonString, options);
  }

  static equals(a: TestEagerMaybeLazy | PlainMessage<TestEagerMaybeLazy> | undefined, b: TestEagerMaybeLazy | PlainMessage<TestEagerMaybeLazy> | undefined): boolean {
    return proto2.util.equals(TestEagerMaybeLazy, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestEagerMaybeLazy.NestedMessage
 */
export class TestEagerMaybeLazy_NestedMessage extends Message<TestEagerMaybeLazy_NestedMessage> {
  /**
   * @generated from field: optional protobuf_unittest.TestPackedTypes packed = 1;
   */
  packed?: TestPackedTypes;

  constructor(data?: PartialMessage<TestEagerMaybeLazy_NestedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestEagerMaybeLazy.NestedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "packed", kind: "message", T: TestPackedTypes, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestEagerMaybeLazy_NestedMessage {
    return new TestEagerMaybeLazy_NestedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestEagerMaybeLazy_NestedMessage {
    return new TestEagerMaybeLazy_NestedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestEagerMaybeLazy_NestedMessage {
    return new TestEagerMaybeLazy_NestedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestEagerMaybeLazy_NestedMessage | PlainMessage<TestEagerMaybeLazy_NestedMessage> | undefined, b: TestEagerMaybeLazy_NestedMessage | PlainMessage<TestEagerMaybeLazy_NestedMessage> | undefined): boolean {
    return proto2.util.equals(TestEagerMaybeLazy_NestedMessage, a, b);
  }
}

/**
 * Needed for a Python test.
 *
 * @generated from message protobuf_unittest.TestNestedMessageHasBits
 */
export class TestNestedMessageHasBits extends Message<TestNestedMessageHasBits> {
  /**
   * @generated from field: optional protobuf_unittest.TestNestedMessageHasBits.NestedMessage optional_nested_message = 1;
   */
  optionalNestedMessage?: TestNestedMessageHasBits_NestedMessage;

  constructor(data?: PartialMessage<TestNestedMessageHasBits>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedMessageHasBits";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "optional_nested_message", kind: "message", T: TestNestedMessageHasBits_NestedMessage, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedMessageHasBits {
    return new TestNestedMessageHasBits().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedMessageHasBits {
    return new TestNestedMessageHasBits().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedMessageHasBits {
    return new TestNestedMessageHasBits().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedMessageHasBits | PlainMessage<TestNestedMessageHasBits> | undefined, b: TestNestedMessageHasBits | PlainMessage<TestNestedMessageHasBits> | undefined): boolean {
    return proto2.util.equals(TestNestedMessageHasBits, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestNestedMessageHasBits.NestedMessage
 */
export class TestNestedMessageHasBits_NestedMessage extends Message<TestNestedMessageHasBits_NestedMessage> {
  /**
   * @generated from field: repeated int32 nestedmessage_repeated_int32 = 1;
   */
  nestedmessageRepeatedInt32: number[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.ForeignMessage nestedmessage_repeated_foreignmessage = 2;
   */
  nestedmessageRepeatedForeignmessage: ForeignMessage[] = [];

  constructor(data?: PartialMessage<TestNestedMessageHasBits_NestedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedMessageHasBits.NestedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "nestedmessage_repeated_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 2, name: "nestedmessage_repeated_foreignmessage", kind: "message", T: ForeignMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedMessageHasBits_NestedMessage {
    return new TestNestedMessageHasBits_NestedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedMessageHasBits_NestedMessage {
    return new TestNestedMessageHasBits_NestedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedMessageHasBits_NestedMessage {
    return new TestNestedMessageHasBits_NestedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedMessageHasBits_NestedMessage | PlainMessage<TestNestedMessageHasBits_NestedMessage> | undefined, b: TestNestedMessageHasBits_NestedMessage | PlainMessage<TestNestedMessageHasBits_NestedMessage> | undefined): boolean {
    return proto2.util.equals(TestNestedMessageHasBits_NestedMessage, a, b);
  }
}

/**
 * Test message with CamelCase field names.  This violates Protocol Buffer
 * standard style.
 *
 * @generated from message protobuf_unittest.TestCamelCaseFieldNames
 */
export class TestCamelCaseFieldNames extends Message<TestCamelCaseFieldNames> {
  /**
   * @generated from field: optional int32 PrimitiveField = 1;
   */
  PrimitiveField?: number;

  /**
   * @generated from field: optional string StringField = 2;
   */
  StringField?: string;

  /**
   * @generated from field: optional protobuf_unittest.ForeignEnum EnumField = 3;
   */
  EnumField?: ForeignEnum;

  /**
   * @generated from field: optional protobuf_unittest.ForeignMessage MessageField = 4;
   */
  MessageField?: ForeignMessage;

  /**
   * @generated from field: optional string StringPieceField = 5;
   */
  StringPieceField?: string;

  /**
   * @generated from field: optional string CordField = 6;
   */
  CordField?: string;

  /**
   * @generated from field: repeated int32 RepeatedPrimitiveField = 7;
   */
  RepeatedPrimitiveField: number[] = [];

  /**
   * @generated from field: repeated string RepeatedStringField = 8;
   */
  RepeatedStringField: string[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.ForeignEnum RepeatedEnumField = 9;
   */
  RepeatedEnumField: ForeignEnum[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.ForeignMessage RepeatedMessageField = 10;
   */
  RepeatedMessageField: ForeignMessage[] = [];

  /**
   * @generated from field: repeated string RepeatedStringPieceField = 11;
   */
  RepeatedStringPieceField: string[] = [];

  /**
   * @generated from field: repeated string RepeatedCordField = 12;
   */
  RepeatedCordField: string[] = [];

  constructor(data?: PartialMessage<TestCamelCaseFieldNames>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestCamelCaseFieldNames";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "PrimitiveField", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "StringField", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "EnumField", kind: "enum", T: proto2.getEnumType(ForeignEnum), opt: true },
    { no: 4, name: "MessageField", kind: "message", T: ForeignMessage, opt: true },
    { no: 5, name: "StringPieceField", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "CordField", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "RepeatedPrimitiveField", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 8, name: "RepeatedStringField", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "RepeatedEnumField", kind: "enum", T: proto2.getEnumType(ForeignEnum), repeated: true },
    { no: 10, name: "RepeatedMessageField", kind: "message", T: ForeignMessage, repeated: true },
    { no: 11, name: "RepeatedStringPieceField", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "RepeatedCordField", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestCamelCaseFieldNames {
    return new TestCamelCaseFieldNames().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestCamelCaseFieldNames {
    return new TestCamelCaseFieldNames().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestCamelCaseFieldNames {
    return new TestCamelCaseFieldNames().fromJsonString(jsonString, options);
  }

  static equals(a: TestCamelCaseFieldNames | PlainMessage<TestCamelCaseFieldNames> | undefined, b: TestCamelCaseFieldNames | PlainMessage<TestCamelCaseFieldNames> | undefined): boolean {
    return proto2.util.equals(TestCamelCaseFieldNames, a, b);
  }
}

/**
 * We list fields out of order, to ensure that we're using field number and not
 * field index to determine serialization order.
 *
 * @generated from message protobuf_unittest.TestFieldOrderings
 */
export class TestFieldOrderings extends Message<TestFieldOrderings> {
  /**
   * @generated from field: optional string my_string = 11;
   */
  myString?: string;

  /**
   * @generated from field: optional int64 my_int = 1;
   */
  myInt?: bigint;

  /**
   * @generated from field: optional float my_float = 101;
   */
  myFloat?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestFieldOrderings.NestedMessage optional_nested_message = 200;
   */
  optionalNestedMessage?: TestFieldOrderings_NestedMessage;

  constructor(data?: PartialMessage<TestFieldOrderings>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestFieldOrderings";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 11, name: "my_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 1, name: "my_int", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 101, name: "my_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 200, name: "optional_nested_message", kind: "message", T: TestFieldOrderings_NestedMessage, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestFieldOrderings {
    return new TestFieldOrderings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestFieldOrderings {
    return new TestFieldOrderings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestFieldOrderings {
    return new TestFieldOrderings().fromJsonString(jsonString, options);
  }

  static equals(a: TestFieldOrderings | PlainMessage<TestFieldOrderings> | undefined, b: TestFieldOrderings | PlainMessage<TestFieldOrderings> | undefined): boolean {
    return proto2.util.equals(TestFieldOrderings, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestFieldOrderings.NestedMessage
 */
export class TestFieldOrderings_NestedMessage extends Message<TestFieldOrderings_NestedMessage> {
  /**
   * @generated from field: optional int64 oo = 2;
   */
  oo?: bigint;

  /**
   * The field name "b" fails to compile in proto1 because it conflicts with
   * a local variable named "b" in one of the generated methods.  Doh.
   * This file needs to compile in proto1 to test backwards-compatibility.
   *
   * @generated from field: optional int32 bb = 1;
   */
  bb?: number;

  constructor(data?: PartialMessage<TestFieldOrderings_NestedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestFieldOrderings.NestedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 2, name: "oo", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 1, name: "bb", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestFieldOrderings_NestedMessage {
    return new TestFieldOrderings_NestedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestFieldOrderings_NestedMessage {
    return new TestFieldOrderings_NestedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestFieldOrderings_NestedMessage {
    return new TestFieldOrderings_NestedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestFieldOrderings_NestedMessage | PlainMessage<TestFieldOrderings_NestedMessage> | undefined, b: TestFieldOrderings_NestedMessage | PlainMessage<TestFieldOrderings_NestedMessage> | undefined): boolean {
    return proto2.util.equals(TestFieldOrderings_NestedMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestExtensionOrderings1
 */
export class TestExtensionOrderings1 extends Message<TestExtensionOrderings1> {
  /**
   * @generated from field: optional string my_string = 1;
   */
  myString?: string;

  constructor(data?: PartialMessage<TestExtensionOrderings1>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestExtensionOrderings1";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "my_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestExtensionOrderings1 {
    return new TestExtensionOrderings1().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestExtensionOrderings1 {
    return new TestExtensionOrderings1().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestExtensionOrderings1 {
    return new TestExtensionOrderings1().fromJsonString(jsonString, options);
  }

  static equals(a: TestExtensionOrderings1 | PlainMessage<TestExtensionOrderings1> | undefined, b: TestExtensionOrderings1 | PlainMessage<TestExtensionOrderings1> | undefined): boolean {
    return proto2.util.equals(TestExtensionOrderings1, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestExtensionOrderings2
 */
export class TestExtensionOrderings2 extends Message<TestExtensionOrderings2> {
  /**
   * @generated from field: optional string my_string = 1;
   */
  myString?: string;

  constructor(data?: PartialMessage<TestExtensionOrderings2>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestExtensionOrderings2";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "my_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestExtensionOrderings2 {
    return new TestExtensionOrderings2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestExtensionOrderings2 {
    return new TestExtensionOrderings2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestExtensionOrderings2 {
    return new TestExtensionOrderings2().fromJsonString(jsonString, options);
  }

  static equals(a: TestExtensionOrderings2 | PlainMessage<TestExtensionOrderings2> | undefined, b: TestExtensionOrderings2 | PlainMessage<TestExtensionOrderings2> | undefined): boolean {
    return proto2.util.equals(TestExtensionOrderings2, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3
 */
export class TestExtensionOrderings2_TestExtensionOrderings3 extends Message<TestExtensionOrderings2_TestExtensionOrderings3> {
  /**
   * @generated from field: optional string my_string = 1;
   */
  myString?: string;

  constructor(data?: PartialMessage<TestExtensionOrderings2_TestExtensionOrderings3>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "my_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestExtensionOrderings2_TestExtensionOrderings3 {
    return new TestExtensionOrderings2_TestExtensionOrderings3().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestExtensionOrderings2_TestExtensionOrderings3 {
    return new TestExtensionOrderings2_TestExtensionOrderings3().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestExtensionOrderings2_TestExtensionOrderings3 {
    return new TestExtensionOrderings2_TestExtensionOrderings3().fromJsonString(jsonString, options);
  }

  static equals(a: TestExtensionOrderings2_TestExtensionOrderings3 | PlainMessage<TestExtensionOrderings2_TestExtensionOrderings3> | undefined, b: TestExtensionOrderings2_TestExtensionOrderings3 | PlainMessage<TestExtensionOrderings2_TestExtensionOrderings3> | undefined): boolean {
    return proto2.util.equals(TestExtensionOrderings2_TestExtensionOrderings3, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestExtremeDefaultValues
 */
export class TestExtremeDefaultValues extends Message<TestExtremeDefaultValues> {
  /**
   * @generated from field: optional bytes escaped_bytes = 1 [default = "\000\001\007\010\014\n\r\t\013\\\'\\"\376"];
   */
  escapedBytes?: Uint8Array;

  /**
   * @generated from field: optional uint32 large_uint32 = 2 [default = 4294967295];
   */
  largeUint32?: number;

  /**
   * @generated from field: optional uint64 large_uint64 = 3 [default = 18446744073709551615];
   */
  largeUint64?: bigint;

  /**
   * @generated from field: optional int32 small_int32 = 4 [default = -2147483647];
   */
  smallInt32?: number;

  /**
   * @generated from field: optional int64 small_int64 = 5 [default = -9223372036854775807];
   */
  smallInt64?: bigint;

  /**
   * @generated from field: optional int32 really_small_int32 = 21 [default = -2147483648];
   */
  reallySmallInt32?: number;

  /**
   * @generated from field: optional int64 really_small_int64 = 22 [default = -9223372036854775808];
   */
  reallySmallInt64?: bigint;

  /**
   * The default value here is UTF-8 for "\u1234".  (We could also just type
   * the UTF-8 text directly into this text file rather than escape it, but
   * lots of people use editors that would be confused by this.)
   *
   * @generated from field: optional string utf8_string = 6 [default = "ሴ"];
   */
  utf8String?: string;

  /**
   * Tests for single-precision floating-point values.
   *
   * @generated from field: optional float zero_float = 7 [default = 0];
   */
  zeroFloat?: number;

  /**
   * @generated from field: optional float one_float = 8 [default = 1];
   */
  oneFloat?: number;

  /**
   * @generated from field: optional float small_float = 9 [default = 1.5];
   */
  smallFloat?: number;

  /**
   * @generated from field: optional float negative_one_float = 10 [default = -1];
   */
  negativeOneFloat?: number;

  /**
   * @generated from field: optional float negative_float = 11 [default = -1.5];
   */
  negativeFloat?: number;

  /**
   * Using exponents
   *
   * @generated from field: optional float large_float = 12 [default = 2e+08];
   */
  largeFloat?: number;

  /**
   * @generated from field: optional float small_negative_float = 13 [default = -8e-28];
   */
  smallNegativeFloat?: number;

  /**
   * Text for nonfinite floating-point values.
   *
   * @generated from field: optional double inf_double = 14 [default = inf];
   */
  infDouble?: number;

  /**
   * @generated from field: optional double neg_inf_double = 15 [default = -inf];
   */
  negInfDouble?: number;

  /**
   * @generated from field: optional double nan_double = 16 [default = nan];
   */
  nanDouble?: number;

  /**
   * @generated from field: optional float inf_float = 17 [default = inf];
   */
  infFloat?: number;

  /**
   * @generated from field: optional float neg_inf_float = 18 [default = -inf];
   */
  negInfFloat?: number;

  /**
   * @generated from field: optional float nan_float = 19 [default = nan];
   */
  nanFloat?: number;

  /**
   * Tests for C++ trigraphs.
   * Trigraphs should be escaped in C++ generated files, but they should not be
   * escaped for other languages.
   * Note that in .proto file, "\?" is a valid way to escape ? in string
   * literals.
   *
   * @generated from field: optional string cpp_trigraph = 20 [default = "? ? ?? ?? ??? ??/ ??-"];
   */
  cppTrigraph?: string;

  /**
   * String defaults containing the character '\000'
   *
   * @generated from field: optional string string_with_zero = 23 [default = "hel lo"];
   */
  stringWithZero?: string;

  /**
   * @generated from field: optional bytes bytes_with_zero = 24 [default = "wor\000ld"];
   */
  bytesWithZero?: Uint8Array;

  /**
   * @generated from field: optional string string_piece_with_zero = 25 [default = "ab c"];
   */
  stringPieceWithZero?: string;

  /**
   * @generated from field: optional string cord_with_zero = 26 [default = "12 3"];
   */
  cordWithZero?: string;

  /**
   * @generated from field: optional string replacement_string = 27 [default = "${unknown}"];
   */
  replacementString?: string;

  constructor(data?: PartialMessage<TestExtremeDefaultValues>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestExtremeDefaultValues";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "escaped_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true, default: new Uint8Array([0x00, 0x01, 0x07, 0x08, 0x0C, 0x0A, 0x0D, 0x09, 0x0B, 0x5C, 0xFE]) },
    { no: 2, name: "large_uint32", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true, default: 4294967295 },
    { no: 3, name: "large_uint64", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true, default: protoInt64.uParse("18446744073709551615") },
    { no: 4, name: "small_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true, default: -2147483647 },
    { no: 5, name: "small_int64", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true, default: protoInt64.parse("-9223372036854775807") },
    { no: 21, name: "really_small_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true, default: -2147483648 },
    { no: 22, name: "really_small_int64", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true, default: protoInt64.parse("-9223372036854775808") },
    { no: 6, name: "utf8_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "ሴ" },
    { no: 7, name: "zero_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: 0 },
    { no: 8, name: "one_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: 1 },
    { no: 9, name: "small_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: 1.5 },
    { no: 10, name: "negative_one_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: -1 },
    { no: 11, name: "negative_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: -1.5 },
    { no: 12, name: "large_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: 200000000 },
    { no: 13, name: "small_negative_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: -8e-28 },
    { no: 14, name: "inf_double", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true, default: globalThis.Number.POSITIVE_INFINITY },
    { no: 15, name: "neg_inf_double", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true, default: globalThis.Number.NEGATIVE_INFINITY },
    { no: 16, name: "nan_double", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true, default: globalThis.Number.NaN },
    { no: 17, name: "inf_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: globalThis.Number.POSITIVE_INFINITY },
    { no: 18, name: "neg_inf_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: globalThis.Number.NEGATIVE_INFINITY },
    { no: 19, name: "nan_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true, default: globalThis.Number.NaN },
    { no: 20, name: "cpp_trigraph", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "? ? ?? ?? ??? ??/ ??-" },
    { no: 23, name: "string_with_zero", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "hel lo" },
    { no: 24, name: "bytes_with_zero", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true, default: new Uint8Array([0x77, 0x6F, 0x72, 0x00, 0x6C, 0x64]) },
    { no: 25, name: "string_piece_with_zero", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "ab c" },
    { no: 26, name: "cord_with_zero", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "12 3" },
    { no: 27, name: "replacement_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "${unknown}" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestExtremeDefaultValues {
    return new TestExtremeDefaultValues().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestExtremeDefaultValues {
    return new TestExtremeDefaultValues().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestExtremeDefaultValues {
    return new TestExtremeDefaultValues().fromJsonString(jsonString, options);
  }

  static equals(a: TestExtremeDefaultValues | PlainMessage<TestExtremeDefaultValues> | undefined, b: TestExtremeDefaultValues | PlainMessage<TestExtremeDefaultValues> | undefined): boolean {
    return proto2.util.equals(TestExtremeDefaultValues, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.SparseEnumMessage
 */
export class SparseEnumMessage extends Message<SparseEnumMessage> {
  /**
   * @generated from field: optional protobuf_unittest.TestSparseEnum sparse_enum = 1;
   */
  sparseEnum?: TestSparseEnum;

  constructor(data?: PartialMessage<SparseEnumMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.SparseEnumMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "sparse_enum", kind: "enum", T: proto2.getEnumType(TestSparseEnum), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SparseEnumMessage {
    return new SparseEnumMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SparseEnumMessage {
    return new SparseEnumMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SparseEnumMessage {
    return new SparseEnumMessage().fromJsonString(jsonString, options);
  }

  static equals(a: SparseEnumMessage | PlainMessage<SparseEnumMessage> | undefined, b: SparseEnumMessage | PlainMessage<SparseEnumMessage> | undefined): boolean {
    return proto2.util.equals(SparseEnumMessage, a, b);
  }
}

/**
 * Test String and Bytes: string is for valid UTF-8 strings
 *
 * @generated from message protobuf_unittest.OneString
 */
export class OneString extends Message<OneString> {
  /**
   * @generated from field: optional string data = 1;
   */
  data?: string;

  constructor(data?: PartialMessage<OneString>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.OneString";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OneString {
    return new OneString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OneString {
    return new OneString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OneString {
    return new OneString().fromJsonString(jsonString, options);
  }

  static equals(a: OneString | PlainMessage<OneString> | undefined, b: OneString | PlainMessage<OneString> | undefined): boolean {
    return proto2.util.equals(OneString, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.MoreString
 */
export class MoreString extends Message<MoreString> {
  /**
   * @generated from field: repeated string data = 1;
   */
  data: string[] = [];

  constructor(data?: PartialMessage<MoreString>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.MoreString";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoreString {
    return new MoreString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoreString {
    return new MoreString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoreString {
    return new MoreString().fromJsonString(jsonString, options);
  }

  static equals(a: MoreString | PlainMessage<MoreString> | undefined, b: MoreString | PlainMessage<MoreString> | undefined): boolean {
    return proto2.util.equals(MoreString, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.OneBytes
 */
export class OneBytes extends Message<OneBytes> {
  /**
   * @generated from field: optional bytes data = 1;
   */
  data?: Uint8Array;

  constructor(data?: PartialMessage<OneBytes>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.OneBytes";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OneBytes {
    return new OneBytes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OneBytes {
    return new OneBytes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OneBytes {
    return new OneBytes().fromJsonString(jsonString, options);
  }

  static equals(a: OneBytes | PlainMessage<OneBytes> | undefined, b: OneBytes | PlainMessage<OneBytes> | undefined): boolean {
    return proto2.util.equals(OneBytes, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.MoreBytes
 */
export class MoreBytes extends Message<MoreBytes> {
  /**
   * @generated from field: repeated bytes data = 1;
   */
  data: Uint8Array[] = [];

  constructor(data?: PartialMessage<MoreBytes>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.MoreBytes";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoreBytes {
    return new MoreBytes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoreBytes {
    return new MoreBytes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoreBytes {
    return new MoreBytes().fromJsonString(jsonString, options);
  }

  static equals(a: MoreBytes | PlainMessage<MoreBytes> | undefined, b: MoreBytes | PlainMessage<MoreBytes> | undefined): boolean {
    return proto2.util.equals(MoreBytes, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.ManyOptionalString
 */
export class ManyOptionalString extends Message<ManyOptionalString> {
  /**
   * @generated from field: optional string str1 = 1;
   */
  str1?: string;

  /**
   * @generated from field: optional string str2 = 2;
   */
  str2?: string;

  /**
   * @generated from field: optional string str3 = 3;
   */
  str3?: string;

  /**
   * @generated from field: optional string str4 = 4;
   */
  str4?: string;

  /**
   * @generated from field: optional string str5 = 5;
   */
  str5?: string;

  /**
   * @generated from field: optional string str6 = 6;
   */
  str6?: string;

  /**
   * @generated from field: optional string str7 = 7;
   */
  str7?: string;

  /**
   * @generated from field: optional string str8 = 8;
   */
  str8?: string;

  /**
   * @generated from field: optional string str9 = 9;
   */
  str9?: string;

  /**
   * @generated from field: optional string str10 = 10;
   */
  str10?: string;

  /**
   * @generated from field: optional string str11 = 11;
   */
  str11?: string;

  /**
   * @generated from field: optional string str12 = 12;
   */
  str12?: string;

  /**
   * @generated from field: optional string str13 = 13;
   */
  str13?: string;

  /**
   * @generated from field: optional string str14 = 14;
   */
  str14?: string;

  /**
   * @generated from field: optional string str15 = 15;
   */
  str15?: string;

  /**
   * @generated from field: optional string str16 = 16;
   */
  str16?: string;

  /**
   * @generated from field: optional string str17 = 17;
   */
  str17?: string;

  /**
   * @generated from field: optional string str18 = 18;
   */
  str18?: string;

  /**
   * @generated from field: optional string str19 = 19;
   */
  str19?: string;

  /**
   * @generated from field: optional string str20 = 20;
   */
  str20?: string;

  /**
   * @generated from field: optional string str21 = 21;
   */
  str21?: string;

  /**
   * @generated from field: optional string str22 = 22;
   */
  str22?: string;

  /**
   * @generated from field: optional string str23 = 23;
   */
  str23?: string;

  /**
   * @generated from field: optional string str24 = 24;
   */
  str24?: string;

  /**
   * @generated from field: optional string str25 = 25;
   */
  str25?: string;

  /**
   * @generated from field: optional string str26 = 26;
   */
  str26?: string;

  /**
   * @generated from field: optional string str27 = 27;
   */
  str27?: string;

  /**
   * @generated from field: optional string str28 = 28;
   */
  str28?: string;

  /**
   * @generated from field: optional string str29 = 29;
   */
  str29?: string;

  /**
   * @generated from field: optional string str30 = 30;
   */
  str30?: string;

  /**
   * @generated from field: optional string str31 = 31;
   */
  str31?: string;

  /**
   * @generated from field: optional string str32 = 32;
   */
  str32?: string;

  constructor(data?: PartialMessage<ManyOptionalString>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.ManyOptionalString";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "str1", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "str2", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "str3", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "str4", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "str5", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "str6", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "str7", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "str8", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "str9", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "str10", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 11, name: "str11", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 12, name: "str12", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 13, name: "str13", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 14, name: "str14", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 15, name: "str15", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "str16", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 17, name: "str17", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 18, name: "str18", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 19, name: "str19", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 20, name: "str20", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 21, name: "str21", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 22, name: "str22", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 23, name: "str23", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 24, name: "str24", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 25, name: "str25", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 26, name: "str26", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 27, name: "str27", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 28, name: "str28", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 29, name: "str29", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 30, name: "str30", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 31, name: "str31", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 32, name: "str32", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ManyOptionalString {
    return new ManyOptionalString().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ManyOptionalString {
    return new ManyOptionalString().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ManyOptionalString {
    return new ManyOptionalString().fromJsonString(jsonString, options);
  }

  static equals(a: ManyOptionalString | PlainMessage<ManyOptionalString> | undefined, b: ManyOptionalString | PlainMessage<ManyOptionalString> | undefined): boolean {
    return proto2.util.equals(ManyOptionalString, a, b);
  }
}

/**
 * Test int32, uint32, int64, uint64, and bool are all compatible
 *
 * @generated from message protobuf_unittest.Int32Message
 */
export class Int32Message extends Message<Int32Message> {
  /**
   * @generated from field: optional int32 data = 1;
   */
  data?: number;

  constructor(data?: PartialMessage<Int32Message>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.Int32Message";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Int32Message {
    return new Int32Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Int32Message {
    return new Int32Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Int32Message {
    return new Int32Message().fromJsonString(jsonString, options);
  }

  static equals(a: Int32Message | PlainMessage<Int32Message> | undefined, b: Int32Message | PlainMessage<Int32Message> | undefined): boolean {
    return proto2.util.equals(Int32Message, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.Uint32Message
 */
export class Uint32Message extends Message<Uint32Message> {
  /**
   * @generated from field: optional uint32 data = 1;
   */
  data?: number;

  constructor(data?: PartialMessage<Uint32Message>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.Uint32Message";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Uint32Message {
    return new Uint32Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Uint32Message {
    return new Uint32Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Uint32Message {
    return new Uint32Message().fromJsonString(jsonString, options);
  }

  static equals(a: Uint32Message | PlainMessage<Uint32Message> | undefined, b: Uint32Message | PlainMessage<Uint32Message> | undefined): boolean {
    return proto2.util.equals(Uint32Message, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.Int64Message
 */
export class Int64Message extends Message<Int64Message> {
  /**
   * @generated from field: optional int64 data = 1;
   */
  data?: bigint;

  constructor(data?: PartialMessage<Int64Message>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.Int64Message";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Int64Message {
    return new Int64Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Int64Message {
    return new Int64Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Int64Message {
    return new Int64Message().fromJsonString(jsonString, options);
  }

  static equals(a: Int64Message | PlainMessage<Int64Message> | undefined, b: Int64Message | PlainMessage<Int64Message> | undefined): boolean {
    return proto2.util.equals(Int64Message, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.Uint64Message
 */
export class Uint64Message extends Message<Uint64Message> {
  /**
   * @generated from field: optional uint64 data = 1;
   */
  data?: bigint;

  constructor(data?: PartialMessage<Uint64Message>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.Uint64Message";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Uint64Message {
    return new Uint64Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Uint64Message {
    return new Uint64Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Uint64Message {
    return new Uint64Message().fromJsonString(jsonString, options);
  }

  static equals(a: Uint64Message | PlainMessage<Uint64Message> | undefined, b: Uint64Message | PlainMessage<Uint64Message> | undefined): boolean {
    return proto2.util.equals(Uint64Message, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.BoolMessage
 */
export class BoolMessage extends Message<BoolMessage> {
  /**
   * @generated from field: optional bool data = 1;
   */
  data?: boolean;

  constructor(data?: PartialMessage<BoolMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.BoolMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BoolMessage {
    return new BoolMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BoolMessage {
    return new BoolMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BoolMessage {
    return new BoolMessage().fromJsonString(jsonString, options);
  }

  static equals(a: BoolMessage | PlainMessage<BoolMessage> | undefined, b: BoolMessage | PlainMessage<BoolMessage> | undefined): boolean {
    return proto2.util.equals(BoolMessage, a, b);
  }
}

/**
 * Test oneofs.
 *
 * @generated from message protobuf_unittest.TestOneof
 */
export class TestOneof extends Message<TestOneof> {
  /**
   * @generated from oneof protobuf_unittest.TestOneof.foo
   */
  foo: {
    /**
     * @generated from field: int32 foo_int = 1;
     */
    value: number;
    case: "fooInt";
  } | {
    /**
     * @generated from field: string foo_string = 2;
     */
    value: string;
    case: "fooString";
  } | {
    /**
     * @generated from field: protobuf_unittest.TestAllTypes foo_message = 3;
     */
    value: TestAllTypes;
    case: "fooMessage";
  } | {
    /**
     * @generated from field: protobuf_unittest.TestOneof.FooGroup foogroup = 4;
     */
    value: TestOneof_FooGroup;
    case: "foogroup";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TestOneof>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestOneof";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "foo_int", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "foo" },
    { no: 2, name: "foo_string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "foo" },
    { no: 3, name: "foo_message", kind: "message", T: TestAllTypes, oneof: "foo" },
    { no: 4, name: "foogroup", kind: "message", T: TestOneof_FooGroup, oneof: "foo" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestOneof {
    return new TestOneof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestOneof {
    return new TestOneof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestOneof {
    return new TestOneof().fromJsonString(jsonString, options);
  }

  static equals(a: TestOneof | PlainMessage<TestOneof> | undefined, b: TestOneof | PlainMessage<TestOneof> | undefined): boolean {
    return proto2.util.equals(TestOneof, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestOneof.FooGroup
 */
export class TestOneof_FooGroup extends Message<TestOneof_FooGroup> {
  /**
   * @generated from field: optional int32 a = 5;
   */
  a?: number;

  /**
   * @generated from field: optional string b = 6;
   */
  b?: string;

  constructor(data?: PartialMessage<TestOneof_FooGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestOneof.FooGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 5, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "b", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestOneof_FooGroup {
    return new TestOneof_FooGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestOneof_FooGroup {
    return new TestOneof_FooGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestOneof_FooGroup {
    return new TestOneof_FooGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestOneof_FooGroup | PlainMessage<TestOneof_FooGroup> | undefined, b: TestOneof_FooGroup | PlainMessage<TestOneof_FooGroup> | undefined): boolean {
    return proto2.util.equals(TestOneof_FooGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestOneofBackwardsCompatible
 */
export class TestOneofBackwardsCompatible extends Message<TestOneofBackwardsCompatible> {
  /**
   * @generated from field: optional int32 foo_int = 1;
   */
  fooInt?: number;

  /**
   * @generated from field: optional string foo_string = 2;
   */
  fooString?: string;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes foo_message = 3;
   */
  fooMessage?: TestAllTypes;

  /**
   * @generated from field: optional protobuf_unittest.TestOneofBackwardsCompatible.FooGroup foogroup = 4;
   */
  foogroup?: TestOneofBackwardsCompatible_FooGroup;

  constructor(data?: PartialMessage<TestOneofBackwardsCompatible>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestOneofBackwardsCompatible";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "foo_int", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "foo_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "foo_message", kind: "message", T: TestAllTypes, opt: true },
    { no: 4, name: "foogroup", kind: "message", T: TestOneofBackwardsCompatible_FooGroup, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestOneofBackwardsCompatible {
    return new TestOneofBackwardsCompatible().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestOneofBackwardsCompatible {
    return new TestOneofBackwardsCompatible().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestOneofBackwardsCompatible {
    return new TestOneofBackwardsCompatible().fromJsonString(jsonString, options);
  }

  static equals(a: TestOneofBackwardsCompatible | PlainMessage<TestOneofBackwardsCompatible> | undefined, b: TestOneofBackwardsCompatible | PlainMessage<TestOneofBackwardsCompatible> | undefined): boolean {
    return proto2.util.equals(TestOneofBackwardsCompatible, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestOneofBackwardsCompatible.FooGroup
 */
export class TestOneofBackwardsCompatible_FooGroup extends Message<TestOneofBackwardsCompatible_FooGroup> {
  /**
   * @generated from field: optional int32 a = 5;
   */
  a?: number;

  /**
   * @generated from field: optional string b = 6;
   */
  b?: string;

  constructor(data?: PartialMessage<TestOneofBackwardsCompatible_FooGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestOneofBackwardsCompatible.FooGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 5, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "b", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestOneofBackwardsCompatible_FooGroup {
    return new TestOneofBackwardsCompatible_FooGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestOneofBackwardsCompatible_FooGroup {
    return new TestOneofBackwardsCompatible_FooGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestOneofBackwardsCompatible_FooGroup {
    return new TestOneofBackwardsCompatible_FooGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestOneofBackwardsCompatible_FooGroup | PlainMessage<TestOneofBackwardsCompatible_FooGroup> | undefined, b: TestOneofBackwardsCompatible_FooGroup | PlainMessage<TestOneofBackwardsCompatible_FooGroup> | undefined): boolean {
    return proto2.util.equals(TestOneofBackwardsCompatible_FooGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestOneof2
 */
export class TestOneof2 extends Message<TestOneof2> {
  /**
   * @generated from oneof protobuf_unittest.TestOneof2.foo
   */
  foo: {
    /**
     * @generated from field: int32 foo_int = 1;
     */
    value: number;
    case: "fooInt";
  } | {
    /**
     * @generated from field: string foo_string = 2;
     */
    value: string;
    case: "fooString";
  } | {
    /**
     * @generated from field: string foo_cord = 3;
     */
    value: string;
    case: "fooCord";
  } | {
    /**
     * @generated from field: string foo_string_piece = 4;
     */
    value: string;
    case: "fooStringPiece";
  } | {
    /**
     * @generated from field: bytes foo_bytes = 5;
     */
    value: Uint8Array;
    case: "fooBytes";
  } | {
    /**
     * @generated from field: protobuf_unittest.TestOneof2.NestedEnum foo_enum = 6;
     */
    value: TestOneof2_NestedEnum;
    case: "fooEnum";
  } | {
    /**
     * @generated from field: protobuf_unittest.TestOneof2.NestedMessage foo_message = 7;
     */
    value: TestOneof2_NestedMessage;
    case: "fooMessage";
  } | {
    /**
     * @generated from field: protobuf_unittest.TestOneof2.FooGroup foogroup = 8;
     */
    value: TestOneof2_FooGroup;
    case: "foogroup";
  } | {
    /**
     * @generated from field: protobuf_unittest.TestOneof2.NestedMessage foo_lazy_message = 11;
     */
    value: TestOneof2_NestedMessage;
    case: "fooLazyMessage";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof protobuf_unittest.TestOneof2.bar
   */
  bar: {
    /**
     * @generated from field: int32 bar_int = 12 [default = 5];
     */
    value: number;
    case: "barInt";
  } | {
    /**
     * @generated from field: string bar_string = 13 [default = "STRING"];
     */
    value: string;
    case: "barString";
  } | {
    /**
     * @generated from field: string bar_cord = 14 [default = "CORD"];
     */
    value: string;
    case: "barCord";
  } | {
    /**
     * @generated from field: string bar_string_piece = 15 [default = "SPIECE"];
     */
    value: string;
    case: "barStringPiece";
  } | {
    /**
     * @generated from field: bytes bar_bytes = 16 [default = "BYTES"];
     */
    value: Uint8Array;
    case: "barBytes";
  } | {
    /**
     * @generated from field: protobuf_unittest.TestOneof2.NestedEnum bar_enum = 17 [default = BAR];
     */
    value: TestOneof2_NestedEnum;
    case: "barEnum";
  } | {
    /**
     * @generated from field: string bar_string_with_empty_default = 20 [default = ""];
     */
    value: string;
    case: "barStringWithEmptyDefault";
  } | {
    /**
     * @generated from field: string bar_cord_with_empty_default = 21 [default = ""];
     */
    value: string;
    case: "barCordWithEmptyDefault";
  } | {
    /**
     * @generated from field: string bar_string_piece_with_empty_default = 22 [default = ""];
     */
    value: string;
    case: "barStringPieceWithEmptyDefault";
  } | {
    /**
     * @generated from field: bytes bar_bytes_with_empty_default = 23 [default = ""];
     */
    value: Uint8Array;
    case: "barBytesWithEmptyDefault";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: optional int32 baz_int = 18;
   */
  bazInt?: number;

  /**
   * @generated from field: optional string baz_string = 19 [default = "BAZ"];
   */
  bazString?: string;

  constructor(data?: PartialMessage<TestOneof2>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestOneof2";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "foo_int", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "foo" },
    { no: 2, name: "foo_string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "foo" },
    { no: 3, name: "foo_cord", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "foo" },
    { no: 4, name: "foo_string_piece", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "foo" },
    { no: 5, name: "foo_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "foo" },
    { no: 6, name: "foo_enum", kind: "enum", T: proto2.getEnumType(TestOneof2_NestedEnum), oneof: "foo" },
    { no: 7, name: "foo_message", kind: "message", T: TestOneof2_NestedMessage, oneof: "foo" },
    { no: 8, name: "foogroup", kind: "message", T: TestOneof2_FooGroup, oneof: "foo" },
    { no: 11, name: "foo_lazy_message", kind: "message", T: TestOneof2_NestedMessage, oneof: "foo" },
    { no: 12, name: "bar_int", kind: "scalar", T: 5 /* ScalarType.INT32 */, default: 5, oneof: "bar" },
    { no: 13, name: "bar_string", kind: "scalar", T: 9 /* ScalarType.STRING */, default: "STRING", oneof: "bar" },
    { no: 14, name: "bar_cord", kind: "scalar", T: 9 /* ScalarType.STRING */, default: "CORD", oneof: "bar" },
    { no: 15, name: "bar_string_piece", kind: "scalar", T: 9 /* ScalarType.STRING */, default: "SPIECE", oneof: "bar" },
    { no: 16, name: "bar_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, default: new Uint8Array([0x42, 0x59, 0x54, 0x45, 0x53]), oneof: "bar" },
    { no: 17, name: "bar_enum", kind: "enum", T: proto2.getEnumType(TestOneof2_NestedEnum), default: TestOneof2_NestedEnum.BAR, oneof: "bar" },
    { no: 20, name: "bar_string_with_empty_default", kind: "scalar", T: 9 /* ScalarType.STRING */, default: "", oneof: "bar" },
    { no: 21, name: "bar_cord_with_empty_default", kind: "scalar", T: 9 /* ScalarType.STRING */, default: "", oneof: "bar" },
    { no: 22, name: "bar_string_piece_with_empty_default", kind: "scalar", T: 9 /* ScalarType.STRING */, default: "", oneof: "bar" },
    { no: 23, name: "bar_bytes_with_empty_default", kind: "scalar", T: 12 /* ScalarType.BYTES */, default: new Uint8Array(0), oneof: "bar" },
    { no: 18, name: "baz_int", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 19, name: "baz_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "BAZ" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestOneof2 {
    return new TestOneof2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestOneof2 {
    return new TestOneof2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestOneof2 {
    return new TestOneof2().fromJsonString(jsonString, options);
  }

  static equals(a: TestOneof2 | PlainMessage<TestOneof2> | undefined, b: TestOneof2 | PlainMessage<TestOneof2> | undefined): boolean {
    return proto2.util.equals(TestOneof2, a, b);
  }
}

/**
 * @generated from enum protobuf_unittest.TestOneof2.NestedEnum
 */
export enum TestOneof2_NestedEnum {
  /**
   * @generated from enum value: FOO = 1;
   */
  FOO = 1,

  /**
   * @generated from enum value: BAR = 2;
   */
  BAR = 2,

  /**
   * @generated from enum value: BAZ = 3;
   */
  BAZ = 3,
}
// Retrieve enum metadata with: proto2.getEnumType(TestOneof2_NestedEnum)
proto2.util.setEnumType(TestOneof2_NestedEnum, "protobuf_unittest.TestOneof2.NestedEnum", [
  { no: 1, name: "FOO" },
  { no: 2, name: "BAR" },
  { no: 3, name: "BAZ" },
]);

/**
 * @generated from message protobuf_unittest.TestOneof2.FooGroup
 */
export class TestOneof2_FooGroup extends Message<TestOneof2_FooGroup> {
  /**
   * @generated from field: optional int32 a = 9;
   */
  a?: number;

  /**
   * @generated from field: optional string b = 10;
   */
  b?: string;

  constructor(data?: PartialMessage<TestOneof2_FooGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestOneof2.FooGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 9, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 10, name: "b", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestOneof2_FooGroup {
    return new TestOneof2_FooGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestOneof2_FooGroup {
    return new TestOneof2_FooGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestOneof2_FooGroup {
    return new TestOneof2_FooGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestOneof2_FooGroup | PlainMessage<TestOneof2_FooGroup> | undefined, b: TestOneof2_FooGroup | PlainMessage<TestOneof2_FooGroup> | undefined): boolean {
    return proto2.util.equals(TestOneof2_FooGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestOneof2.NestedMessage
 */
export class TestOneof2_NestedMessage extends Message<TestOneof2_NestedMessage> {
  /**
   * @generated from field: optional int64 moo_int = 1;
   */
  mooInt?: bigint;

  /**
   * @generated from field: repeated int32 corge_int = 2;
   */
  corgeInt: number[] = [];

  constructor(data?: PartialMessage<TestOneof2_NestedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestOneof2.NestedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "moo_int", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 2, name: "corge_int", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestOneof2_NestedMessage {
    return new TestOneof2_NestedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestOneof2_NestedMessage {
    return new TestOneof2_NestedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestOneof2_NestedMessage {
    return new TestOneof2_NestedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestOneof2_NestedMessage | PlainMessage<TestOneof2_NestedMessage> | undefined, b: TestOneof2_NestedMessage | PlainMessage<TestOneof2_NestedMessage> | undefined): boolean {
    return proto2.util.equals(TestOneof2_NestedMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestRequiredOneof
 */
export class TestRequiredOneof extends Message<TestRequiredOneof> {
  /**
   * @generated from oneof protobuf_unittest.TestRequiredOneof.foo
   */
  foo: {
    /**
     * @generated from field: int32 foo_int = 1;
     */
    value: number;
    case: "fooInt";
  } | {
    /**
     * @generated from field: string foo_string = 2;
     */
    value: string;
    case: "fooString";
  } | {
    /**
     * @generated from field: protobuf_unittest.TestRequiredOneof.NestedMessage foo_message = 3;
     */
    value: TestRequiredOneof_NestedMessage;
    case: "fooMessage";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TestRequiredOneof>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestRequiredOneof";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "foo_int", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "foo" },
    { no: 2, name: "foo_string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "foo" },
    { no: 3, name: "foo_message", kind: "message", T: TestRequiredOneof_NestedMessage, oneof: "foo" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRequiredOneof {
    return new TestRequiredOneof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRequiredOneof {
    return new TestRequiredOneof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRequiredOneof {
    return new TestRequiredOneof().fromJsonString(jsonString, options);
  }

  static equals(a: TestRequiredOneof | PlainMessage<TestRequiredOneof> | undefined, b: TestRequiredOneof | PlainMessage<TestRequiredOneof> | undefined): boolean {
    return proto2.util.equals(TestRequiredOneof, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestRequiredOneof.NestedMessage
 */
export class TestRequiredOneof_NestedMessage extends Message<TestRequiredOneof_NestedMessage> {
  /**
   * @generated from field: required double required_double = 1;
   */
  requiredDouble?: number;

  constructor(data?: PartialMessage<TestRequiredOneof_NestedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestRequiredOneof.NestedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "required_double", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRequiredOneof_NestedMessage {
    return new TestRequiredOneof_NestedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRequiredOneof_NestedMessage {
    return new TestRequiredOneof_NestedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRequiredOneof_NestedMessage {
    return new TestRequiredOneof_NestedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestRequiredOneof_NestedMessage | PlainMessage<TestRequiredOneof_NestedMessage> | undefined, b: TestRequiredOneof_NestedMessage | PlainMessage<TestRequiredOneof_NestedMessage> | undefined): boolean {
    return proto2.util.equals(TestRequiredOneof_NestedMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestPackedTypes
 */
export class TestPackedTypes extends Message<TestPackedTypes> {
  /**
   * @generated from field: repeated int32 packed_int32 = 90 [packed = true];
   */
  packedInt32: number[] = [];

  /**
   * @generated from field: repeated int64 packed_int64 = 91 [packed = true];
   */
  packedInt64: bigint[] = [];

  /**
   * @generated from field: repeated uint32 packed_uint32 = 92 [packed = true];
   */
  packedUint32: number[] = [];

  /**
   * @generated from field: repeated uint64 packed_uint64 = 93 [packed = true];
   */
  packedUint64: bigint[] = [];

  /**
   * @generated from field: repeated sint32 packed_sint32 = 94 [packed = true];
   */
  packedSint32: number[] = [];

  /**
   * @generated from field: repeated sint64 packed_sint64 = 95 [packed = true];
   */
  packedSint64: bigint[] = [];

  /**
   * @generated from field: repeated fixed32 packed_fixed32 = 96 [packed = true];
   */
  packedFixed32: number[] = [];

  /**
   * @generated from field: repeated fixed64 packed_fixed64 = 97 [packed = true];
   */
  packedFixed64: bigint[] = [];

  /**
   * @generated from field: repeated sfixed32 packed_sfixed32 = 98 [packed = true];
   */
  packedSfixed32: number[] = [];

  /**
   * @generated from field: repeated sfixed64 packed_sfixed64 = 99 [packed = true];
   */
  packedSfixed64: bigint[] = [];

  /**
   * @generated from field: repeated float packed_float = 100 [packed = true];
   */
  packedFloat: number[] = [];

  /**
   * @generated from field: repeated double packed_double = 101 [packed = true];
   */
  packedDouble: number[] = [];

  /**
   * @generated from field: repeated bool packed_bool = 102 [packed = true];
   */
  packedBool: boolean[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.ForeignEnum packed_enum = 103 [packed = true];
   */
  packedEnum: ForeignEnum[] = [];

  constructor(data?: PartialMessage<TestPackedTypes>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestPackedTypes";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 90, name: "packed_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
    { no: 91, name: "packed_int64", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true, packed: true },
    { no: 92, name: "packed_uint32", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true, packed: true },
    { no: 93, name: "packed_uint64", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true, packed: true },
    { no: 94, name: "packed_sint32", kind: "scalar", T: 17 /* ScalarType.SINT32 */, repeated: true, packed: true },
    { no: 95, name: "packed_sint64", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true, packed: true },
    { no: 96, name: "packed_fixed32", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, repeated: true, packed: true },
    { no: 97, name: "packed_fixed64", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, repeated: true, packed: true },
    { no: 98, name: "packed_sfixed32", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, repeated: true, packed: true },
    { no: 99, name: "packed_sfixed64", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, repeated: true, packed: true },
    { no: 100, name: "packed_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true, packed: true },
    { no: 101, name: "packed_double", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true, packed: true },
    { no: 102, name: "packed_bool", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true, packed: true },
    { no: 103, name: "packed_enum", kind: "enum", T: proto2.getEnumType(ForeignEnum), repeated: true, packed: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestPackedTypes {
    return new TestPackedTypes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestPackedTypes {
    return new TestPackedTypes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestPackedTypes {
    return new TestPackedTypes().fromJsonString(jsonString, options);
  }

  static equals(a: TestPackedTypes | PlainMessage<TestPackedTypes> | undefined, b: TestPackedTypes | PlainMessage<TestPackedTypes> | undefined): boolean {
    return proto2.util.equals(TestPackedTypes, a, b);
  }
}

/**
 * A message with the same fields as TestPackedTypes, but without packing. Used
 * to test packed <-> unpacked wire compatibility.
 *
 * @generated from message protobuf_unittest.TestUnpackedTypes
 */
export class TestUnpackedTypes extends Message<TestUnpackedTypes> {
  /**
   * @generated from field: repeated int32 unpacked_int32 = 90 [packed = false];
   */
  unpackedInt32: number[] = [];

  /**
   * @generated from field: repeated int64 unpacked_int64 = 91 [packed = false];
   */
  unpackedInt64: bigint[] = [];

  /**
   * @generated from field: repeated uint32 unpacked_uint32 = 92 [packed = false];
   */
  unpackedUint32: number[] = [];

  /**
   * @generated from field: repeated uint64 unpacked_uint64 = 93 [packed = false];
   */
  unpackedUint64: bigint[] = [];

  /**
   * @generated from field: repeated sint32 unpacked_sint32 = 94 [packed = false];
   */
  unpackedSint32: number[] = [];

  /**
   * @generated from field: repeated sint64 unpacked_sint64 = 95 [packed = false];
   */
  unpackedSint64: bigint[] = [];

  /**
   * @generated from field: repeated fixed32 unpacked_fixed32 = 96 [packed = false];
   */
  unpackedFixed32: number[] = [];

  /**
   * @generated from field: repeated fixed64 unpacked_fixed64 = 97 [packed = false];
   */
  unpackedFixed64: bigint[] = [];

  /**
   * @generated from field: repeated sfixed32 unpacked_sfixed32 = 98 [packed = false];
   */
  unpackedSfixed32: number[] = [];

  /**
   * @generated from field: repeated sfixed64 unpacked_sfixed64 = 99 [packed = false];
   */
  unpackedSfixed64: bigint[] = [];

  /**
   * @generated from field: repeated float unpacked_float = 100 [packed = false];
   */
  unpackedFloat: number[] = [];

  /**
   * @generated from field: repeated double unpacked_double = 101 [packed = false];
   */
  unpackedDouble: number[] = [];

  /**
   * @generated from field: repeated bool unpacked_bool = 102 [packed = false];
   */
  unpackedBool: boolean[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.ForeignEnum unpacked_enum = 103 [packed = false];
   */
  unpackedEnum: ForeignEnum[] = [];

  constructor(data?: PartialMessage<TestUnpackedTypes>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestUnpackedTypes";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 90, name: "unpacked_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 91, name: "unpacked_int64", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 92, name: "unpacked_uint32", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 93, name: "unpacked_uint64", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 94, name: "unpacked_sint32", kind: "scalar", T: 17 /* ScalarType.SINT32 */, repeated: true },
    { no: 95, name: "unpacked_sint64", kind: "scalar", T: 18 /* ScalarType.SINT64 */, repeated: true },
    { no: 96, name: "unpacked_fixed32", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, repeated: true },
    { no: 97, name: "unpacked_fixed64", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, repeated: true },
    { no: 98, name: "unpacked_sfixed32", kind: "scalar", T: 15 /* ScalarType.SFIXED32 */, repeated: true },
    { no: 99, name: "unpacked_sfixed64", kind: "scalar", T: 16 /* ScalarType.SFIXED64 */, repeated: true },
    { no: 100, name: "unpacked_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 101, name: "unpacked_double", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 102, name: "unpacked_bool", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 103, name: "unpacked_enum", kind: "enum", T: proto2.getEnumType(ForeignEnum), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestUnpackedTypes {
    return new TestUnpackedTypes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestUnpackedTypes {
    return new TestUnpackedTypes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestUnpackedTypes {
    return new TestUnpackedTypes().fromJsonString(jsonString, options);
  }

  static equals(a: TestUnpackedTypes | PlainMessage<TestUnpackedTypes> | undefined, b: TestUnpackedTypes | PlainMessage<TestUnpackedTypes> | undefined): boolean {
    return proto2.util.equals(TestUnpackedTypes, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestPackedExtensions
 */
export class TestPackedExtensions extends Message<TestPackedExtensions> {
  constructor(data?: PartialMessage<TestPackedExtensions>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestPackedExtensions";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestPackedExtensions {
    return new TestPackedExtensions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestPackedExtensions {
    return new TestPackedExtensions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestPackedExtensions {
    return new TestPackedExtensions().fromJsonString(jsonString, options);
  }

  static equals(a: TestPackedExtensions | PlainMessage<TestPackedExtensions> | undefined, b: TestPackedExtensions | PlainMessage<TestPackedExtensions> | undefined): boolean {
    return proto2.util.equals(TestPackedExtensions, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestUnpackedExtensions
 */
export class TestUnpackedExtensions extends Message<TestUnpackedExtensions> {
  constructor(data?: PartialMessage<TestUnpackedExtensions>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestUnpackedExtensions";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestUnpackedExtensions {
    return new TestUnpackedExtensions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestUnpackedExtensions {
    return new TestUnpackedExtensions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestUnpackedExtensions {
    return new TestUnpackedExtensions().fromJsonString(jsonString, options);
  }

  static equals(a: TestUnpackedExtensions | PlainMessage<TestUnpackedExtensions> | undefined, b: TestUnpackedExtensions | PlainMessage<TestUnpackedExtensions> | undefined): boolean {
    return proto2.util.equals(TestUnpackedExtensions, a, b);
  }
}

/**
 * Used by ExtensionSetTest/DynamicExtensions.  The test actually builds
 * a set of extensions to TestAllExtensions dynamically, based on the fields
 * of this message type.
 *
 * @generated from message protobuf_unittest.TestDynamicExtensions
 */
export class TestDynamicExtensions extends Message<TestDynamicExtensions> {
  /**
   * @generated from field: optional fixed32 scalar_extension = 2000;
   */
  scalarExtension?: number;

  /**
   * @generated from field: optional protobuf_unittest.ForeignEnum enum_extension = 2001;
   */
  enumExtension?: ForeignEnum;

  /**
   * @generated from field: optional protobuf_unittest.TestDynamicExtensions.DynamicEnumType dynamic_enum_extension = 2002;
   */
  dynamicEnumExtension?: TestDynamicExtensions_DynamicEnumType;

  /**
   * @generated from field: optional protobuf_unittest.ForeignMessage message_extension = 2003;
   */
  messageExtension?: ForeignMessage;

  /**
   * @generated from field: optional protobuf_unittest.TestDynamicExtensions.DynamicMessageType dynamic_message_extension = 2004;
   */
  dynamicMessageExtension?: TestDynamicExtensions_DynamicMessageType;

  /**
   * @generated from field: repeated string repeated_extension = 2005;
   */
  repeatedExtension: string[] = [];

  /**
   * @generated from field: repeated sint32 packed_extension = 2006 [packed = true];
   */
  packedExtension: number[] = [];

  constructor(data?: PartialMessage<TestDynamicExtensions>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestDynamicExtensions";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 2000, name: "scalar_extension", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, opt: true },
    { no: 2001, name: "enum_extension", kind: "enum", T: proto2.getEnumType(ForeignEnum), opt: true },
    { no: 2002, name: "dynamic_enum_extension", kind: "enum", T: proto2.getEnumType(TestDynamicExtensions_DynamicEnumType), opt: true },
    { no: 2003, name: "message_extension", kind: "message", T: ForeignMessage, opt: true },
    { no: 2004, name: "dynamic_message_extension", kind: "message", T: TestDynamicExtensions_DynamicMessageType, opt: true },
    { no: 2005, name: "repeated_extension", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2006, name: "packed_extension", kind: "scalar", T: 17 /* ScalarType.SINT32 */, repeated: true, packed: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDynamicExtensions {
    return new TestDynamicExtensions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDynamicExtensions {
    return new TestDynamicExtensions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDynamicExtensions {
    return new TestDynamicExtensions().fromJsonString(jsonString, options);
  }

  static equals(a: TestDynamicExtensions | PlainMessage<TestDynamicExtensions> | undefined, b: TestDynamicExtensions | PlainMessage<TestDynamicExtensions> | undefined): boolean {
    return proto2.util.equals(TestDynamicExtensions, a, b);
  }
}

/**
 * @generated from enum protobuf_unittest.TestDynamicExtensions.DynamicEnumType
 */
export enum TestDynamicExtensions_DynamicEnumType {
  /**
   * @generated from enum value: DYNAMIC_FOO = 2200;
   */
  DYNAMIC_FOO = 2200,

  /**
   * @generated from enum value: DYNAMIC_BAR = 2201;
   */
  DYNAMIC_BAR = 2201,

  /**
   * @generated from enum value: DYNAMIC_BAZ = 2202;
   */
  DYNAMIC_BAZ = 2202,
}
// Retrieve enum metadata with: proto2.getEnumType(TestDynamicExtensions_DynamicEnumType)
proto2.util.setEnumType(TestDynamicExtensions_DynamicEnumType, "protobuf_unittest.TestDynamicExtensions.DynamicEnumType", [
  { no: 2200, name: "DYNAMIC_FOO" },
  { no: 2201, name: "DYNAMIC_BAR" },
  { no: 2202, name: "DYNAMIC_BAZ" },
]);

/**
 * @generated from message protobuf_unittest.TestDynamicExtensions.DynamicMessageType
 */
export class TestDynamicExtensions_DynamicMessageType extends Message<TestDynamicExtensions_DynamicMessageType> {
  /**
   * @generated from field: optional int32 dynamic_field = 2100;
   */
  dynamicField?: number;

  constructor(data?: PartialMessage<TestDynamicExtensions_DynamicMessageType>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestDynamicExtensions.DynamicMessageType";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 2100, name: "dynamic_field", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDynamicExtensions_DynamicMessageType {
    return new TestDynamicExtensions_DynamicMessageType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDynamicExtensions_DynamicMessageType {
    return new TestDynamicExtensions_DynamicMessageType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDynamicExtensions_DynamicMessageType {
    return new TestDynamicExtensions_DynamicMessageType().fromJsonString(jsonString, options);
  }

  static equals(a: TestDynamicExtensions_DynamicMessageType | PlainMessage<TestDynamicExtensions_DynamicMessageType> | undefined, b: TestDynamicExtensions_DynamicMessageType | PlainMessage<TestDynamicExtensions_DynamicMessageType> | undefined): boolean {
    return proto2.util.equals(TestDynamicExtensions_DynamicMessageType, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestRepeatedScalarDifferentTagSizes
 */
export class TestRepeatedScalarDifferentTagSizes extends Message<TestRepeatedScalarDifferentTagSizes> {
  /**
   * Parsing repeated fixed size values used to fail. This message needs to be
   * used in order to get a tag of the right size; all of the repeated fields
   * in TestAllTypes didn't trigger the check.
   *
   * @generated from field: repeated fixed32 repeated_fixed32 = 12;
   */
  repeatedFixed32: number[] = [];

  /**
   * Check for a varint type, just for good measure.
   *
   * @generated from field: repeated int32 repeated_int32 = 13;
   */
  repeatedInt32: number[] = [];

  /**
   * These have two-byte tags.
   *
   * @generated from field: repeated fixed64 repeated_fixed64 = 2046;
   */
  repeatedFixed64: bigint[] = [];

  /**
   * @generated from field: repeated int64 repeated_int64 = 2047;
   */
  repeatedInt64: bigint[] = [];

  /**
   * Three byte tags.
   *
   * @generated from field: repeated float repeated_float = 262142;
   */
  repeatedFloat: number[] = [];

  /**
   * @generated from field: repeated uint64 repeated_uint64 = 262143;
   */
  repeatedUint64: bigint[] = [];

  constructor(data?: PartialMessage<TestRepeatedScalarDifferentTagSizes>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestRepeatedScalarDifferentTagSizes";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 12, name: "repeated_fixed32", kind: "scalar", T: 7 /* ScalarType.FIXED32 */, repeated: true },
    { no: 13, name: "repeated_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 2046, name: "repeated_fixed64", kind: "scalar", T: 6 /* ScalarType.FIXED64 */, repeated: true },
    { no: 2047, name: "repeated_int64", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 262142, name: "repeated_float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, repeated: true },
    { no: 262143, name: "repeated_uint64", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRepeatedScalarDifferentTagSizes {
    return new TestRepeatedScalarDifferentTagSizes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRepeatedScalarDifferentTagSizes {
    return new TestRepeatedScalarDifferentTagSizes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRepeatedScalarDifferentTagSizes {
    return new TestRepeatedScalarDifferentTagSizes().fromJsonString(jsonString, options);
  }

  static equals(a: TestRepeatedScalarDifferentTagSizes | PlainMessage<TestRepeatedScalarDifferentTagSizes> | undefined, b: TestRepeatedScalarDifferentTagSizes | PlainMessage<TestRepeatedScalarDifferentTagSizes> | undefined): boolean {
    return proto2.util.equals(TestRepeatedScalarDifferentTagSizes, a, b);
  }
}

/**
 * Test that if an optional or required message/group field appears multiple
 * times in the input, they need to be merged.
 *
 * @generated from message protobuf_unittest.TestParsingMerge
 */
export class TestParsingMerge extends Message<TestParsingMerge> {
  /**
   * @generated from field: required protobuf_unittest.TestAllTypes required_all_types = 1;
   */
  requiredAllTypes?: TestAllTypes;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes optional_all_types = 2;
   */
  optionalAllTypes?: TestAllTypes;

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes repeated_all_types = 3;
   */
  repeatedAllTypes: TestAllTypes[] = [];

  /**
   * @generated from field: optional protobuf_unittest.TestParsingMerge.OptionalGroup optionalgroup = 10;
   */
  optionalgroup?: TestParsingMerge_OptionalGroup;

  /**
   * @generated from field: repeated protobuf_unittest.TestParsingMerge.RepeatedGroup repeatedgroup = 20;
   */
  repeatedgroup: TestParsingMerge_RepeatedGroup[] = [];

  constructor(data?: PartialMessage<TestParsingMerge>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestParsingMerge";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "required_all_types", kind: "message", T: TestAllTypes },
    { no: 2, name: "optional_all_types", kind: "message", T: TestAllTypes, opt: true },
    { no: 3, name: "repeated_all_types", kind: "message", T: TestAllTypes, repeated: true },
    { no: 10, name: "optionalgroup", kind: "message", T: TestParsingMerge_OptionalGroup, opt: true },
    { no: 20, name: "repeatedgroup", kind: "message", T: TestParsingMerge_RepeatedGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestParsingMerge {
    return new TestParsingMerge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestParsingMerge {
    return new TestParsingMerge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestParsingMerge {
    return new TestParsingMerge().fromJsonString(jsonString, options);
  }

  static equals(a: TestParsingMerge | PlainMessage<TestParsingMerge> | undefined, b: TestParsingMerge | PlainMessage<TestParsingMerge> | undefined): boolean {
    return proto2.util.equals(TestParsingMerge, a, b);
  }
}

/**
 * RepeatedFieldsGenerator defines matching field types as TestParsingMerge,
 * except that all fields are repeated. In the tests, we will serialize the
 * RepeatedFieldsGenerator to bytes, and parse the bytes to TestParsingMerge.
 * Repeated fields in RepeatedFieldsGenerator are expected to be merged into
 * the corresponding required/optional fields in TestParsingMerge.
 *
 * @generated from message protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator
 */
export class TestParsingMerge_RepeatedFieldsGenerator extends Message<TestParsingMerge_RepeatedFieldsGenerator> {
  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes field1 = 1;
   */
  field1: TestAllTypes[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes field2 = 2;
   */
  field2: TestAllTypes[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes field3 = 3;
   */
  field3: TestAllTypes[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1 group1 = 10;
   */
  group1: TestParsingMerge_RepeatedFieldsGenerator_Group1[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2 group2 = 20;
   */
  group2: TestParsingMerge_RepeatedFieldsGenerator_Group2[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes ext1 = 1000;
   */
  ext1: TestAllTypes[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes ext2 = 1001;
   */
  ext2: TestAllTypes[] = [];

  constructor(data?: PartialMessage<TestParsingMerge_RepeatedFieldsGenerator>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "field1", kind: "message", T: TestAllTypes, repeated: true },
    { no: 2, name: "field2", kind: "message", T: TestAllTypes, repeated: true },
    { no: 3, name: "field3", kind: "message", T: TestAllTypes, repeated: true },
    { no: 10, name: "group1", kind: "message", T: TestParsingMerge_RepeatedFieldsGenerator_Group1, repeated: true },
    { no: 20, name: "group2", kind: "message", T: TestParsingMerge_RepeatedFieldsGenerator_Group2, repeated: true },
    { no: 1000, name: "ext1", kind: "message", T: TestAllTypes, repeated: true },
    { no: 1001, name: "ext2", kind: "message", T: TestAllTypes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestParsingMerge_RepeatedFieldsGenerator {
    return new TestParsingMerge_RepeatedFieldsGenerator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestParsingMerge_RepeatedFieldsGenerator {
    return new TestParsingMerge_RepeatedFieldsGenerator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestParsingMerge_RepeatedFieldsGenerator {
    return new TestParsingMerge_RepeatedFieldsGenerator().fromJsonString(jsonString, options);
  }

  static equals(a: TestParsingMerge_RepeatedFieldsGenerator | PlainMessage<TestParsingMerge_RepeatedFieldsGenerator> | undefined, b: TestParsingMerge_RepeatedFieldsGenerator | PlainMessage<TestParsingMerge_RepeatedFieldsGenerator> | undefined): boolean {
    return proto2.util.equals(TestParsingMerge_RepeatedFieldsGenerator, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1
 */
export class TestParsingMerge_RepeatedFieldsGenerator_Group1 extends Message<TestParsingMerge_RepeatedFieldsGenerator_Group1> {
  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes field1 = 11;
   */
  field1?: TestAllTypes;

  constructor(data?: PartialMessage<TestParsingMerge_RepeatedFieldsGenerator_Group1>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 11, name: "field1", kind: "message", T: TestAllTypes, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestParsingMerge_RepeatedFieldsGenerator_Group1 {
    return new TestParsingMerge_RepeatedFieldsGenerator_Group1().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestParsingMerge_RepeatedFieldsGenerator_Group1 {
    return new TestParsingMerge_RepeatedFieldsGenerator_Group1().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestParsingMerge_RepeatedFieldsGenerator_Group1 {
    return new TestParsingMerge_RepeatedFieldsGenerator_Group1().fromJsonString(jsonString, options);
  }

  static equals(a: TestParsingMerge_RepeatedFieldsGenerator_Group1 | PlainMessage<TestParsingMerge_RepeatedFieldsGenerator_Group1> | undefined, b: TestParsingMerge_RepeatedFieldsGenerator_Group1 | PlainMessage<TestParsingMerge_RepeatedFieldsGenerator_Group1> | undefined): boolean {
    return proto2.util.equals(TestParsingMerge_RepeatedFieldsGenerator_Group1, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2
 */
export class TestParsingMerge_RepeatedFieldsGenerator_Group2 extends Message<TestParsingMerge_RepeatedFieldsGenerator_Group2> {
  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes field1 = 21;
   */
  field1?: TestAllTypes;

  constructor(data?: PartialMessage<TestParsingMerge_RepeatedFieldsGenerator_Group2>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 21, name: "field1", kind: "message", T: TestAllTypes, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestParsingMerge_RepeatedFieldsGenerator_Group2 {
    return new TestParsingMerge_RepeatedFieldsGenerator_Group2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestParsingMerge_RepeatedFieldsGenerator_Group2 {
    return new TestParsingMerge_RepeatedFieldsGenerator_Group2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestParsingMerge_RepeatedFieldsGenerator_Group2 {
    return new TestParsingMerge_RepeatedFieldsGenerator_Group2().fromJsonString(jsonString, options);
  }

  static equals(a: TestParsingMerge_RepeatedFieldsGenerator_Group2 | PlainMessage<TestParsingMerge_RepeatedFieldsGenerator_Group2> | undefined, b: TestParsingMerge_RepeatedFieldsGenerator_Group2 | PlainMessage<TestParsingMerge_RepeatedFieldsGenerator_Group2> | undefined): boolean {
    return proto2.util.equals(TestParsingMerge_RepeatedFieldsGenerator_Group2, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestParsingMerge.OptionalGroup
 */
export class TestParsingMerge_OptionalGroup extends Message<TestParsingMerge_OptionalGroup> {
  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes optional_group_all_types = 11;
   */
  optionalGroupAllTypes?: TestAllTypes;

  constructor(data?: PartialMessage<TestParsingMerge_OptionalGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestParsingMerge.OptionalGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 11, name: "optional_group_all_types", kind: "message", T: TestAllTypes, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestParsingMerge_OptionalGroup {
    return new TestParsingMerge_OptionalGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestParsingMerge_OptionalGroup {
    return new TestParsingMerge_OptionalGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestParsingMerge_OptionalGroup {
    return new TestParsingMerge_OptionalGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestParsingMerge_OptionalGroup | PlainMessage<TestParsingMerge_OptionalGroup> | undefined, b: TestParsingMerge_OptionalGroup | PlainMessage<TestParsingMerge_OptionalGroup> | undefined): boolean {
    return proto2.util.equals(TestParsingMerge_OptionalGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestParsingMerge.RepeatedGroup
 */
export class TestParsingMerge_RepeatedGroup extends Message<TestParsingMerge_RepeatedGroup> {
  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes repeated_group_all_types = 21;
   */
  repeatedGroupAllTypes?: TestAllTypes;

  constructor(data?: PartialMessage<TestParsingMerge_RepeatedGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestParsingMerge.RepeatedGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 21, name: "repeated_group_all_types", kind: "message", T: TestAllTypes, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestParsingMerge_RepeatedGroup {
    return new TestParsingMerge_RepeatedGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestParsingMerge_RepeatedGroup {
    return new TestParsingMerge_RepeatedGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestParsingMerge_RepeatedGroup {
    return new TestParsingMerge_RepeatedGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestParsingMerge_RepeatedGroup | PlainMessage<TestParsingMerge_RepeatedGroup> | undefined, b: TestParsingMerge_RepeatedGroup | PlainMessage<TestParsingMerge_RepeatedGroup> | undefined): boolean {
    return proto2.util.equals(TestParsingMerge_RepeatedGroup, a, b);
  }
}

/**
 * Test that the correct exception is thrown by parseFrom in a corner case
 * involving merging, extensions, and required fields.
 *
 * @generated from message protobuf_unittest.TestMergeException
 */
export class TestMergeException extends Message<TestMergeException> {
  /**
   * @generated from field: optional protobuf_unittest.TestAllExtensions all_extensions = 1;
   */
  allExtensions?: TestAllExtensions;

  constructor(data?: PartialMessage<TestMergeException>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestMergeException";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "all_extensions", kind: "message", T: TestAllExtensions, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMergeException {
    return new TestMergeException().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMergeException {
    return new TestMergeException().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMergeException {
    return new TestMergeException().fromJsonString(jsonString, options);
  }

  static equals(a: TestMergeException | PlainMessage<TestMergeException> | undefined, b: TestMergeException | PlainMessage<TestMergeException> | undefined): boolean {
    return proto2.util.equals(TestMergeException, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestCommentInjectionMessage
 */
export class TestCommentInjectionMessage extends Message<TestCommentInjectionMessage> {
  /**
   * *\/ <- This should not close the generated doc comment
   *
   * @generated from field: optional string a = 1 [default = "*\/ <- Neither should this."];
   */
  a?: string;

  constructor(data?: PartialMessage<TestCommentInjectionMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestCommentInjectionMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true, default: "*/ <- Neither should this." },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestCommentInjectionMessage {
    return new TestCommentInjectionMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestCommentInjectionMessage {
    return new TestCommentInjectionMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestCommentInjectionMessage {
    return new TestCommentInjectionMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TestCommentInjectionMessage | PlainMessage<TestCommentInjectionMessage> | undefined, b: TestCommentInjectionMessage | PlainMessage<TestCommentInjectionMessage> | undefined): boolean {
    return proto2.util.equals(TestCommentInjectionMessage, a, b);
  }
}

/**
 * Used to check that the c++ code generator re-orders messages to reduce
 * padding.
 *
 * @generated from message protobuf_unittest.TestMessageSize
 */
export class TestMessageSize extends Message<TestMessageSize> {
  /**
   * @generated from field: optional bool m1 = 1;
   */
  m1?: boolean;

  /**
   * @generated from field: optional int64 m2 = 2;
   */
  m2?: bigint;

  /**
   * @generated from field: optional bool m3 = 3;
   */
  m3?: boolean;

  /**
   * @generated from field: optional string m4 = 4;
   */
  m4?: string;

  /**
   * @generated from field: optional int32 m5 = 5;
   */
  m5?: number;

  /**
   * @generated from field: optional int64 m6 = 6;
   */
  m6?: bigint;

  constructor(data?: PartialMessage<TestMessageSize>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestMessageSize";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "m1", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: "m2", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "m3", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "m4", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "m5", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "m6", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMessageSize {
    return new TestMessageSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMessageSize {
    return new TestMessageSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMessageSize {
    return new TestMessageSize().fromJsonString(jsonString, options);
  }

  static equals(a: TestMessageSize | PlainMessage<TestMessageSize> | undefined, b: TestMessageSize | PlainMessage<TestMessageSize> | undefined): boolean {
    return proto2.util.equals(TestMessageSize, a, b);
  }
}

/**
 * Test that RPC services work.
 *
 * @generated from message protobuf_unittest.FooRequest
 */
export class FooRequest extends Message<FooRequest> {
  constructor(data?: PartialMessage<FooRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.FooRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FooRequest {
    return new FooRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FooRequest {
    return new FooRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FooRequest {
    return new FooRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FooRequest | PlainMessage<FooRequest> | undefined, b: FooRequest | PlainMessage<FooRequest> | undefined): boolean {
    return proto2.util.equals(FooRequest, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.FooResponse
 */
export class FooResponse extends Message<FooResponse> {
  constructor(data?: PartialMessage<FooResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.FooResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FooResponse {
    return new FooResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FooResponse {
    return new FooResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FooResponse {
    return new FooResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FooResponse | PlainMessage<FooResponse> | undefined, b: FooResponse | PlainMessage<FooResponse> | undefined): boolean {
    return proto2.util.equals(FooResponse, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.FooClientMessage
 */
export class FooClientMessage extends Message<FooClientMessage> {
  constructor(data?: PartialMessage<FooClientMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.FooClientMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FooClientMessage {
    return new FooClientMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FooClientMessage {
    return new FooClientMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FooClientMessage {
    return new FooClientMessage().fromJsonString(jsonString, options);
  }

  static equals(a: FooClientMessage | PlainMessage<FooClientMessage> | undefined, b: FooClientMessage | PlainMessage<FooClientMessage> | undefined): boolean {
    return proto2.util.equals(FooClientMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.FooServerMessage
 */
export class FooServerMessage extends Message<FooServerMessage> {
  constructor(data?: PartialMessage<FooServerMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.FooServerMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FooServerMessage {
    return new FooServerMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FooServerMessage {
    return new FooServerMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FooServerMessage {
    return new FooServerMessage().fromJsonString(jsonString, options);
  }

  static equals(a: FooServerMessage | PlainMessage<FooServerMessage> | undefined, b: FooServerMessage | PlainMessage<FooServerMessage> | undefined): boolean {
    return proto2.util.equals(FooServerMessage, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.BarRequest
 */
export class BarRequest extends Message<BarRequest> {
  constructor(data?: PartialMessage<BarRequest>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.BarRequest";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BarRequest {
    return new BarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BarRequest {
    return new BarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BarRequest {
    return new BarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BarRequest | PlainMessage<BarRequest> | undefined, b: BarRequest | PlainMessage<BarRequest> | undefined): boolean {
    return proto2.util.equals(BarRequest, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.BarResponse
 */
export class BarResponse extends Message<BarResponse> {
  constructor(data?: PartialMessage<BarResponse>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.BarResponse";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BarResponse {
    return new BarResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BarResponse {
    return new BarResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BarResponse {
    return new BarResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BarResponse | PlainMessage<BarResponse> | undefined, b: BarResponse | PlainMessage<BarResponse> | undefined): boolean {
    return proto2.util.equals(BarResponse, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestJsonName
 */
export class TestJsonName extends Message<TestJsonName> {
  /**
   * @generated from field: optional int32 field_name1 = 1;
   */
  fieldName1?: number;

  /**
   * @generated from field: optional int32 fieldName2 = 2;
   */
  fieldName2?: number;

  /**
   * @generated from field: optional int32 FieldName3 = 3;
   */
  FieldName3?: number;

  /**
   * @generated from field: optional int32 _field_name4 = 4;
   */
  FieldName4?: number;

  /**
   * @generated from field: optional int32 FIELD_NAME5 = 5;
   */
  FIELDNAME5?: number;

  /**
   * @generated from field: optional int32 field_name6 = 6 [json_name = "@type"];
   */
  fieldName6?: number;

  /**
   * @generated from field: optional int32 fieldname7 = 7;
   */
  fieldname7?: number;

  constructor(data?: PartialMessage<TestJsonName>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestJsonName";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "field_name1", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "fieldName2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "FieldName3", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "_field_name4", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 5, name: "FIELD_NAME5", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "field_name6", jsonName: "@type", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "fieldname7", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestJsonName {
    return new TestJsonName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestJsonName {
    return new TestJsonName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestJsonName {
    return new TestJsonName().fromJsonString(jsonString, options);
  }

  static equals(a: TestJsonName | PlainMessage<TestJsonName> | undefined, b: TestJsonName | PlainMessage<TestJsonName> | undefined): boolean {
    return proto2.util.equals(TestJsonName, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestHugeFieldNumbers
 */
export class TestHugeFieldNumbers extends Message<TestHugeFieldNumbers> {
  /**
   * @generated from field: optional int32 optional_int32 = 536870000;
   */
  optionalInt32?: number;

  /**
   * @generated from field: optional int32 fixed_32 = 536870001;
   */
  fixed32?: number;

  /**
   * @generated from field: repeated int32 repeated_int32 = 536870002 [packed = false];
   */
  repeatedInt32: number[] = [];

  /**
   * @generated from field: repeated int32 packed_int32 = 536870003 [packed = true];
   */
  packedInt32: number[] = [];

  /**
   * @generated from field: optional protobuf_unittest.ForeignEnum optional_enum = 536870004;
   */
  optionalEnum?: ForeignEnum;

  /**
   * @generated from field: optional string optional_string = 536870005;
   */
  optionalString?: string;

  /**
   * @generated from field: optional bytes optional_bytes = 536870006;
   */
  optionalBytes?: Uint8Array;

  /**
   * @generated from field: optional protobuf_unittest.ForeignMessage optional_message = 536870007;
   */
  optionalMessage?: ForeignMessage;

  /**
   * @generated from field: optional protobuf_unittest.TestHugeFieldNumbers.OptionalGroup optionalgroup = 536870008;
   */
  optionalgroup?: TestHugeFieldNumbers_OptionalGroup;

  /**
   * @generated from field: map<string, string> string_string_map = 536870010;
   */
  stringStringMap: { [key: string]: string } = {};

  /**
   * @generated from oneof protobuf_unittest.TestHugeFieldNumbers.oneof_field
   */
  oneofField: {
    /**
     * @generated from field: uint32 oneof_uint32 = 536870011;
     */
    value: number;
    case: "oneofUint32";
  } | {
    /**
     * @generated from field: protobuf_unittest.TestAllTypes oneof_test_all_types = 536870012;
     */
    value: TestAllTypes;
    case: "oneofTestAllTypes";
  } | {
    /**
     * @generated from field: string oneof_string = 536870013;
     */
    value: string;
    case: "oneofString";
  } | {
    /**
     * @generated from field: bytes oneof_bytes = 536870014;
     */
    value: Uint8Array;
    case: "oneofBytes";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TestHugeFieldNumbers>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestHugeFieldNumbers";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 536870000, name: "optional_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 536870001, name: "fixed_32", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 536870002, name: "repeated_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 536870003, name: "packed_int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true, packed: true },
    { no: 536870004, name: "optional_enum", kind: "enum", T: proto2.getEnumType(ForeignEnum), opt: true },
    { no: 536870005, name: "optional_string", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 536870006, name: "optional_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 536870007, name: "optional_message", kind: "message", T: ForeignMessage, opt: true },
    { no: 536870008, name: "optionalgroup", kind: "message", T: TestHugeFieldNumbers_OptionalGroup, opt: true },
    { no: 536870010, name: "string_string_map", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 536870011, name: "oneof_uint32", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "oneof_field" },
    { no: 536870012, name: "oneof_test_all_types", kind: "message", T: TestAllTypes, oneof: "oneof_field" },
    { no: 536870013, name: "oneof_string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "oneof_field" },
    { no: 536870014, name: "oneof_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "oneof_field" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestHugeFieldNumbers {
    return new TestHugeFieldNumbers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestHugeFieldNumbers {
    return new TestHugeFieldNumbers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestHugeFieldNumbers {
    return new TestHugeFieldNumbers().fromJsonString(jsonString, options);
  }

  static equals(a: TestHugeFieldNumbers | PlainMessage<TestHugeFieldNumbers> | undefined, b: TestHugeFieldNumbers | PlainMessage<TestHugeFieldNumbers> | undefined): boolean {
    return proto2.util.equals(TestHugeFieldNumbers, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestHugeFieldNumbers.OptionalGroup
 */
export class TestHugeFieldNumbers_OptionalGroup extends Message<TestHugeFieldNumbers_OptionalGroup> {
  /**
   * @generated from field: optional int32 group_a = 536870009;
   */
  groupA?: number;

  constructor(data?: PartialMessage<TestHugeFieldNumbers_OptionalGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestHugeFieldNumbers.OptionalGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 536870009, name: "group_a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestHugeFieldNumbers_OptionalGroup {
    return new TestHugeFieldNumbers_OptionalGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestHugeFieldNumbers_OptionalGroup {
    return new TestHugeFieldNumbers_OptionalGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestHugeFieldNumbers_OptionalGroup {
    return new TestHugeFieldNumbers_OptionalGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestHugeFieldNumbers_OptionalGroup | PlainMessage<TestHugeFieldNumbers_OptionalGroup> | undefined, b: TestHugeFieldNumbers_OptionalGroup | PlainMessage<TestHugeFieldNumbers_OptionalGroup> | undefined): boolean {
    return proto2.util.equals(TestHugeFieldNumbers_OptionalGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestExtensionInsideTable
 */
export class TestExtensionInsideTable extends Message<TestExtensionInsideTable> {
  /**
   * @generated from field: optional int32 field1 = 1;
   */
  field1?: number;

  /**
   * @generated from field: optional int32 field2 = 2;
   */
  field2?: number;

  /**
   * @generated from field: optional int32 field3 = 3;
   */
  field3?: number;

  /**
   * @generated from field: optional int32 field4 = 4;
   */
  field4?: number;

  /**
   * @generated from field: optional int32 field6 = 6;
   */
  field6?: number;

  /**
   * @generated from field: optional int32 field7 = 7;
   */
  field7?: number;

  /**
   * @generated from field: optional int32 field8 = 8;
   */
  field8?: number;

  /**
   * @generated from field: optional int32 field9 = 9;
   */
  field9?: number;

  /**
   * @generated from field: optional int32 field10 = 10;
   */
  field10?: number;

  constructor(data?: PartialMessage<TestExtensionInsideTable>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestExtensionInsideTable";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "field1", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "field2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "field3", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "field4", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "field6", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "field7", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 8, name: "field8", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 9, name: "field9", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 10, name: "field10", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestExtensionInsideTable {
    return new TestExtensionInsideTable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestExtensionInsideTable {
    return new TestExtensionInsideTable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestExtensionInsideTable {
    return new TestExtensionInsideTable().fromJsonString(jsonString, options);
  }

  static equals(a: TestExtensionInsideTable | PlainMessage<TestExtensionInsideTable> | undefined, b: TestExtensionInsideTable | PlainMessage<TestExtensionInsideTable> | undefined): boolean {
    return proto2.util.equals(TestExtensionInsideTable, a, b);
  }
}

/**
 * NOTE(b/202996544): Intentionally nested to mirror go/glep.
 *
 * @generated from message protobuf_unittest.TestNestedGroupExtensionOuter
 */
export class TestNestedGroupExtensionOuter extends Message<TestNestedGroupExtensionOuter> {
  /**
   * @generated from field: optional protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup layer1optionalgroup = 1;
   */
  layer1optionalgroup?: TestNestedGroupExtensionOuter_Layer1OptionalGroup;

  constructor(data?: PartialMessage<TestNestedGroupExtensionOuter>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedGroupExtensionOuter";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "layer1optionalgroup", kind: "message", T: TestNestedGroupExtensionOuter_Layer1OptionalGroup, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedGroupExtensionOuter {
    return new TestNestedGroupExtensionOuter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedGroupExtensionOuter {
    return new TestNestedGroupExtensionOuter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedGroupExtensionOuter {
    return new TestNestedGroupExtensionOuter().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedGroupExtensionOuter | PlainMessage<TestNestedGroupExtensionOuter> | undefined, b: TestNestedGroupExtensionOuter | PlainMessage<TestNestedGroupExtensionOuter> | undefined): boolean {
    return proto2.util.equals(TestNestedGroupExtensionOuter, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup
 */
export class TestNestedGroupExtensionOuter_Layer1OptionalGroup extends Message<TestNestedGroupExtensionOuter_Layer1OptionalGroup> {
  /**
   * @generated from field: repeated protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup layer2repeatedgroup = 2;
   */
  layer2repeatedgroup: TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup[] = [];

  /**
   * @generated from field: repeated protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup layer2anotheroptionalrepeatedgroup = 4;
   */
  layer2anotheroptionalrepeatedgroup: TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup[] = [];

  constructor(data?: PartialMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 2, name: "layer2repeatedgroup", kind: "message", T: TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, repeated: true },
    { no: 4, name: "layer2anotheroptionalrepeatedgroup", kind: "message", T: TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedGroupExtensionOuter_Layer1OptionalGroup {
    return new TestNestedGroupExtensionOuter_Layer1OptionalGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedGroupExtensionOuter_Layer1OptionalGroup {
    return new TestNestedGroupExtensionOuter_Layer1OptionalGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedGroupExtensionOuter_Layer1OptionalGroup {
    return new TestNestedGroupExtensionOuter_Layer1OptionalGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedGroupExtensionOuter_Layer1OptionalGroup | PlainMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup> | undefined, b: TestNestedGroupExtensionOuter_Layer1OptionalGroup | PlainMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup> | undefined): boolean {
    return proto2.util.equals(TestNestedGroupExtensionOuter_Layer1OptionalGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup
 */
export class TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup extends Message<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup> {
  /**
   * @generated from field: optional string another_field = 6;
   */
  anotherField?: string;

  constructor(data?: PartialMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 6, name: "another_field", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup {
    return new TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup {
    return new TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup {
    return new TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup | PlainMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup> | undefined, b: TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup | PlainMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup> | undefined): boolean {
    return proto2.util.equals(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup
 */
export class TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup extends Message<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup> {
  /**
   * @generated from field: optional string but_why_tho = 5;
   */
  butWhyTho?: string;

  constructor(data?: PartialMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 5, name: "but_why_tho", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup {
    return new TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup {
    return new TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup {
    return new TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup | PlainMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup> | undefined, b: TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup | PlainMessage<TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup> | undefined): boolean {
    return proto2.util.equals(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestNestedGroupExtensionInnerExtension
 */
export class TestNestedGroupExtensionInnerExtension extends Message<TestNestedGroupExtensionInnerExtension> {
  /**
   * @generated from field: optional string inner_name = 1;
   */
  innerName?: string;

  constructor(data?: PartialMessage<TestNestedGroupExtensionInnerExtension>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestNestedGroupExtensionInnerExtension";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "inner_name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNestedGroupExtensionInnerExtension {
    return new TestNestedGroupExtensionInnerExtension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNestedGroupExtensionInnerExtension {
    return new TestNestedGroupExtensionInnerExtension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNestedGroupExtensionInnerExtension {
    return new TestNestedGroupExtensionInnerExtension().fromJsonString(jsonString, options);
  }

  static equals(a: TestNestedGroupExtensionInnerExtension | PlainMessage<TestNestedGroupExtensionInnerExtension> | undefined, b: TestNestedGroupExtensionInnerExtension | PlainMessage<TestNestedGroupExtensionInnerExtension> | undefined): boolean {
    return proto2.util.equals(TestNestedGroupExtensionInnerExtension, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestExtensionRangeSerialize
 */
export class TestExtensionRangeSerialize extends Message<TestExtensionRangeSerialize> {
  /**
   * @generated from field: optional int32 foo_one = 1;
   */
  fooOne?: number;

  /**
   * @generated from field: optional int32 foo_two = 6;
   */
  fooTwo?: number;

  /**
   * @generated from field: optional int32 foo_three = 7;
   */
  fooThree?: number;

  /**
   * @generated from field: optional int32 foo_four = 13;
   */
  fooFour?: number;

  constructor(data?: PartialMessage<TestExtensionRangeSerialize>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestExtensionRangeSerialize";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "foo_one", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 6, name: "foo_two", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "foo_three", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 13, name: "foo_four", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestExtensionRangeSerialize {
    return new TestExtensionRangeSerialize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestExtensionRangeSerialize {
    return new TestExtensionRangeSerialize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestExtensionRangeSerialize {
    return new TestExtensionRangeSerialize().fromJsonString(jsonString, options);
  }

  static equals(a: TestExtensionRangeSerialize | PlainMessage<TestExtensionRangeSerialize> | undefined, b: TestExtensionRangeSerialize | PlainMessage<TestExtensionRangeSerialize> | undefined): boolean {
    return proto2.util.equals(TestExtensionRangeSerialize, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyInt32Simple
 */
export class TestVerifyInt32Simple extends Message<TestVerifyInt32Simple> {
  /**
   * @generated from field: optional int32 optional_int32_1 = 1;
   */
  optionalInt321?: number;

  /**
   * @generated from field: optional int32 optional_int32_2 = 2;
   */
  optionalInt322?: number;

  /**
   * @generated from field: optional int32 optional_int32_63 = 63;
   */
  optionalInt3263?: number;

  /**
   * @generated from field: optional int32 optional_int32_64 = 64;
   */
  optionalInt3264?: number;

  constructor(data?: PartialMessage<TestVerifyInt32Simple>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyInt32Simple";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "optional_int32_1", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "optional_int32_2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 63, name: "optional_int32_63", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 64, name: "optional_int32_64", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyInt32Simple {
    return new TestVerifyInt32Simple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyInt32Simple {
    return new TestVerifyInt32Simple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyInt32Simple {
    return new TestVerifyInt32Simple().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyInt32Simple | PlainMessage<TestVerifyInt32Simple> | undefined, b: TestVerifyInt32Simple | PlainMessage<TestVerifyInt32Simple> | undefined): boolean {
    return proto2.util.equals(TestVerifyInt32Simple, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyInt32
 */
export class TestVerifyInt32 extends Message<TestVerifyInt32> {
  /**
   * @generated from field: optional int32 optional_int32_1 = 1;
   */
  optionalInt321?: number;

  /**
   * @generated from field: optional int32 optional_int32_2 = 2;
   */
  optionalInt322?: number;

  /**
   * @generated from field: optional int32 optional_int32_63 = 63;
   */
  optionalInt3263?: number;

  /**
   * @generated from field: optional int32 optional_int32_64 = 64;
   */
  optionalInt3264?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes optional_all_types = 9;
   */
  optionalAllTypes?: TestAllTypes;

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes repeated_all_types = 10;
   */
  repeatedAllTypes: TestAllTypes[] = [];

  constructor(data?: PartialMessage<TestVerifyInt32>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyInt32";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "optional_int32_1", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "optional_int32_2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 63, name: "optional_int32_63", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 64, name: "optional_int32_64", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 9, name: "optional_all_types", kind: "message", T: TestAllTypes, opt: true },
    { no: 10, name: "repeated_all_types", kind: "message", T: TestAllTypes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyInt32 {
    return new TestVerifyInt32().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyInt32 {
    return new TestVerifyInt32().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyInt32 {
    return new TestVerifyInt32().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyInt32 | PlainMessage<TestVerifyInt32> | undefined, b: TestVerifyInt32 | PlainMessage<TestVerifyInt32> | undefined): boolean {
    return proto2.util.equals(TestVerifyInt32, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyMostlyInt32
 */
export class TestVerifyMostlyInt32 extends Message<TestVerifyMostlyInt32> {
  /**
   * @generated from field: optional int64 optional_int64_30 = 30;
   */
  optionalInt6430?: bigint;

  /**
   * @generated from field: optional int32 optional_int32_1 = 1;
   */
  optionalInt321?: number;

  /**
   * @generated from field: optional int32 optional_int32_2 = 2;
   */
  optionalInt322?: number;

  /**
   * @generated from field: optional int32 optional_int32_3 = 3;
   */
  optionalInt323?: number;

  /**
   * @generated from field: optional int32 optional_int32_4 = 4;
   */
  optionalInt324?: number;

  /**
   * @generated from field: optional int32 optional_int32_63 = 63;
   */
  optionalInt3263?: number;

  /**
   * @generated from field: optional int32 optional_int32_64 = 64;
   */
  optionalInt3264?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes optional_all_types = 9;
   */
  optionalAllTypes?: TestAllTypes;

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes repeated_all_types = 10;
   */
  repeatedAllTypes: TestAllTypes[] = [];

  constructor(data?: PartialMessage<TestVerifyMostlyInt32>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyMostlyInt32";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 30, name: "optional_int64_30", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 1, name: "optional_int32_1", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "optional_int32_2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "optional_int32_3", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "optional_int32_4", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 63, name: "optional_int32_63", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 64, name: "optional_int32_64", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 9, name: "optional_all_types", kind: "message", T: TestAllTypes, opt: true },
    { no: 10, name: "repeated_all_types", kind: "message", T: TestAllTypes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyMostlyInt32 {
    return new TestVerifyMostlyInt32().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyMostlyInt32 {
    return new TestVerifyMostlyInt32().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyMostlyInt32 {
    return new TestVerifyMostlyInt32().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyMostlyInt32 | PlainMessage<TestVerifyMostlyInt32> | undefined, b: TestVerifyMostlyInt32 | PlainMessage<TestVerifyMostlyInt32> | undefined): boolean {
    return proto2.util.equals(TestVerifyMostlyInt32, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyMostlyInt32BigFieldNumber
 */
export class TestVerifyMostlyInt32BigFieldNumber extends Message<TestVerifyMostlyInt32BigFieldNumber> {
  /**
   * @generated from field: optional int64 optional_int64_30 = 30;
   */
  optionalInt6430?: bigint;

  /**
   * @generated from field: optional int32 optional_int32_300 = 300;
   */
  optionalInt32300?: number;

  /**
   * @generated from field: optional int32 optional_int32_1 = 1;
   */
  optionalInt321?: number;

  /**
   * @generated from field: optional int32 optional_int32_2 = 2;
   */
  optionalInt322?: number;

  /**
   * @generated from field: optional int32 optional_int32_3 = 3;
   */
  optionalInt323?: number;

  /**
   * @generated from field: optional int32 optional_int32_4 = 4;
   */
  optionalInt324?: number;

  /**
   * @generated from field: optional int32 optional_int32_63 = 63;
   */
  optionalInt3263?: number;

  /**
   * @generated from field: optional int32 optional_int32_64 = 64;
   */
  optionalInt3264?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes optional_all_types = 9;
   */
  optionalAllTypes?: TestAllTypes;

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes repeated_all_types = 10;
   */
  repeatedAllTypes: TestAllTypes[] = [];

  constructor(data?: PartialMessage<TestVerifyMostlyInt32BigFieldNumber>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyMostlyInt32BigFieldNumber";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 30, name: "optional_int64_30", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 300, name: "optional_int32_300", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 1, name: "optional_int32_1", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "optional_int32_2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "optional_int32_3", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "optional_int32_4", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 63, name: "optional_int32_63", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 64, name: "optional_int32_64", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 9, name: "optional_all_types", kind: "message", T: TestAllTypes, opt: true },
    { no: 10, name: "repeated_all_types", kind: "message", T: TestAllTypes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyMostlyInt32BigFieldNumber {
    return new TestVerifyMostlyInt32BigFieldNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyMostlyInt32BigFieldNumber {
    return new TestVerifyMostlyInt32BigFieldNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyMostlyInt32BigFieldNumber {
    return new TestVerifyMostlyInt32BigFieldNumber().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyMostlyInt32BigFieldNumber | PlainMessage<TestVerifyMostlyInt32BigFieldNumber> | undefined, b: TestVerifyMostlyInt32BigFieldNumber | PlainMessage<TestVerifyMostlyInt32BigFieldNumber> | undefined): boolean {
    return proto2.util.equals(TestVerifyMostlyInt32BigFieldNumber, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyUint32Simple
 */
export class TestVerifyUint32Simple extends Message<TestVerifyUint32Simple> {
  /**
   * @generated from field: optional uint32 optional_uint32_1 = 1;
   */
  optionalUint321?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_2 = 2;
   */
  optionalUint322?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_63 = 63;
   */
  optionalUint3263?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_64 = 64;
   */
  optionalUint3264?: number;

  constructor(data?: PartialMessage<TestVerifyUint32Simple>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyUint32Simple";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "optional_uint32_1", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "optional_uint32_2", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 63, name: "optional_uint32_63", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 64, name: "optional_uint32_64", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyUint32Simple {
    return new TestVerifyUint32Simple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyUint32Simple {
    return new TestVerifyUint32Simple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyUint32Simple {
    return new TestVerifyUint32Simple().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyUint32Simple | PlainMessage<TestVerifyUint32Simple> | undefined, b: TestVerifyUint32Simple | PlainMessage<TestVerifyUint32Simple> | undefined): boolean {
    return proto2.util.equals(TestVerifyUint32Simple, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyUint32
 */
export class TestVerifyUint32 extends Message<TestVerifyUint32> {
  /**
   * @generated from field: optional uint32 optional_uint32_1 = 1;
   */
  optionalUint321?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_2 = 2;
   */
  optionalUint322?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_63 = 63;
   */
  optionalUint3263?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_64 = 64;
   */
  optionalUint3264?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes optional_all_types = 9;
   */
  optionalAllTypes?: TestAllTypes;

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes repeated_all_types = 10;
   */
  repeatedAllTypes: TestAllTypes[] = [];

  constructor(data?: PartialMessage<TestVerifyUint32>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyUint32";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "optional_uint32_1", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "optional_uint32_2", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 63, name: "optional_uint32_63", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 64, name: "optional_uint32_64", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 9, name: "optional_all_types", kind: "message", T: TestAllTypes, opt: true },
    { no: 10, name: "repeated_all_types", kind: "message", T: TestAllTypes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyUint32 {
    return new TestVerifyUint32().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyUint32 {
    return new TestVerifyUint32().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyUint32 {
    return new TestVerifyUint32().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyUint32 | PlainMessage<TestVerifyUint32> | undefined, b: TestVerifyUint32 | PlainMessage<TestVerifyUint32> | undefined): boolean {
    return proto2.util.equals(TestVerifyUint32, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyOneUint32
 */
export class TestVerifyOneUint32 extends Message<TestVerifyOneUint32> {
  /**
   * @generated from field: optional uint32 optional_uint32_1 = 1;
   */
  optionalUint321?: number;

  /**
   * @generated from field: optional int32 optional_int32_2 = 2;
   */
  optionalInt322?: number;

  /**
   * @generated from field: optional int32 optional_int32_63 = 63;
   */
  optionalInt3263?: number;

  /**
   * @generated from field: optional int32 optional_int32_64 = 64;
   */
  optionalInt3264?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes optional_all_types = 9;
   */
  optionalAllTypes?: TestAllTypes;

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes repeated_all_types = 10;
   */
  repeatedAllTypes: TestAllTypes[] = [];

  constructor(data?: PartialMessage<TestVerifyOneUint32>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyOneUint32";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "optional_uint32_1", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "optional_int32_2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 63, name: "optional_int32_63", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 64, name: "optional_int32_64", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 9, name: "optional_all_types", kind: "message", T: TestAllTypes, opt: true },
    { no: 10, name: "repeated_all_types", kind: "message", T: TestAllTypes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyOneUint32 {
    return new TestVerifyOneUint32().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyOneUint32 {
    return new TestVerifyOneUint32().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyOneUint32 {
    return new TestVerifyOneUint32().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyOneUint32 | PlainMessage<TestVerifyOneUint32> | undefined, b: TestVerifyOneUint32 | PlainMessage<TestVerifyOneUint32> | undefined): boolean {
    return proto2.util.equals(TestVerifyOneUint32, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyOneInt32BigFieldNumber
 */
export class TestVerifyOneInt32BigFieldNumber extends Message<TestVerifyOneInt32BigFieldNumber> {
  /**
   * @generated from field: optional int32 optional_int32_65 = 65;
   */
  optionalInt3265?: number;

  /**
   * @generated from field: optional int64 optional_int64_1 = 1;
   */
  optionalInt641?: bigint;

  /**
   * @generated from field: optional int64 optional_int64_2 = 2;
   */
  optionalInt642?: bigint;

  /**
   * @generated from field: optional int64 optional_int64_63 = 63;
   */
  optionalInt6463?: bigint;

  /**
   * @generated from field: optional int64 optional_int64_64 = 64;
   */
  optionalInt6464?: bigint;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes optional_all_types = 9;
   */
  optionalAllTypes?: TestAllTypes;

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes repeated_all_types = 10;
   */
  repeatedAllTypes: TestAllTypes[] = [];

  constructor(data?: PartialMessage<TestVerifyOneInt32BigFieldNumber>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyOneInt32BigFieldNumber";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 65, name: "optional_int32_65", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 1, name: "optional_int64_1", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 2, name: "optional_int64_2", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 63, name: "optional_int64_63", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 64, name: "optional_int64_64", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 9, name: "optional_all_types", kind: "message", T: TestAllTypes, opt: true },
    { no: 10, name: "repeated_all_types", kind: "message", T: TestAllTypes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyOneInt32BigFieldNumber {
    return new TestVerifyOneInt32BigFieldNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyOneInt32BigFieldNumber {
    return new TestVerifyOneInt32BigFieldNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyOneInt32BigFieldNumber {
    return new TestVerifyOneInt32BigFieldNumber().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyOneInt32BigFieldNumber | PlainMessage<TestVerifyOneInt32BigFieldNumber> | undefined, b: TestVerifyOneInt32BigFieldNumber | PlainMessage<TestVerifyOneInt32BigFieldNumber> | undefined): boolean {
    return proto2.util.equals(TestVerifyOneInt32BigFieldNumber, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyInt32BigFieldNumber
 */
export class TestVerifyInt32BigFieldNumber extends Message<TestVerifyInt32BigFieldNumber> {
  /**
   * @generated from field: optional int32 optional_int32_1000 = 1000;
   */
  optionalInt321000?: number;

  /**
   * @generated from field: optional int32 optional_int32_65 = 65;
   */
  optionalInt3265?: number;

  /**
   * @generated from field: optional int32 optional_int32_1 = 1;
   */
  optionalInt321?: number;

  /**
   * @generated from field: optional int32 optional_int32_2 = 2;
   */
  optionalInt322?: number;

  /**
   * @generated from field: optional int32 optional_int32_63 = 63;
   */
  optionalInt3263?: number;

  /**
   * @generated from field: optional int32 optional_int32_64 = 64;
   */
  optionalInt3264?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes optional_all_types = 9;
   */
  optionalAllTypes?: TestAllTypes;

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes repeated_all_types = 10;
   */
  repeatedAllTypes: TestAllTypes[] = [];

  constructor(data?: PartialMessage<TestVerifyInt32BigFieldNumber>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyInt32BigFieldNumber";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1000, name: "optional_int32_1000", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 65, name: "optional_int32_65", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 1, name: "optional_int32_1", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "optional_int32_2", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 63, name: "optional_int32_63", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 64, name: "optional_int32_64", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 9, name: "optional_all_types", kind: "message", T: TestAllTypes, opt: true },
    { no: 10, name: "repeated_all_types", kind: "message", T: TestAllTypes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyInt32BigFieldNumber {
    return new TestVerifyInt32BigFieldNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyInt32BigFieldNumber {
    return new TestVerifyInt32BigFieldNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyInt32BigFieldNumber {
    return new TestVerifyInt32BigFieldNumber().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyInt32BigFieldNumber | PlainMessage<TestVerifyInt32BigFieldNumber> | undefined, b: TestVerifyInt32BigFieldNumber | PlainMessage<TestVerifyInt32BigFieldNumber> | undefined): boolean {
    return proto2.util.equals(TestVerifyInt32BigFieldNumber, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyUint32BigFieldNumber
 */
export class TestVerifyUint32BigFieldNumber extends Message<TestVerifyUint32BigFieldNumber> {
  /**
   * @generated from field: optional uint32 optional_uint32_1000 = 1000;
   */
  optionalUint321000?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_65 = 65;
   */
  optionalUint3265?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_1 = 1;
   */
  optionalUint321?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_2 = 2;
   */
  optionalUint322?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_63 = 63;
   */
  optionalUint3263?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_64 = 64;
   */
  optionalUint3264?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestAllTypes optional_all_types = 9;
   */
  optionalAllTypes?: TestAllTypes;

  /**
   * @generated from field: repeated protobuf_unittest.TestAllTypes repeated_all_types = 10;
   */
  repeatedAllTypes: TestAllTypes[] = [];

  constructor(data?: PartialMessage<TestVerifyUint32BigFieldNumber>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyUint32BigFieldNumber";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1000, name: "optional_uint32_1000", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 65, name: "optional_uint32_65", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 1, name: "optional_uint32_1", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "optional_uint32_2", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 63, name: "optional_uint32_63", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 64, name: "optional_uint32_64", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 9, name: "optional_all_types", kind: "message", T: TestAllTypes, opt: true },
    { no: 10, name: "repeated_all_types", kind: "message", T: TestAllTypes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyUint32BigFieldNumber {
    return new TestVerifyUint32BigFieldNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyUint32BigFieldNumber {
    return new TestVerifyUint32BigFieldNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyUint32BigFieldNumber {
    return new TestVerifyUint32BigFieldNumber().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyUint32BigFieldNumber | PlainMessage<TestVerifyUint32BigFieldNumber> | undefined, b: TestVerifyUint32BigFieldNumber | PlainMessage<TestVerifyUint32BigFieldNumber> | undefined): boolean {
    return proto2.util.equals(TestVerifyUint32BigFieldNumber, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyBigFieldNumberUint32
 */
export class TestVerifyBigFieldNumberUint32 extends Message<TestVerifyBigFieldNumberUint32> {
  /**
   * @generated from field: optional protobuf_unittest.TestVerifyBigFieldNumberUint32.Nested optional_nested = 1;
   */
  optionalNested?: TestVerifyBigFieldNumberUint32_Nested;

  constructor(data?: PartialMessage<TestVerifyBigFieldNumberUint32>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyBigFieldNumberUint32";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 1, name: "optional_nested", kind: "message", T: TestVerifyBigFieldNumberUint32_Nested, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyBigFieldNumberUint32 {
    return new TestVerifyBigFieldNumberUint32().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyBigFieldNumberUint32 {
    return new TestVerifyBigFieldNumberUint32().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyBigFieldNumberUint32 {
    return new TestVerifyBigFieldNumberUint32().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyBigFieldNumberUint32 | PlainMessage<TestVerifyBigFieldNumberUint32> | undefined, b: TestVerifyBigFieldNumberUint32 | PlainMessage<TestVerifyBigFieldNumberUint32> | undefined): boolean {
    return proto2.util.equals(TestVerifyBigFieldNumberUint32, a, b);
  }
}

/**
 * @generated from message protobuf_unittest.TestVerifyBigFieldNumberUint32.Nested
 */
export class TestVerifyBigFieldNumberUint32_Nested extends Message<TestVerifyBigFieldNumberUint32_Nested> {
  /**
   * @generated from field: optional uint32 optional_uint32_5000 = 5000;
   */
  optionalUint325000?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_1000 = 1000;
   */
  optionalUint321000?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_66 = 66;
   */
  optionalUint3266?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_65 = 65;
   */
  optionalUint3265?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_1 = 1;
   */
  optionalUint321?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_2 = 2;
   */
  optionalUint322?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_63 = 63;
   */
  optionalUint3263?: number;

  /**
   * @generated from field: optional uint32 optional_uint32_64 = 64;
   */
  optionalUint3264?: number;

  /**
   * @generated from field: optional protobuf_unittest.TestVerifyBigFieldNumberUint32.Nested optional_nested = 9;
   */
  optionalNested?: TestVerifyBigFieldNumberUint32_Nested;

  /**
   * @generated from field: repeated protobuf_unittest.TestVerifyBigFieldNumberUint32.Nested repeated_nested = 10;
   */
  repeatedNested: TestVerifyBigFieldNumberUint32_Nested[] = [];

  constructor(data?: PartialMessage<TestVerifyBigFieldNumberUint32_Nested>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime = proto2;
  static readonly typeName = "protobuf_unittest.TestVerifyBigFieldNumberUint32.Nested";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
    { no: 5000, name: "optional_uint32_5000", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 1000, name: "optional_uint32_1000", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 66, name: "optional_uint32_66", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 65, name: "optional_uint32_65", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 1, name: "optional_uint32_1", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "optional_uint32_2", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 63, name: "optional_uint32_63", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 64, name: "optional_uint32_64", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 9, name: "optional_nested", kind: "message", T: TestVerifyBigFieldNumberUint32_Nested, opt: true },
    { no: 10, name: "repeated_nested", kind: "message", T: TestVerifyBigFieldNumberUint32_Nested, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestVerifyBigFieldNumberUint32_Nested {
    return new TestVerifyBigFieldNumberUint32_Nested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestVerifyBigFieldNumberUint32_Nested {
    return new TestVerifyBigFieldNumberUint32_Nested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestVerifyBigFieldNumberUint32_Nested {
    return new TestVerifyBigFieldNumberUint32_Nested().fromJsonString(jsonString, options);
  }

  static equals(a: TestVerifyBigFieldNumberUint32_Nested | PlainMessage<TestVerifyBigFieldNumberUint32_Nested> | undefined, b: TestVerifyBigFieldNumberUint32_Nested | PlainMessage<TestVerifyBigFieldNumberUint32_Nested> | undefined): boolean {
    return proto2.util.equals(TestVerifyBigFieldNumberUint32_Nested, a, b);
  }
}

