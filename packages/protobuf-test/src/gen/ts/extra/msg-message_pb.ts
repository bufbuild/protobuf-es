// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v0.2.1 with parameter "ts_nocheck=false,target=ts"
// @generated from file extra/msg-message.proto (package spec, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message spec.MessageFieldMessage
 */
export class MessageFieldMessage extends Message<MessageFieldMessage> {
  /**
   * @generated from field: spec.MessageFieldMessage.TestMessage message_field = 1;
   */
  messageField?: MessageFieldMessage_TestMessage;

  /**
   * @generated from field: repeated spec.MessageFieldMessage.TestMessage repeated_message_field = 2;
   */
  repeatedMessageField: MessageFieldMessage_TestMessage[] = [];

  constructor(data?: PartialMessage<MessageFieldMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.MessageFieldMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_field", kind: "message", T: MessageFieldMessage_TestMessage },
    { no: 2, name: "repeated_message_field", kind: "message", T: MessageFieldMessage_TestMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageFieldMessage {
    return new MessageFieldMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageFieldMessage {
    return new MessageFieldMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageFieldMessage {
    return new MessageFieldMessage().fromJsonString(jsonString, options);
  }

  static equals(a: MessageFieldMessage | PlainMessage<MessageFieldMessage> | undefined, b: MessageFieldMessage | PlainMessage<MessageFieldMessage> | undefined): boolean {
    return proto3.util.equals(MessageFieldMessage, a, b);
  }
}

/**
 * @generated from message spec.MessageFieldMessage.TestMessage
 */
export class MessageFieldMessage_TestMessage extends Message<MessageFieldMessage_TestMessage> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MessageFieldMessage_TestMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.MessageFieldMessage.TestMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageFieldMessage_TestMessage {
    return new MessageFieldMessage_TestMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageFieldMessage_TestMessage {
    return new MessageFieldMessage_TestMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageFieldMessage_TestMessage {
    return new MessageFieldMessage_TestMessage().fromJsonString(jsonString, options);
  }

  static equals(a: MessageFieldMessage_TestMessage | PlainMessage<MessageFieldMessage_TestMessage> | undefined, b: MessageFieldMessage_TestMessage | PlainMessage<MessageFieldMessage_TestMessage> | undefined): boolean {
    return proto3.util.equals(MessageFieldMessage_TestMessage, a, b);
  }
}

/**
 * Message used for testing JSON.stringify and JSON.parse functionality
 *
 * @generated from message spec.MessageStringifyMessage
 */
export class MessageStringifyMessage extends Message<MessageStringifyMessage> {
  /**
   * @generated from field: string string_field = 1;
   */
  stringField = "";

  /**
   * @generated from field: int32 int32_field = 2;
   */
  int32Field = 0;

  /**
   * @generated from field: bool bool_field = 4;
   */
  boolField = false;

  /**
   * @generated from field: map<string, string> map_field = 5;
   */
  mapField: { [key: string]: string } = {};

  /**
   * @generated from field: spec.MessageStringifyMessage.InnerMessage message_field = 6;
   */
  messageField?: MessageStringifyMessage_InnerMessage;

  /**
   * @generated from field: repeated spec.MessageStringifyMessage.InnerMessage repeated_message_field = 7;
   */
  repeatedMessageField: MessageStringifyMessage_InnerMessage[] = [];

  constructor(data?: PartialMessage<MessageStringifyMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.MessageStringifyMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "string_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "int32_field", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "bool_field", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "map_field", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "message_field", kind: "message", T: MessageStringifyMessage_InnerMessage },
    { no: 7, name: "repeated_message_field", kind: "message", T: MessageStringifyMessage_InnerMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageStringifyMessage {
    return new MessageStringifyMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageStringifyMessage {
    return new MessageStringifyMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageStringifyMessage {
    return new MessageStringifyMessage().fromJsonString(jsonString, options);
  }

  static equals(a: MessageStringifyMessage | PlainMessage<MessageStringifyMessage> | undefined, b: MessageStringifyMessage | PlainMessage<MessageStringifyMessage> | undefined): boolean {
    return proto3.util.equals(MessageStringifyMessage, a, b);
  }
}

/**
 * @generated from message spec.MessageStringifyMessage.InnerMessage
 */
export class MessageStringifyMessage_InnerMessage extends Message<MessageStringifyMessage_InnerMessage> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MessageStringifyMessage_InnerMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.MessageStringifyMessage.InnerMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageStringifyMessage_InnerMessage {
    return new MessageStringifyMessage_InnerMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageStringifyMessage_InnerMessage {
    return new MessageStringifyMessage_InnerMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageStringifyMessage_InnerMessage {
    return new MessageStringifyMessage_InnerMessage().fromJsonString(jsonString, options);
  }

  static equals(a: MessageStringifyMessage_InnerMessage | PlainMessage<MessageStringifyMessage_InnerMessage> | undefined, b: MessageStringifyMessage_InnerMessage | PlainMessage<MessageStringifyMessage_InnerMessage> | undefined): boolean {
    return proto3.util.equals(MessageStringifyMessage_InnerMessage, a, b);
  }
}

/**
 * Message used for testing JSON.stringify and JSON.parse functionality with an
 * Any field
 *
 * @generated from message spec.MessageStringifyAnyMessage
 */
export class MessageStringifyAnyMessage extends Message<MessageStringifyAnyMessage> {
  /**
   * @generated from field: string string_field = 1;
   */
  stringField = "";

  /**
   * @generated from field: google.protobuf.Any any_field = 2;
   */
  anyField?: Any;

  constructor(data?: PartialMessage<MessageStringifyAnyMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.MessageStringifyAnyMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "string_field", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "any_field", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageStringifyAnyMessage {
    return new MessageStringifyAnyMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageStringifyAnyMessage {
    return new MessageStringifyAnyMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageStringifyAnyMessage {
    return new MessageStringifyAnyMessage().fromJsonString(jsonString, options);
  }

  static equals(a: MessageStringifyAnyMessage | PlainMessage<MessageStringifyAnyMessage> | undefined, b: MessageStringifyAnyMessage | PlainMessage<MessageStringifyAnyMessage> | undefined): boolean {
    return proto3.util.equals(MessageStringifyAnyMessage, a, b);
  }
}

