// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v0.2.1 with parameter "ts_nocheck=false,target=ts"
// @generated from file extra/name-clash.proto (package spec, syntax proto3)
/* eslint-disable */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage as PartialMessage$1, PlainMessage as PlainMessage$1} from "@bufbuild/protobuf";
import {Message as Message$1, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message spec.ReservedPropertyNames
 */
export class ReservedPropertyNames extends Message$1<ReservedPropertyNames> {
  constructor(data?: PartialMessage$1<ReservedPropertyNames>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.ReservedPropertyNames";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReservedPropertyNames {
    return new ReservedPropertyNames().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReservedPropertyNames {
    return new ReservedPropertyNames().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReservedPropertyNames {
    return new ReservedPropertyNames().fromJsonString(jsonString, options);
  }

  static equals(a: ReservedPropertyNames | PlainMessage$1<ReservedPropertyNames> | undefined, b: ReservedPropertyNames | PlainMessage$1<ReservedPropertyNames> | undefined): boolean {
    return proto3.util.equals(ReservedPropertyNames, a, b);
  }
}

/**
 * @generated from enum spec.ReservedPropertyNames.EnumBuiltIn
 */
export enum ReservedPropertyNames_EnumBuiltIn {
  /**
   * @generated from enum value: constructor = 0;
   */
  constructor = 0,

  /**
   * @generated from enum value: toString = 1;
   */
  toString = 1,

  /**
   * @generated from enum value: to_JSON = 2;
   */
  to_JSON = 2,

  /**
   * @generated from enum value: value_of = 3;
   */
  value_of = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ReservedPropertyNames_EnumBuiltIn)
proto3.util.setEnumType(ReservedPropertyNames_EnumBuiltIn, "spec.ReservedPropertyNames.EnumBuiltIn", [
  { no: 0, name: "constructor" },
  { no: 1, name: "toString" },
  { no: 2, name: "to_JSON" },
  { no: 3, name: "value_of" },
]);

/**
 * @generated from enum spec.ReservedPropertyNames.EnumRuntime
 */
export enum ReservedPropertyNames_EnumRuntime {
  /**
   * @generated from enum value: to_json = 0;
   */
  to_json = 0,

  /**
   * @generated from enum value: type = 6;
   */
  type = 6,

  /**
   * @generated from enum value: clone = 7;
   */
  clone = 7,

  /**
   * @generated from enum value: equals = 8;
   */
  equals = 8,

  /**
   * @generated from enum value: from_binary = 9;
   */
  from_binary = 9,

  /**
   * @generated from enum value: from_json = 10;
   */
  from_json = 10,

  /**
   * @generated from enum value: from_json_string = 11;
   */
  from_json_string = 11,

  /**
   * @generated from enum value: to_binary = 12;
   */
  to_binary = 12,

  /**
   * @generated from enum value: to_json_string = 14;
   */
  to_json_string = 14,
}
// Retrieve enum metadata with: proto3.getEnumType(ReservedPropertyNames_EnumRuntime)
proto3.util.setEnumType(ReservedPropertyNames_EnumRuntime, "spec.ReservedPropertyNames.EnumRuntime", [
  { no: 0, name: "to_json" },
  { no: 6, name: "type" },
  { no: 7, name: "clone" },
  { no: 8, name: "equals" },
  { no: 9, name: "from_binary" },
  { no: 10, name: "from_json" },
  { no: 11, name: "from_json_string" },
  { no: 12, name: "to_binary" },
  { no: 14, name: "to_json_string" },
]);

/**
 * @generated from message spec.ReservedPropertyNames.BuiltIn
 */
export class ReservedPropertyNames_BuiltIn extends Message$1<ReservedPropertyNames_BuiltIn> {
  /**
   * built-in constructor()
   *
   * @generated from field: string constructor = 2;
   */
  constructor$ = "";

  /**
   * built-in toString()
   *
   * @generated from field: string to_string = 3;
   */
  toString$ = "";

  /**
   * built-in toJSON()
   *
   * @generated from field: string to_JSON = 4;
   */
  toJSON$ = "";

  /**
   * built-in valueOf()
   *
   * @generated from field: string value_of = 5;
   */
  valueOf$ = "";

  constructor(data?: PartialMessage$1<ReservedPropertyNames_BuiltIn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.ReservedPropertyNames.BuiltIn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "constructor", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "to_JSON", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value_of", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReservedPropertyNames_BuiltIn {
    return new ReservedPropertyNames_BuiltIn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReservedPropertyNames_BuiltIn {
    return new ReservedPropertyNames_BuiltIn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReservedPropertyNames_BuiltIn {
    return new ReservedPropertyNames_BuiltIn().fromJsonString(jsonString, options);
  }

  static equals(a: ReservedPropertyNames_BuiltIn | PlainMessage$1<ReservedPropertyNames_BuiltIn> | undefined, b: ReservedPropertyNames_BuiltIn | PlainMessage$1<ReservedPropertyNames_BuiltIn> | undefined): boolean {
    return proto3.util.equals(ReservedPropertyNames_BuiltIn, a, b);
  }
}

/**
 * @generated from message spec.ReservedPropertyNames.Runtime
 */
export class ReservedPropertyNames_Runtime extends Message$1<ReservedPropertyNames_Runtime> {
  /**
   * runtime toJson()
   *
   * @generated from field: string to_json = 4;
   */
  toJson$ = "";

  /**
   * runtime type()
   *
   * @generated from field: string type = 6;
   */
  type = "";

  /**
   * runtime clone()
   *
   * @generated from field: string clone = 7;
   */
  clone$ = "";

  /**
   * runtime equals()
   *
   * @generated from field: string equals = 8;
   */
  equals$ = "";

  /**
   * runtime fromBinary()
   *
   * @generated from field: string from_binary = 9;
   */
  fromBinary$ = "";

  /**
   * runtime fromJson()
   *
   * @generated from field: string from_json = 10;
   */
  fromJson$ = "";

  /**
   * runtime fromJsonString()
   *
   * @generated from field: string from_json_string = 11;
   */
  fromJsonString$ = "";

  /**
   * runtime toBinary()
   *
   * @generated from field: string to_binary = 12;
   */
  toBinary$ = "";

  /**
   * runtime toJsonString()
   *
   * @generated from field: string to_json_string = 14;
   */
  toJsonString$ = "";

  constructor(data?: PartialMessage$1<ReservedPropertyNames_Runtime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.ReservedPropertyNames.Runtime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "to_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "clone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "equals", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "from_binary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "from_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "from_json_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "to_binary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "to_json_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReservedPropertyNames_Runtime {
    return new ReservedPropertyNames_Runtime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReservedPropertyNames_Runtime {
    return new ReservedPropertyNames_Runtime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReservedPropertyNames_Runtime {
    return new ReservedPropertyNames_Runtime().fromJsonString(jsonString, options);
  }

  static equals(a: ReservedPropertyNames_Runtime | PlainMessage$1<ReservedPropertyNames_Runtime> | undefined, b: ReservedPropertyNames_Runtime | PlainMessage$1<ReservedPropertyNames_Runtime> | undefined): boolean {
    return proto3.util.equals(ReservedPropertyNames_Runtime, a, b);
  }
}

/**
 * @generated from message spec.ReservedPropertyNames.OneofBultIn
 */
export class ReservedPropertyNames_OneofBultIn extends Message$1<ReservedPropertyNames_OneofBultIn> {
  /**
   * @generated from oneof spec.ReservedPropertyNames.OneofBultIn.built_in
   */
  builtIn: {
    /**
     * @generated from field: string constructor = 1;
     */
    value: string;
    case: "constructor";
  } | {
    /**
     * @generated from field: string to_string = 2;
     */
    value: string;
    case: "toString";
  } | {
    /**
     * @generated from field: string to_JSON = 3;
     */
    value: string;
    case: "toJSON";
  } | {
    /**
     * @generated from field: string value_of = 4;
     */
    value: string;
    case: "valueOf";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage$1<ReservedPropertyNames_OneofBultIn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.ReservedPropertyNames.OneofBultIn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "constructor", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "built_in" },
    { no: 2, name: "to_string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "built_in" },
    { no: 3, name: "to_JSON", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "built_in" },
    { no: 4, name: "value_of", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "built_in" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReservedPropertyNames_OneofBultIn {
    return new ReservedPropertyNames_OneofBultIn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReservedPropertyNames_OneofBultIn {
    return new ReservedPropertyNames_OneofBultIn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReservedPropertyNames_OneofBultIn {
    return new ReservedPropertyNames_OneofBultIn().fromJsonString(jsonString, options);
  }

  static equals(a: ReservedPropertyNames_OneofBultIn | PlainMessage$1<ReservedPropertyNames_OneofBultIn> | undefined, b: ReservedPropertyNames_OneofBultIn | PlainMessage$1<ReservedPropertyNames_OneofBultIn> | undefined): boolean {
    return proto3.util.equals(ReservedPropertyNames_OneofBultIn, a, b);
  }
}

/**
 * @generated from message spec.ReservedPropertyNames.OneofRuntime
 */
export class ReservedPropertyNames_OneofRuntime extends Message$1<ReservedPropertyNames_OneofRuntime> {
  /**
   * @generated from oneof spec.ReservedPropertyNames.OneofRuntime.runtime
   */
  runtime: {
    /**
     * @generated from field: string to_json = 5;
     */
    value: string;
    case: "toJson";
  } | {
    /**
     * @generated from field: string type = 6;
     */
    value: string;
    case: "type";
  } | {
    /**
     * @generated from field: string clone = 7;
     */
    value: string;
    case: "clone";
  } | {
    /**
     * @generated from field: string equals = 8;
     */
    value: string;
    case: "equals";
  } | {
    /**
     * @generated from field: string from_binary = 9;
     */
    value: string;
    case: "fromBinary";
  } | {
    /**
     * @generated from field: string from_json = 10;
     */
    value: string;
    case: "fromJson";
  } | {
    /**
     * @generated from field: string from_json_string = 11;
     */
    value: string;
    case: "fromJsonString";
  } | {
    /**
     * @generated from field: string to_binary = 12;
     */
    value: string;
    case: "toBinary";
  } | {
    /**
     * @generated from field: string to_json_string = 14;
     */
    value: string;
    case: "toJsonString";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage$1<ReservedPropertyNames_OneofRuntime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.ReservedPropertyNames.OneofRuntime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "to_json", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "runtime" },
    { no: 6, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "runtime" },
    { no: 7, name: "clone", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "runtime" },
    { no: 8, name: "equals", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "runtime" },
    { no: 9, name: "from_binary", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "runtime" },
    { no: 10, name: "from_json", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "runtime" },
    { no: 11, name: "from_json_string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "runtime" },
    { no: 12, name: "to_binary", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "runtime" },
    { no: 14, name: "to_json_string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "runtime" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReservedPropertyNames_OneofRuntime {
    return new ReservedPropertyNames_OneofRuntime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReservedPropertyNames_OneofRuntime {
    return new ReservedPropertyNames_OneofRuntime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReservedPropertyNames_OneofRuntime {
    return new ReservedPropertyNames_OneofRuntime().fromJsonString(jsonString, options);
  }

  static equals(a: ReservedPropertyNames_OneofRuntime | PlainMessage$1<ReservedPropertyNames_OneofRuntime> | undefined, b: ReservedPropertyNames_OneofRuntime | PlainMessage$1<ReservedPropertyNames_OneofRuntime> | undefined): boolean {
    return proto3.util.equals(ReservedPropertyNames_OneofRuntime, a, b);
  }
}

/**
 * reserved identifier
 *
 * @generated from message spec.interface
 */
export class interface$ extends Message$1<interface$> {
  constructor(data?: PartialMessage$1<interface$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.interface";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): interface$ {
    return new interface$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): interface$ {
    return new interface$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): interface$ {
    return new interface$().fromJsonString(jsonString, options);
  }

  static equals(a: interface$ | PlainMessage$1<interface$> | undefined, b: interface$ | PlainMessage$1<interface$> | undefined): boolean {
    return proto3.util.equals(interface$, a, b);
  }
}

/**
 * reserved identifier
 *
 * @generated from message spec.function
 */
export class function$ extends Message$1<function$> {
  constructor(data?: PartialMessage$1<function$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.function";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): function$ {
    return new function$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): function$ {
    return new function$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): function$ {
    return new function$().fromJsonString(jsonString, options);
  }

  static equals(a: function$ | PlainMessage$1<function$> | undefined, b: function$ | PlainMessage$1<function$> | undefined): boolean {
    return proto3.util.equals(function$, a, b);
  }
}

/**
 * reserved identifier
 *
 * @generated from message spec.instanceof
 */
export class instanceof$ extends Message$1<instanceof$> {
  constructor(data?: PartialMessage$1<instanceof$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.instanceof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): instanceof$ {
    return new instanceof$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): instanceof$ {
    return new instanceof$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): instanceof$ {
    return new instanceof$().fromJsonString(jsonString, options);
  }

  static equals(a: instanceof$ | PlainMessage$1<instanceof$> | undefined, b: instanceof$ | PlainMessage$1<instanceof$> | undefined): boolean {
    return proto3.util.equals(instanceof$, a, b);
  }
}

/**
 * reserved identifier
 *
 * @generated from message spec.switch
 */
export class switch$ extends Message$1<switch$> {
  constructor(data?: PartialMessage$1<switch$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.switch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): switch$ {
    return new switch$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): switch$ {
    return new switch$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): switch$ {
    return new switch$().fromJsonString(jsonString, options);
  }

  static equals(a: switch$ | PlainMessage$1<switch$> | undefined, b: switch$ | PlainMessage$1<switch$> | undefined): boolean {
    return proto3.util.equals(switch$, a, b);
  }
}

/**
 * reserved identifier
 *
 * @generated from message spec.case
 */
export class case$ extends Message$1<case$> {
  constructor(data?: PartialMessage$1<case$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.case";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): case$ {
    return new case$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): case$ {
    return new case$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): case$ {
    return new case$().fromJsonString(jsonString, options);
  }

  static equals(a: case$ | PlainMessage$1<case$> | undefined, b: case$ | PlainMessage$1<case$> | undefined): boolean {
    return proto3.util.equals(case$, a, b);
  }
}

/**
 * reserved identifier
 *
 * @generated from message spec.return
 */
export class return$ extends Message$1<return$> {
  constructor(data?: PartialMessage$1<return$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.return";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): return$ {
    return new return$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): return$ {
    return new return$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): return$ {
    return new return$().fromJsonString(jsonString, options);
  }

  static equals(a: return$ | PlainMessage$1<return$> | undefined, b: return$ | PlainMessage$1<return$> | undefined): boolean {
    return proto3.util.equals(return$, a, b);
  }
}

/**
 * used by runtime
 *
 * @generated from message spec.Message
 */
export class Message extends Message$1<Message> {
  constructor(data?: PartialMessage$1<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage$1<Message> | undefined, b: Message | PlainMessage$1<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * used by runtime
 *
 * @generated from message spec.PartialMessage
 */
export class PartialMessage extends Message$1<PartialMessage> {
  constructor(data?: PartialMessage$1<PartialMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.PartialMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PartialMessage {
    return new PartialMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PartialMessage {
    return new PartialMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PartialMessage {
    return new PartialMessage().fromJsonString(jsonString, options);
  }

  static equals(a: PartialMessage | PlainMessage$1<PartialMessage> | undefined, b: PartialMessage | PlainMessage$1<PartialMessage> | undefined): boolean {
    return proto3.util.equals(PartialMessage, a, b);
  }
}

/**
 * used by runtime
 *
 * @generated from message spec.PlainMessage
 */
export class PlainMessage extends Message$1<PlainMessage> {
  constructor(data?: PartialMessage$1<PlainMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.PlainMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlainMessage {
    return new PlainMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlainMessage {
    return new PlainMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlainMessage {
    return new PlainMessage().fromJsonString(jsonString, options);
  }

  static equals(a: PlainMessage | PlainMessage$1<PlainMessage> | undefined, b: PlainMessage | PlainMessage$1<PlainMessage> | undefined): boolean {
    return proto3.util.equals(PlainMessage, a, b);
  }
}

/**
 * clash with global type "Error"
 * either this message name is escaped in generated code, or the generated
 * code must escape its calls to the global error object (i.e. `new Error`)
 *
 * @generated from message spec.Error
 */
export class Error extends Message$1<Error> {
  /**
   * @generated from field: string field_name = 1;
   */
  fieldName = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage$1<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage$1<Error> | undefined, b: Error | PlainMessage$1<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.Object
 */
export class Object$ extends Message$1<Object$> {
  constructor(data?: PartialMessage$1<Object$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.Object";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Object$ {
    return new Object$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Object$ {
    return new Object$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Object$ {
    return new Object$().fromJsonString(jsonString, options);
  }

  static equals(a: Object$ | PlainMessage$1<Object$> | undefined, b: Object$ | PlainMessage$1<Object$> | undefined): boolean {
    return proto3.util.equals(Object$, a, b);
  }
}

/**
 * @generated from message spec.object
 */
export class object$ extends Message$1<object$> {
  constructor(data?: PartialMessage$1<object$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.object";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): object$ {
    return new object$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): object$ {
    return new object$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): object$ {
    return new object$().fromJsonString(jsonString, options);
  }

  static equals(a: object$ | PlainMessage$1<object$> | undefined, b: object$ | PlainMessage$1<object$> | undefined): boolean {
    return proto3.util.equals(object$, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.array
 */
export class array extends Message$1<array> {
  constructor(data?: PartialMessage$1<array>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.array";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): array {
    return new array().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): array {
    return new array().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): array {
    return new array().fromJsonString(jsonString, options);
  }

  static equals(a: array | PlainMessage$1<array> | undefined, b: array | PlainMessage$1<array> | undefined): boolean {
    return proto3.util.equals(array, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.string
 */
export class string$ extends Message$1<string$> {
  constructor(data?: PartialMessage$1<string$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.string";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): string$ {
    return new string$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): string$ {
    return new string$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): string$ {
    return new string$().fromJsonString(jsonString, options);
  }

  static equals(a: string$ | PlainMessage$1<string$> | undefined, b: string$ | PlainMessage$1<string$> | undefined): boolean {
    return proto3.util.equals(string$, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.number
 */
export class number$ extends Message$1<number$> {
  constructor(data?: PartialMessage$1<number$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.number";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): number$ {
    return new number$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): number$ {
    return new number$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): number$ {
    return new number$().fromJsonString(jsonString, options);
  }

  static equals(a: number$ | PlainMessage$1<number$> | undefined, b: number$ | PlainMessage$1<number$> | undefined): boolean {
    return proto3.util.equals(number$, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.boolean
 */
export class boolean$ extends Message$1<boolean$> {
  constructor(data?: PartialMessage$1<boolean$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.boolean";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): boolean$ {
    return new boolean$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): boolean$ {
    return new boolean$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): boolean$ {
    return new boolean$().fromJsonString(jsonString, options);
  }

  static equals(a: boolean$ | PlainMessage$1<boolean$> | undefined, b: boolean$ | PlainMessage$1<boolean$> | undefined): boolean {
    return proto3.util.equals(boolean$, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.bigint
 */
export class bigint$ extends Message$1<bigint$> {
  constructor(data?: PartialMessage$1<bigint$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.bigint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): bigint$ {
    return new bigint$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): bigint$ {
    return new bigint$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): bigint$ {
    return new bigint$().fromJsonString(jsonString, options);
  }

  static equals(a: bigint$ | PlainMessage$1<bigint$> | undefined, b: bigint$ | PlainMessage$1<bigint$> | undefined): boolean {
    return proto3.util.equals(bigint$, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.Uint8Array
 */
export class Uint8Array$ extends Message$1<Uint8Array$> {
  constructor(data?: PartialMessage$1<Uint8Array$>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.Uint8Array";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Uint8Array$ {
    return new Uint8Array$().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Uint8Array$ {
    return new Uint8Array$().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Uint8Array$ {
    return new Uint8Array$().fromJsonString(jsonString, options);
  }

  static equals(a: Uint8Array$ | PlainMessage$1<Uint8Array$> | undefined, b: Uint8Array$ | PlainMessage$1<Uint8Array$> | undefined): boolean {
    return proto3.util.equals(Uint8Array$, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.Array
 */
export class Array extends Message$1<Array> {
  constructor(data?: PartialMessage$1<Array>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.Array";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Array {
    return new Array().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Array {
    return new Array().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Array {
    return new Array().fromJsonString(jsonString, options);
  }

  static equals(a: Array | PlainMessage$1<Array> | undefined, b: Array | PlainMessage$1<Array> | undefined): boolean {
    return proto3.util.equals(Array, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.String
 */
export class String extends Message$1<String> {
  constructor(data?: PartialMessage$1<String>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.String";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): String {
    return new String().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): String {
    return new String().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): String {
    return new String().fromJsonString(jsonString, options);
  }

  static equals(a: String | PlainMessage$1<String> | undefined, b: String | PlainMessage$1<String> | undefined): boolean {
    return proto3.util.equals(String, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.Number
 */
export class Number extends Message$1<Number> {
  constructor(data?: PartialMessage$1<Number>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.Number";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Number {
    return new Number().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Number {
    return new Number().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Number {
    return new Number().fromJsonString(jsonString, options);
  }

  static equals(a: Number | PlainMessage$1<Number> | undefined, b: Number | PlainMessage$1<Number> | undefined): boolean {
    return proto3.util.equals(Number, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.Boolean
 */
export class Boolean extends Message$1<Boolean> {
  constructor(data?: PartialMessage$1<Boolean>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.Boolean";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Boolean {
    return new Boolean().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Boolean {
    return new Boolean().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Boolean {
    return new Boolean().fromJsonString(jsonString, options);
  }

  static equals(a: Boolean | PlainMessage$1<Boolean> | undefined, b: Boolean | PlainMessage$1<Boolean> | undefined): boolean {
    return proto3.util.equals(Boolean, a, b);
  }
}

/**
 * clash with global type
 *
 * @generated from message spec.BigInt
 */
export class BigInt extends Message$1<BigInt> {
  constructor(data?: PartialMessage$1<BigInt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.BigInt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigInt {
    return new BigInt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigInt {
    return new BigInt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigInt {
    return new BigInt().fromJsonString(jsonString, options);
  }

  static equals(a: BigInt | PlainMessage$1<BigInt> | undefined, b: BigInt | PlainMessage$1<BigInt> | undefined): boolean {
    return proto3.util.equals(BigInt, a, b);
  }
}

/**
 * @generated from message spec.ClashParent
 */
export class ClashParent extends Message$1<ClashParent> {
  constructor(data?: PartialMessage$1<ClashParent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.ClashParent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClashParent {
    return new ClashParent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClashParent {
    return new ClashParent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClashParent {
    return new ClashParent().fromJsonString(jsonString, options);
  }

  static equals(a: ClashParent | PlainMessage$1<ClashParent> | undefined, b: ClashParent | PlainMessage$1<ClashParent> | undefined): boolean {
    return proto3.util.equals(ClashParent, a, b);
  }
}

/**
 * should clash with message ClashParent_ClashChild
 *
 * @generated from message spec.ClashParent.ClashChild
 */
export class ClashParent_ClashChild extends Message$1<ClashParent_ClashChild> {
  constructor(data?: PartialMessage$1<ClashParent_ClashChild>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.ClashParent.ClashChild";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClashParent_ClashChild {
    return new ClashParent_ClashChild().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClashParent_ClashChild {
    return new ClashParent_ClashChild().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClashParent_ClashChild {
    return new ClashParent_ClashChild().fromJsonString(jsonString, options);
  }

  static equals(a: ClashParent_ClashChild | PlainMessage$1<ClashParent_ClashChild> | undefined, b: ClashParent_ClashChild | PlainMessage$1<ClashParent_ClashChild> | undefined): boolean {
    return proto3.util.equals(ClashParent_ClashChild, a, b);
  }
}

/**
 * @generated from message spec.NoClashFields
 */
export class NoClashFields extends Message$1<NoClashFields> {
  /**
   * ok as object property
   *
   * @generated from field: string const = 1;
   */
  const = "";

  /**
   * ok as object property
   *
   * @generated from field: string switch = 2;
   */
  switch = "";

  /**
   * ok as object property
   *
   * @generated from field: string case = 3;
   */
  case = "";

  /**
   * ok as object property
   *
   * @generated from field: string function = 4;
   */
  function = "";

  /**
   * ok as object property
   *
   * @generated from field: string interface = 5;
   */
  interface = "";

  /**
   * ok as object property
   *
   * @generated from field: string return = 6;
   */
  return = "";

  constructor(data?: PartialMessage$1<NoClashFields>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.NoClashFields";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "switch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "case", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "function", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "interface", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "return", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NoClashFields {
    return new NoClashFields().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NoClashFields {
    return new NoClashFields().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NoClashFields {
    return new NoClashFields().fromJsonString(jsonString, options);
  }

  static equals(a: NoClashFields | PlainMessage$1<NoClashFields> | undefined, b: NoClashFields | PlainMessage$1<NoClashFields> | undefined): boolean {
    return proto3.util.equals(NoClashFields, a, b);
  }
}

/**
 * @generated from message spec.NoClashOneof
 */
export class NoClashOneof extends Message$1<NoClashOneof> {
  /**
   * @generated from oneof spec.NoClashOneof.kind
   */
  kind: {
    /**
     * ok as object property
     *
     * @generated from field: string const = 1;
     */
    value: string;
    case: "const";
  } | {
    /**
     * ok as object property
     *
     * @generated from field: string switch = 2;
     */
    value: string;
    case: "switch";
  } | {
    /**
     * ok as object property
     *
     * @generated from field: string case = 3;
     */
    value: string;
    case: "case";
  } | {
    /**
     * ok as object property
     *
     * @generated from field: string function = 4;
     */
    value: string;
    case: "function";
  } | {
    /**
     * ok as object property
     *
     * @generated from field: string interface = 5;
     */
    value: string;
    case: "interface";
  } | {
    /**
     * ok as object property
     *
     * @generated from field: string return = 6;
     */
    value: string;
    case: "return";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage$1<NoClashOneof>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.NoClashOneof";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "const", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 2, name: "switch", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 3, name: "case", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 4, name: "function", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 5, name: "interface", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
    { no: 6, name: "return", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "kind" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NoClashOneof {
    return new NoClashOneof().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NoClashOneof {
    return new NoClashOneof().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NoClashOneof {
    return new NoClashOneof().fromJsonString(jsonString, options);
  }

  static equals(a: NoClashOneof | PlainMessage$1<NoClashOneof> | undefined, b: NoClashOneof | PlainMessage$1<NoClashOneof> | undefined): boolean {
    return proto3.util.equals(NoClashOneof, a, b);
  }
}

/**
 * @generated from message spec.NoClashOneofADT
 */
export class NoClashOneofADT extends Message$1<NoClashOneofADT> {
  /**
   * @generated from field: spec.NoClashOneofADT.M m = 1;
   */
  m?: NoClashOneofADT_M;

  constructor(data?: PartialMessage$1<NoClashOneofADT>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.NoClashOneofADT";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "m", kind: "message", T: NoClashOneofADT_M },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NoClashOneofADT {
    return new NoClashOneofADT().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NoClashOneofADT {
    return new NoClashOneofADT().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NoClashOneofADT {
    return new NoClashOneofADT().fromJsonString(jsonString, options);
  }

  static equals(a: NoClashOneofADT | PlainMessage$1<NoClashOneofADT> | undefined, b: NoClashOneofADT | PlainMessage$1<NoClashOneofADT> | undefined): boolean {
    return proto3.util.equals(NoClashOneofADT, a, b);
  }
}

/**
 * @generated from message spec.NoClashOneofADT.M
 */
export class NoClashOneofADT_M extends Message$1<NoClashOneofADT_M> {
  /**
   * @generated from field: string case = 1;
   */
  case = "";

  /**
   * @generated from field: optional string value = 2;
   */
  value?: string;

  constructor(data?: PartialMessage$1<NoClashOneofADT_M>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.NoClashOneofADT.M";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "case", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NoClashOneofADT_M {
    return new NoClashOneofADT_M().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NoClashOneofADT_M {
    return new NoClashOneofADT_M().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NoClashOneofADT_M {
    return new NoClashOneofADT_M().fromJsonString(jsonString, options);
  }

  static equals(a: NoClashOneofADT_M | PlainMessage$1<NoClashOneofADT_M> | undefined, b: NoClashOneofADT_M | PlainMessage$1<NoClashOneofADT_M> | undefined): boolean {
    return proto3.util.equals(NoClashOneofADT_M, a, b);
  }
}

/**
 * just here as a "namespace" for the enum
 *
 * @generated from message spec.NoClashEnumWrap
 */
export class NoClashEnumWrap extends Message$1<NoClashEnumWrap> {
  constructor(data?: PartialMessage$1<NoClashEnumWrap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "spec.NoClashEnumWrap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NoClashEnumWrap {
    return new NoClashEnumWrap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NoClashEnumWrap {
    return new NoClashEnumWrap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NoClashEnumWrap {
    return new NoClashEnumWrap().fromJsonString(jsonString, options);
  }

  static equals(a: NoClashEnumWrap | PlainMessage$1<NoClashEnumWrap> | undefined, b: NoClashEnumWrap | PlainMessage$1<NoClashEnumWrap> | undefined): boolean {
    return proto3.util.equals(NoClashEnumWrap, a, b);
  }
}

/**
 * @generated from enum spec.NoClashEnumWrap.X
 */
export enum NoClashEnumWrap_X {
  /**
   * ok as object property
   *
   * @generated from enum value: instanceof = 0;
   */
  instanceof = 0,

  /**
   * ok as object property
   *
   * @generated from enum value: switch = 1;
   */
  switch = 1,

  /**
   * ok as object property
   *
   * @generated from enum value: case = 3;
   */
  case = 3,

  /**
   * ok as object property
   *
   * @generated from enum value: function = 4;
   */
  function = 4,

  /**
   * ok as object property
   *
   * @generated from enum value: interface = 5;
   */
  interface = 5,

  /**
   * ok as object property
   *
   * @generated from enum value: return = 6;
   */
  return = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(NoClashEnumWrap_X)
proto3.util.setEnumType(NoClashEnumWrap_X, "spec.NoClashEnumWrap.X", [
  { no: 0, name: "instanceof" },
  { no: 1, name: "switch" },
  { no: 3, name: "case" },
  { no: 4, name: "function" },
  { no: 5, name: "interface" },
  { no: 6, name: "return" },
]);

