// Copyright 2021-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.10.0 with parameter "target=js+dts,import_extension=js"
// @generated from file extra/valid_types.proto (package spec, edition 2023)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file extra/valid_types.proto.
 */
export declare const file_extra_valid_types: GenFile;

/**
 * @generated from message spec.VTypes
 */
export declare type VTypes = Message<"spec.VTypes"> & {
  /**
   * In the generated valid type, the property should:
   * - be optional
   * - refer to the valid type for Other
   *
   * @generated from field: spec.VTypes.Other msg = 1;
   */
  msg?: VTypes_Other;

  /**
   * In the generated valid type, this property should:
   * - not be optional
   * - refer to the valid type for Other
   *
   * @generated from field: spec.VTypes.Other required_msg = 2;
   */
  requiredMsg?: VTypes_Other;

  /**
   * In the generated valid type, this property should:
   * - be optional
   * - refer to the regular type for Other
   *
   * @generated from field: spec.VTypes.Other required_msg_ignore_always = 3;
   */
  requiredMsgIgnoreAlways?: VTypes_Other;

  /**
   * In the generated valid type, this property should:
   * - be optional
   * - refer to the valid type for Other
   *
   * @generated from field: spec.VTypes.Other msg_ignore_unpopulated = 4;
   */
  msgIgnoreUnpopulated?: VTypes_Other;

  /**
   * In the generated valid type, this property should be the same as the regular type
   *
   * @generated from field: spec.VTypes.Other msg_ignore_default = 5;
   */
  msgIgnoreDefault?: VTypes_Other;

  /**
   * In the generated valid type, this property should:
   * - not be optional (lists never are)
   * - refer to the valid type for Other
   *
   * @generated from field: repeated spec.VTypes.Other repeated_msg = 6;
   */
  repeatedMsg: VTypes_Other[];

  /**
   * In the generated valid type, this property should:
   * - not be optional (lists never are)
   * - refer to the regular type for Other
   *
   * @generated from field: repeated spec.VTypes.Other repeated_msg_always_ignore = 8;
   */
  repeatedMsgAlwaysIgnore: VTypes_Other[];

  /**
   * In the generated valid type, this property should:
   * - not be optional (lists never are)
   * - refer to the regular type for Other
   *
   * @generated from field: repeated spec.VTypes.Other repeated_msg_always_ignore_items = 9;
   */
  repeatedMsgAlwaysIgnoreItems: VTypes_Other[];

  /**
   * In the generated valid type, this property should:
   * - not be optional (lists never are)
   * - refer to the valid type for Other, because messages in a list are never unpopulated
   *
   * @generated from field: repeated spec.VTypes.Other repeated_msg_ignore_unpopulated_items = 10;
   */
  repeatedMsgIgnoreUnpopulatedItems: VTypes_Other[];

  /**
   * In the generated valid type, this property should be the same as the regular type
   *
   * @generated from field: repeated spec.VTypes.Other repeated_msg_ignore_default_items = 11;
   */
  repeatedMsgIgnoreDefaultItems: VTypes_Other[];

  /**
   * In the generated valid type, this property should:
   * - not be optional (maps never are)
   * - refer to the valid type for Other
   *
   * @generated from field: map<string, spec.VTypes.Other> map = 12;
   */
  map: { [key: string]: VTypes_Other };

  /**
   * In the generated valid type, this property should:
   * - not be optional (maps never are)
   * - refer to the regular type for Other
   *
   * @generated from field: map<string, spec.VTypes.Other> map_ignore_always = 13;
   */
  mapIgnoreAlways: { [key: string]: VTypes_Other };

  /**
   * In the generated valid type, this property should:
   * - not be optional (maps never are)
   * - refer to the regular type for Other
   *
   * @generated from field: map<string, spec.VTypes.Other> map_always_ignore_values = 14;
   */
  mapAlwaysIgnoreValues: { [key: string]: VTypes_Other };

  /**
   * In the generated valid type, this property should:
   * - not be optional (maps never are)
   * - refer to the regular type for Other, because map entries are never unpopulated
   *
   * @generated from field: map<string, spec.VTypes.Other> map_ignore_unpopulated_values = 15;
   */
  mapIgnoreUnpopulatedValues: { [key: string]: VTypes_Other };

  /**
   * In the generated valid type, this property should be the same as the regular type
   *
   * @generated from field: map<string, spec.VTypes.Other> map_ignore_default_values = 16;
   */
  mapIgnoreDefaultValues: { [key: string]: VTypes_Other };

  /**
   * In the generated valid type, this property should:
   * - not be optional
   * - refer to the valid type for Other
   *
   * @generated from field: spec.VTypes.Other legacy_required_msg = 20 [features.field_presence = LEGACY_REQUIRED];
   */
  legacyRequiredMsg?: VTypes_Other;

  /**
   * In the generated valid type, this property should:
   * - not be optional
   * - refer to the regular type for Other, because IGNORE_ALWAYS is set
   *
   * @generated from field: spec.VTypes.Other legacy_required_msg_ignore_always = 21 [features.field_presence = LEGACY_REQUIRED];
   */
  legacyRequiredMsgIgnoreAlways?: VTypes_Other;

  /**
   * In the generated valid type, this property should point to the regular
   * type, since we currently do not generate Valid types for the WKT.
   *
   * @generated from field: google.protobuf.Timestamp wkt = 22;
   */
  wkt?: Timestamp;
};

/**
 * Describes the message spec.VTypes.
 * Use `create(VTypesSchema)` to create a new message.
 */
export declare const VTypesSchema: GenMessage<VTypes>;

/**
 * @generated from message spec.VTypes.Other
 */
export declare type VTypes_Other = Message<"spec.VTypes.Other"> & {
};

/**
 * Describes the message spec.VTypes.Other.
 * Use `create(VTypes_OtherSchema)` to create a new message.
 */
export declare const VTypes_OtherSchema: GenMessage<VTypes_Other>;

/**
 * This message does not have required fields, but still needs a valid type
 * because it has a message field that uses required fields.
 *
 * @generated from message spec.VTypes2
 */
export declare type VTypes2 = Message<"spec.VTypes2"> & {
  /**
   * In the generated valid type, this property should point to a valid type.
   *
   * @generated from field: spec.VTypes msg = 1;
   */
  msg?: VTypes;
};

/**
 * Describes the message spec.VTypes2.
 * Use `create(VTypes2Schema)` to create a new message.
 */
export declare const VTypes2Schema: GenMessage<VTypes2>;

