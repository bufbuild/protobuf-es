// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.4.2 with parameter "ts_nocheck=false,target=js+dts"
// @generated from file google/protobuf/wrappers.proto (package google.protobuf, syntax proto3)
/* eslint-disable */

import { proto3, ScalarType } from "@bufbuild/protobuf";

/**
 * Wrapper message for `double`.
 *
 * The JSON representation for `DoubleValue` is JSON number.
 *
 * @generated from message google.protobuf.DoubleValue
 */
export const DoubleValue = proto3.makeMessageType(
  "google.protobuf.DoubleValue",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

DoubleValue.prototype.toJson = function toJson(options) {
  return proto3.json.writeScalar(ScalarType.DOUBLE, this.value, true);
}

DoubleValue.prototype.fromJson = function fromJson(json, options) {
  try {
    this.value = proto3.json.readScalar(ScalarType.DOUBLE, json);
  } catch (e) {
    let m = `cannot decode message google.protobuf.DoubleValue from JSON"`;
    if (e instanceof Error && e.message.length > 0) {
      m += `: ${e.message}`
    }
    throw new Error(m);
  }
  return this;
};

DoubleValue.fieldWrapper = {
  wrapField(value) {
    return new DoubleValue({value});
  },
  unwrapField(value) {
    return value.value;
  }
};

/**
 * Wrapper message for `float`.
 *
 * The JSON representation for `FloatValue` is JSON number.
 *
 * @generated from message google.protobuf.FloatValue
 */
export const FloatValue = proto3.makeMessageType(
  "google.protobuf.FloatValue",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ],
);

FloatValue.prototype.toJson = function toJson(options) {
  return proto3.json.writeScalar(ScalarType.FLOAT, this.value, true);
}

FloatValue.prototype.fromJson = function fromJson(json, options) {
  try {
    this.value = proto3.json.readScalar(ScalarType.FLOAT, json);
  } catch (e) {
    let m = `cannot decode message google.protobuf.FloatValue from JSON"`;
    if (e instanceof Error && e.message.length > 0) {
      m += `: ${e.message}`
    }
    throw new Error(m);
  }
  return this;
};

FloatValue.fieldWrapper = {
  wrapField(value) {
    return new FloatValue({value});
  },
  unwrapField(value) {
    return value.value;
  }
};

/**
 * Wrapper message for `int64`.
 *
 * The JSON representation for `Int64Value` is JSON string.
 *
 * @generated from message google.protobuf.Int64Value
 */
export const Int64Value = proto3.makeMessageType(
  "google.protobuf.Int64Value",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

Int64Value.prototype.toJson = function toJson(options) {
  return proto3.json.writeScalar(ScalarType.INT64, this.value, true);
}

Int64Value.prototype.fromJson = function fromJson(json, options) {
  try {
    this.value = proto3.json.readScalar(ScalarType.INT64, json);
  } catch (e) {
    let m = `cannot decode message google.protobuf.Int64Value from JSON"`;
    if (e instanceof Error && e.message.length > 0) {
      m += `: ${e.message}`
    }
    throw new Error(m);
  }
  return this;
};

Int64Value.fieldWrapper = {
  wrapField(value) {
    return new Int64Value({value});
  },
  unwrapField(value) {
    return value.value;
  }
};

/**
 * Wrapper message for `uint64`.
 *
 * The JSON representation for `UInt64Value` is JSON string.
 *
 * @generated from message google.protobuf.UInt64Value
 */
export const UInt64Value = proto3.makeMessageType(
  "google.protobuf.UInt64Value",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

UInt64Value.prototype.toJson = function toJson(options) {
  return proto3.json.writeScalar(ScalarType.UINT64, this.value, true);
}

UInt64Value.prototype.fromJson = function fromJson(json, options) {
  try {
    this.value = proto3.json.readScalar(ScalarType.UINT64, json);
  } catch (e) {
    let m = `cannot decode message google.protobuf.UInt64Value from JSON"`;
    if (e instanceof Error && e.message.length > 0) {
      m += `: ${e.message}`
    }
    throw new Error(m);
  }
  return this;
};

UInt64Value.fieldWrapper = {
  wrapField(value) {
    return new UInt64Value({value});
  },
  unwrapField(value) {
    return value.value;
  }
};

/**
 * Wrapper message for `int32`.
 *
 * The JSON representation for `Int32Value` is JSON number.
 *
 * @generated from message google.protobuf.Int32Value
 */
export const Int32Value = proto3.makeMessageType(
  "google.protobuf.Int32Value",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

Int32Value.prototype.toJson = function toJson(options) {
  return proto3.json.writeScalar(ScalarType.INT32, this.value, true);
}

Int32Value.prototype.fromJson = function fromJson(json, options) {
  try {
    this.value = proto3.json.readScalar(ScalarType.INT32, json);
  } catch (e) {
    let m = `cannot decode message google.protobuf.Int32Value from JSON"`;
    if (e instanceof Error && e.message.length > 0) {
      m += `: ${e.message}`
    }
    throw new Error(m);
  }
  return this;
};

Int32Value.fieldWrapper = {
  wrapField(value) {
    return new Int32Value({value});
  },
  unwrapField(value) {
    return value.value;
  }
};

/**
 * Wrapper message for `uint32`.
 *
 * The JSON representation for `UInt32Value` is JSON number.
 *
 * @generated from message google.protobuf.UInt32Value
 */
export const UInt32Value = proto3.makeMessageType(
  "google.protobuf.UInt32Value",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
);

UInt32Value.prototype.toJson = function toJson(options) {
  return proto3.json.writeScalar(ScalarType.UINT32, this.value, true);
}

UInt32Value.prototype.fromJson = function fromJson(json, options) {
  try {
    this.value = proto3.json.readScalar(ScalarType.UINT32, json);
  } catch (e) {
    let m = `cannot decode message google.protobuf.UInt32Value from JSON"`;
    if (e instanceof Error && e.message.length > 0) {
      m += `: ${e.message}`
    }
    throw new Error(m);
  }
  return this;
};

UInt32Value.fieldWrapper = {
  wrapField(value) {
    return new UInt32Value({value});
  },
  unwrapField(value) {
    return value.value;
  }
};

/**
 * Wrapper message for `bool`.
 *
 * The JSON representation for `BoolValue` is JSON `true` and `false`.
 *
 * @generated from message google.protobuf.BoolValue
 */
export const BoolValue = proto3.makeMessageType(
  "google.protobuf.BoolValue",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

BoolValue.prototype.toJson = function toJson(options) {
  return proto3.json.writeScalar(ScalarType.BOOL, this.value, true);
}

BoolValue.prototype.fromJson = function fromJson(json, options) {
  try {
    this.value = proto3.json.readScalar(ScalarType.BOOL, json);
  } catch (e) {
    let m = `cannot decode message google.protobuf.BoolValue from JSON"`;
    if (e instanceof Error && e.message.length > 0) {
      m += `: ${e.message}`
    }
    throw new Error(m);
  }
  return this;
};

BoolValue.fieldWrapper = {
  wrapField(value) {
    return new BoolValue({value});
  },
  unwrapField(value) {
    return value.value;
  }
};

/**
 * Wrapper message for `string`.
 *
 * The JSON representation for `StringValue` is JSON string.
 *
 * @generated from message google.protobuf.StringValue
 */
export const StringValue = proto3.makeMessageType(
  "google.protobuf.StringValue",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

StringValue.prototype.toJson = function toJson(options) {
  return proto3.json.writeScalar(ScalarType.STRING, this.value, true);
}

StringValue.prototype.fromJson = function fromJson(json, options) {
  try {
    this.value = proto3.json.readScalar(ScalarType.STRING, json);
  } catch (e) {
    let m = `cannot decode message google.protobuf.StringValue from JSON"`;
    if (e instanceof Error && e.message.length > 0) {
      m += `: ${e.message}`
    }
    throw new Error(m);
  }
  return this;
};

StringValue.fieldWrapper = {
  wrapField(value) {
    return new StringValue({value});
  },
  unwrapField(value) {
    return value.value;
  }
};

/**
 * Wrapper message for `bytes`.
 *
 * The JSON representation for `BytesValue` is JSON string.
 *
 * @generated from message google.protobuf.BytesValue
 */
export const BytesValue = proto3.makeMessageType(
  "google.protobuf.BytesValue",
  () => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

BytesValue.prototype.toJson = function toJson(options) {
  return proto3.json.writeScalar(ScalarType.BYTES, this.value, true);
}

BytesValue.prototype.fromJson = function fromJson(json, options) {
  try {
    this.value = proto3.json.readScalar(ScalarType.BYTES, json);
  } catch (e) {
    let m = `cannot decode message google.protobuf.BytesValue from JSON"`;
    if (e instanceof Error && e.message.length > 0) {
      m += `: ${e.message}`
    }
    throw new Error(m);
  }
  return this;
};

BytesValue.fieldWrapper = {
  wrapField(value) {
    return new BytesValue({value});
  },
  unwrapField(value) {
    return value.value;
  }
};

