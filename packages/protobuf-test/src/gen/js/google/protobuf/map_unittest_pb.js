// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.4.2 with parameter "ts_nocheck=false,target=js+dts"
// @generated from file google/protobuf/map_unittest.proto (package protobuf_unittest, syntax proto3)
/* eslint-disable */

// We don't put this in a package within proto2 because we need to make sure
// that the generated code doesn't depend on being in the proto2 namespace.
// In map_test_util.h we do "using namespace unittest = protobuf_unittest".

import { proto3 } from "@bufbuild/protobuf";
import { ForeignMessage, TestAllTypes, TestRequired } from "./unittest_pb.js";

/**
 * @generated from enum protobuf_unittest.MapEnum
 */
export const MapEnum = proto3.makeEnum(
  "protobuf_unittest.MapEnum",
  [
    {no: 0, name: "MAP_ENUM_FOO", localName: "FOO"},
    {no: 1, name: "MAP_ENUM_BAR", localName: "BAR"},
    {no: 2, name: "MAP_ENUM_BAZ", localName: "BAZ"},
  ],
);

/**
 * Tests maps.
 *
 * @generated from message protobuf_unittest.TestMap
 */
export const TestMap = proto3.makeMessageType(
  "protobuf_unittest.TestMap",
  () => [
    { no: 1, name: "map_int32_int32", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
    { no: 2, name: "map_int64_int64", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "scalar", T: 3 /* ScalarType.INT64 */} },
    { no: 3, name: "map_uint32_uint32", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "scalar", T: 13 /* ScalarType.UINT32 */} },
    { no: 4, name: "map_uint64_uint64", kind: "map", K: 4 /* ScalarType.UINT64 */, V: {kind: "scalar", T: 4 /* ScalarType.UINT64 */} },
    { no: 5, name: "map_sint32_sint32", kind: "map", K: 17 /* ScalarType.SINT32 */, V: {kind: "scalar", T: 17 /* ScalarType.SINT32 */} },
    { no: 6, name: "map_sint64_sint64", kind: "map", K: 18 /* ScalarType.SINT64 */, V: {kind: "scalar", T: 18 /* ScalarType.SINT64 */} },
    { no: 7, name: "map_fixed32_fixed32", kind: "map", K: 7 /* ScalarType.FIXED32 */, V: {kind: "scalar", T: 7 /* ScalarType.FIXED32 */} },
    { no: 8, name: "map_fixed64_fixed64", kind: "map", K: 6 /* ScalarType.FIXED64 */, V: {kind: "scalar", T: 6 /* ScalarType.FIXED64 */} },
    { no: 9, name: "map_sfixed32_sfixed32", kind: "map", K: 15 /* ScalarType.SFIXED32 */, V: {kind: "scalar", T: 15 /* ScalarType.SFIXED32 */} },
    { no: 10, name: "map_sfixed64_sfixed64", kind: "map", K: 16 /* ScalarType.SFIXED64 */, V: {kind: "scalar", T: 16 /* ScalarType.SFIXED64 */} },
    { no: 11, name: "map_int32_float", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 2 /* ScalarType.FLOAT */} },
    { no: 12, name: "map_int32_double", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
    { no: 13, name: "map_bool_bool", kind: "map", K: 8 /* ScalarType.BOOL */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
    { no: 14, name: "map_string_string", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 15, name: "map_int32_bytes", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 16, name: "map_int32_enum", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "enum", T: proto3.getEnumType(MapEnum)} },
    { no: 17, name: "map_int32_foreign_message", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: ForeignMessage} },
    { no: 18, name: "map_string_foreign_message", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ForeignMessage} },
    { no: 19, name: "map_int32_all_types", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: TestAllTypes} },
  ],
);

/**
 * @generated from message protobuf_unittest.TestMapSubmessage
 */
export const TestMapSubmessage = proto3.makeMessageType(
  "protobuf_unittest.TestMapSubmessage",
  () => [
    { no: 1, name: "test_map", kind: "message", T: TestMap },
  ],
);

/**
 * @generated from message protobuf_unittest.TestMessageMap
 */
export const TestMessageMap = proto3.makeMessageType(
  "protobuf_unittest.TestMessageMap",
  () => [
    { no: 1, name: "map_int32_message", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: TestAllTypes} },
  ],
);

/**
 * Two map fields share the same entry default instance.
 *
 * @generated from message protobuf_unittest.TestSameTypeMap
 */
export const TestSameTypeMap = proto3.makeMessageType(
  "protobuf_unittest.TestSameTypeMap",
  () => [
    { no: 1, name: "map1", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
    { no: 2, name: "map2", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
  ],
);

/**
 * Test embedded message with required fields
 *
 * @generated from message protobuf_unittest.TestRequiredMessageMap
 */
export const TestRequiredMessageMap = proto3.makeMessageType(
  "protobuf_unittest.TestRequiredMessageMap",
  () => [
    { no: 1, name: "map_field", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: TestRequired} },
  ],
);

/**
 * @generated from message protobuf_unittest.TestArenaMap
 */
export const TestArenaMap = proto3.makeMessageType(
  "protobuf_unittest.TestArenaMap",
  () => [
    { no: 1, name: "map_int32_int32", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
    { no: 2, name: "map_int64_int64", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "scalar", T: 3 /* ScalarType.INT64 */} },
    { no: 3, name: "map_uint32_uint32", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "scalar", T: 13 /* ScalarType.UINT32 */} },
    { no: 4, name: "map_uint64_uint64", kind: "map", K: 4 /* ScalarType.UINT64 */, V: {kind: "scalar", T: 4 /* ScalarType.UINT64 */} },
    { no: 5, name: "map_sint32_sint32", kind: "map", K: 17 /* ScalarType.SINT32 */, V: {kind: "scalar", T: 17 /* ScalarType.SINT32 */} },
    { no: 6, name: "map_sint64_sint64", kind: "map", K: 18 /* ScalarType.SINT64 */, V: {kind: "scalar", T: 18 /* ScalarType.SINT64 */} },
    { no: 7, name: "map_fixed32_fixed32", kind: "map", K: 7 /* ScalarType.FIXED32 */, V: {kind: "scalar", T: 7 /* ScalarType.FIXED32 */} },
    { no: 8, name: "map_fixed64_fixed64", kind: "map", K: 6 /* ScalarType.FIXED64 */, V: {kind: "scalar", T: 6 /* ScalarType.FIXED64 */} },
    { no: 9, name: "map_sfixed32_sfixed32", kind: "map", K: 15 /* ScalarType.SFIXED32 */, V: {kind: "scalar", T: 15 /* ScalarType.SFIXED32 */} },
    { no: 10, name: "map_sfixed64_sfixed64", kind: "map", K: 16 /* ScalarType.SFIXED64 */, V: {kind: "scalar", T: 16 /* ScalarType.SFIXED64 */} },
    { no: 11, name: "map_int32_float", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 2 /* ScalarType.FLOAT */} },
    { no: 12, name: "map_int32_double", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
    { no: 13, name: "map_bool_bool", kind: "map", K: 8 /* ScalarType.BOOL */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
    { no: 14, name: "map_string_string", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 15, name: "map_int32_bytes", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 16, name: "map_int32_enum", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "enum", T: proto3.getEnumType(MapEnum)} },
    { no: 17, name: "map_int32_foreign_message", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "message", T: ForeignMessage} },
  ],
);

/**
 * Previously, message containing enum called Type cannot be used as value of
 * map field.
 *
 * @generated from message protobuf_unittest.MessageContainingEnumCalledType
 */
export const MessageContainingEnumCalledType = proto3.makeMessageType(
  "protobuf_unittest.MessageContainingEnumCalledType",
  () => [
    { no: 1, name: "type", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: MessageContainingEnumCalledType} },
  ],
);

/**
 * @generated from enum protobuf_unittest.MessageContainingEnumCalledType.Type
 */
export const MessageContainingEnumCalledType_Type = proto3.makeEnum(
  "protobuf_unittest.MessageContainingEnumCalledType.Type",
  [
    {no: 0, name: "TYPE_FOO", localName: "FOO"},
  ],
);

/**
 * Previously, message cannot contain map field called "entry".
 *
 * @generated from message protobuf_unittest.MessageContainingMapCalledEntry
 */
export const MessageContainingMapCalledEntry = proto3.makeMessageType(
  "protobuf_unittest.MessageContainingMapCalledEntry",
  () => [
    { no: 1, name: "entry", kind: "map", K: 5 /* ScalarType.INT32 */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
  ],
);

/**
 * @generated from message protobuf_unittest.TestRecursiveMapMessage
 */
export const TestRecursiveMapMessage = proto3.makeMessageType(
  "protobuf_unittest.TestRecursiveMapMessage",
  () => [
    { no: 1, name: "a", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TestRecursiveMapMessage} },
  ],
);

