// Copyright 2021-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// LINT: ALLOW_GROUPS

// @generated by protoc-gen-es v2.10.0 with parameter "target=js+dts,import_extension=js"
// @generated from file google/protobuf/test_messages_proto2.proto (package protobuf_test_messages.proto2, syntax proto2)
/* eslint-disable */

import { enumDesc, extDesc, fileDesc, messageDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";

/**
 * Describes the file google/protobuf/test_messages_proto2.proto.
 */
export const file_google_protobuf_test_messages_proto2 = /*@__PURE__*/
  fileDesc("");

/**
 * Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.
 * Use `create(TestAllTypesProto2Schema)` to create a new message.
 */
export const TestAllTypesProto2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 0);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage.
 * Use `create(TestAllTypesProto2_NestedMessageSchema)` to create a new message.
 */
export const TestAllTypesProto2_NestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 0, 0);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.Data.
 * Use `create(TestAllTypesProto2_DataSchema)` to create a new message.
 */
export const TestAllTypesProto2_DataSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 0, 1);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.MultiWordGroupField.
 * Use `create(TestAllTypesProto2_MultiWordGroupFieldSchema)` to create a new message.
 */
export const TestAllTypesProto2_MultiWordGroupFieldSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 0, 2);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect.
 * Use `create(TestAllTypesProto2_MessageSetCorrectSchema)` to create a new message.
 */
export const TestAllTypesProto2_MessageSetCorrectSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 0, 3);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1.
 * Use `create(TestAllTypesProto2_MessageSetCorrectExtension1Schema)` to create a new message.
 */
export const TestAllTypesProto2_MessageSetCorrectExtension1Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 0, 4);

/**
 * @generated from extension: optional protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1 message_set_extension = 1547769;
 */
export const TestAllTypesProto2_MessageSetCorrectExtension1_message_set_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_test_messages_proto2, 0, 4, 0);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2.
 * Use `create(TestAllTypesProto2_MessageSetCorrectExtension2Schema)` to create a new message.
 */
export const TestAllTypesProto2_MessageSetCorrectExtension2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 0, 5);

/**
 * @generated from extension: optional protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2 message_set_extension = 4135312;
 */
export const TestAllTypesProto2_MessageSetCorrectExtension2_message_set_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_test_messages_proto2, 0, 5, 0);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.ExtensionWithOneof.
 * Use `create(TestAllTypesProto2_ExtensionWithOneofSchema)` to create a new message.
 */
export const TestAllTypesProto2_ExtensionWithOneofSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 0, 6);

/**
 * @generated from extension: optional protobuf_test_messages.proto2.TestAllTypesProto2.ExtensionWithOneof extension_with_oneof = 123456789;
 */
export const TestAllTypesProto2_ExtensionWithOneof_extension_with_oneof = /*@__PURE__*/
  extDesc(file_google_protobuf_test_messages_proto2, 0, 6, 0);

/**
 * Describes the enum protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum.
 */
export const TestAllTypesProto2_NestedEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_test_messages_proto2, 0, 0);

/**
 * @generated from enum protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum
 */
export const TestAllTypesProto2_NestedEnum = /*@__PURE__*/
  tsEnum(TestAllTypesProto2_NestedEnumSchema);

/**
 * Describes the message protobuf_test_messages.proto2.ForeignMessageProto2.
 * Use `create(ForeignMessageProto2Schema)` to create a new message.
 */
export const ForeignMessageProto2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 1);

/**
 * Describes the message protobuf_test_messages.proto2.GroupField.
 * Use `create(GroupFieldSchema)` to create a new message.
 */
export const GroupFieldSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 2);

/**
 * Describes the message protobuf_test_messages.proto2.UnknownToTestAllTypes.
 * Use `create(UnknownToTestAllTypesSchema)` to create a new message.
 */
export const UnknownToTestAllTypesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 3);

/**
 * Describes the message protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup.
 * Use `create(UnknownToTestAllTypes_OptionalGroupSchema)` to create a new message.
 */
export const UnknownToTestAllTypes_OptionalGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 3, 0);

/**
 * Describes the message protobuf_test_messages.proto2.NullHypothesisProto2.
 * Use `create(NullHypothesisProto2Schema)` to create a new message.
 */
export const NullHypothesisProto2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 4);

/**
 * Describes the message protobuf_test_messages.proto2.EnumOnlyProto2.
 * Use `create(EnumOnlyProto2Schema)` to create a new message.
 */
export const EnumOnlyProto2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 5);

/**
 * Describes the enum protobuf_test_messages.proto2.EnumOnlyProto2.Bool.
 */
export const EnumOnlyProto2_BoolSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_test_messages_proto2, 5, 0);

/**
 * @generated from enum protobuf_test_messages.proto2.EnumOnlyProto2.Bool
 */
export const EnumOnlyProto2_Bool = /*@__PURE__*/
  tsEnum(EnumOnlyProto2_BoolSchema);

/**
 * Describes the message protobuf_test_messages.proto2.OneStringProto2.
 * Use `create(OneStringProto2Schema)` to create a new message.
 */
export const OneStringProto2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 6);

/**
 * Describes the message protobuf_test_messages.proto2.ProtoWithKeywords.
 * Use `create(ProtoWithKeywordsSchema)` to create a new message.
 */
export const ProtoWithKeywordsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 7);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.
 * Use `create(TestAllRequiredTypesProto2Schema)` to create a new message.
 */
export const TestAllRequiredTypesProto2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 8);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.NestedMessage.
 * Use `create(TestAllRequiredTypesProto2_NestedMessageSchema)` to create a new message.
 */
export const TestAllRequiredTypesProto2_NestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 8, 0);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.Data.
 * Use `create(TestAllRequiredTypesProto2_DataSchema)` to create a new message.
 */
export const TestAllRequiredTypesProto2_DataSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 8, 1);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.MessageSetCorrect.
 * Use `create(TestAllRequiredTypesProto2_MessageSetCorrectSchema)` to create a new message.
 */
export const TestAllRequiredTypesProto2_MessageSetCorrectSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 8, 2);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.MessageSetCorrectExtension1.
 * Use `create(TestAllRequiredTypesProto2_MessageSetCorrectExtension1Schema)` to create a new message.
 */
export const TestAllRequiredTypesProto2_MessageSetCorrectExtension1Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 8, 3);

/**
 * @generated from extension: optional protobuf_test_messages.proto2.TestAllRequiredTypesProto2.MessageSetCorrectExtension1 message_set_extension = 1547769;
 */
export const TestAllRequiredTypesProto2_MessageSetCorrectExtension1_message_set_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_test_messages_proto2, 8, 3, 0);

/**
 * Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.MessageSetCorrectExtension2.
 * Use `create(TestAllRequiredTypesProto2_MessageSetCorrectExtension2Schema)` to create a new message.
 */
export const TestAllRequiredTypesProto2_MessageSetCorrectExtension2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 8, 4);

/**
 * @generated from extension: optional protobuf_test_messages.proto2.TestAllRequiredTypesProto2.MessageSetCorrectExtension2 message_set_extension = 4135312;
 */
export const TestAllRequiredTypesProto2_MessageSetCorrectExtension2_message_set_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_test_messages_proto2, 8, 4, 0);

/**
 * Describes the enum protobuf_test_messages.proto2.TestAllRequiredTypesProto2.NestedEnum.
 */
export const TestAllRequiredTypesProto2_NestedEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_test_messages_proto2, 8, 0);

/**
 * @generated from enum protobuf_test_messages.proto2.TestAllRequiredTypesProto2.NestedEnum
 */
export const TestAllRequiredTypesProto2_NestedEnum = /*@__PURE__*/
  tsEnum(TestAllRequiredTypesProto2_NestedEnumSchema);

/**
 * Describes the message protobuf_test_messages.proto2.TestLargeOneof.
 * Use `create(TestLargeOneofSchema)` to create a new message.
 */
export const TestLargeOneofSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 9);

/**
 * Describes the message protobuf_test_messages.proto2.TestLargeOneof.A1.
 * Use `create(TestLargeOneof_A1Schema)` to create a new message.
 */
export const TestLargeOneof_A1Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 9, 0);

/**
 * Describes the message protobuf_test_messages.proto2.TestLargeOneof.A2.
 * Use `create(TestLargeOneof_A2Schema)` to create a new message.
 */
export const TestLargeOneof_A2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 9, 1);

/**
 * Describes the message protobuf_test_messages.proto2.TestLargeOneof.A3.
 * Use `create(TestLargeOneof_A3Schema)` to create a new message.
 */
export const TestLargeOneof_A3Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 9, 2);

/**
 * Describes the message protobuf_test_messages.proto2.TestLargeOneof.A4.
 * Use `create(TestLargeOneof_A4Schema)` to create a new message.
 */
export const TestLargeOneof_A4Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 9, 3);

/**
 * Describes the message protobuf_test_messages.proto2.TestLargeOneof.A5.
 * Use `create(TestLargeOneof_A5Schema)` to create a new message.
 */
export const TestLargeOneof_A5Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_test_messages_proto2, 9, 4);

/**
 * Describes the enum protobuf_test_messages.proto2.ForeignEnumProto2.
 */
export const ForeignEnumProto2Schema = /*@__PURE__*/
  enumDesc(file_google_protobuf_test_messages_proto2, 0);

/**
 * @generated from enum protobuf_test_messages.proto2.ForeignEnumProto2
 */
export const ForeignEnumProto2 = /*@__PURE__*/
  tsEnum(ForeignEnumProto2Schema);

/**
 * @generated from extension: optional int32 extension_int32 = 120;
 */
export const extension_int32 = /*@__PURE__*/
  extDesc(file_google_protobuf_test_messages_proto2, 0);

/**
 * @generated from extension: optional protobuf_test_messages.proto2.GroupField groupfield = 121;
 */
export const groupfield = /*@__PURE__*/
  extDesc(file_google_protobuf_test_messages_proto2, 1);

