// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file we will use for unit testing.
//
// LINT: ALLOW_GROUPS, LEGACY_NAMES

// @generated by protoc-gen-es v1.8.0 with parameter "ts_nocheck=false,target=js+dts"
// @generated from file google/protobuf/unittest.proto (package protobuf_unittest, syntax proto2)
/* eslint-disable */

// We don't put this in a package within proto2 because we need to make sure
// that the generated code doesn't depend on being in the proto2 namespace.
// In test_util.h we do "using namespace unittest = protobuf_unittest".

import { enumDesc, extDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv1";
import { fileDesc_google_protobuf_unittest_import } from "./unittest_import_pb.js";

export const fileDesc_google_protobuf_unittest = /*@__PURE__*/
  fileDesc("", [fileDesc_google_protobuf_unittest_import]);

// Describes the message protobuf_unittest.TestAllTypes. Use `create(TestAllTypesDesc)` to create a new TestAllTypes.
export const TestAllTypesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 0);

// Describes the message protobuf_unittest.TestAllTypes.NestedMessage. Use `create(TestAllTypes_NestedMessageDesc)` to create a new TestAllTypes_NestedMessage.
export const TestAllTypes_NestedMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 0, 0);

// Describes the message protobuf_unittest.TestAllTypes.OptionalGroup. Use `create(TestAllTypes_OptionalGroupDesc)` to create a new TestAllTypes_OptionalGroup.
export const TestAllTypes_OptionalGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 0, 1);

// Describes the message protobuf_unittest.TestAllTypes.RepeatedGroup. Use `create(TestAllTypes_RepeatedGroupDesc)` to create a new TestAllTypes_RepeatedGroup.
export const TestAllTypes_RepeatedGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 0, 2);

// Describes the enum protobuf_unittest.TestAllTypes.NestedEnum.
export const TestAllTypes_NestedEnumDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 0, 0);

/**
 * @generated from enum protobuf_unittest.TestAllTypes.NestedEnum
 */
export const TestAllTypes_NestedEnum = /*@__PURE__*/
  tsEnum(TestAllTypes_NestedEnumDesc);

// Describes the message protobuf_unittest.NestedTestAllTypes. Use `create(NestedTestAllTypesDesc)` to create a new NestedTestAllTypes.
export const NestedTestAllTypesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 1);

// Describes the message protobuf_unittest.TestDeprecatedFields. Use `create(TestDeprecatedFieldsDesc)` to create a new TestDeprecatedFields.
export const TestDeprecatedFieldsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 2);

// Describes the message protobuf_unittest.TestDeprecatedMessage. Use `create(TestDeprecatedMessageDesc)` to create a new TestDeprecatedMessage.
export const TestDeprecatedMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 3);

// Describes the message protobuf_unittest.ForeignMessage. Use `create(ForeignMessageDesc)` to create a new ForeignMessage.
export const ForeignMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 4);

// Describes the message protobuf_unittest.TestReservedFields. Use `create(TestReservedFieldsDesc)` to create a new TestReservedFields.
export const TestReservedFieldsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 5);

// Describes the message protobuf_unittest.TestAllExtensions. Use `create(TestAllExtensionsDesc)` to create a new TestAllExtensions.
export const TestAllExtensionsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 6);

// Describes the message protobuf_unittest.OptionalGroup_extension. Use `create(OptionalGroup_extensionDesc)` to create a new OptionalGroup_extension.
export const OptionalGroup_extensionDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 7);

// Describes the message protobuf_unittest.RepeatedGroup_extension. Use `create(RepeatedGroup_extensionDesc)` to create a new RepeatedGroup_extension.
export const RepeatedGroup_extensionDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 8);

// Describes the message protobuf_unittest.TestMixedFieldsAndExtensions. Use `create(TestMixedFieldsAndExtensionsDesc)` to create a new TestMixedFieldsAndExtensions.
export const TestMixedFieldsAndExtensionsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 9);

/**
 * @generated from extension: optional int32 c = 2;
 */
export const TestMixedFieldsAndExtensions_c = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 9, 0);

/**
 * @generated from extension: repeated fixed32 d = 4;
 */
export const TestMixedFieldsAndExtensions_d = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 9, 1);

// Describes the message protobuf_unittest.TestGroup. Use `create(TestGroupDesc)` to create a new TestGroup.
export const TestGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 10);

// Describes the message protobuf_unittest.TestGroup.OptionalGroup. Use `create(TestGroup_OptionalGroupDesc)` to create a new TestGroup_OptionalGroup.
export const TestGroup_OptionalGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 10, 0);

// Describes the message protobuf_unittest.TestGroupExtension. Use `create(TestGroupExtensionDesc)` to create a new TestGroupExtension.
export const TestGroupExtensionDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 11);

// Describes the message protobuf_unittest.TestNestedExtension. Use `create(TestNestedExtensionDesc)` to create a new TestNestedExtension.
export const TestNestedExtensionDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 12);

// Describes the message protobuf_unittest.TestNestedExtension.OptionalGroup_extension. Use `create(TestNestedExtension_OptionalGroup_extensionDesc)` to create a new TestNestedExtension_OptionalGroup_extension.
export const TestNestedExtension_OptionalGroup_extensionDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 12, 0);

/**
 * Check for bug where string extensions declared in tested scope did not
 * compile.
 *
 * @generated from extension: optional string test = 1002 [default = "test"];
 */
export const TestNestedExtension_test = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 12, 0);

/**
 * Used to test if generated extension name is correct when there are
 * underscores.
 *
 * @generated from extension: optional string nested_string_extension = 1003;
 */
export const TestNestedExtension_nested_string_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 12, 1);

/**
 * @generated from extension: optional protobuf_unittest.TestNestedExtension.OptionalGroup_extension optionalgroup_extension = 16;
 */
export const TestNestedExtension_optionalgroup_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 12, 2);

/**
 * @generated from extension: optional protobuf_unittest.ForeignEnum optional_foreign_enum_extension = 22;
 */
export const TestNestedExtension_optional_foreign_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 12, 3);

// Describes the message protobuf_unittest.TestChildExtension. Use `create(TestChildExtensionDesc)` to create a new TestChildExtension.
export const TestChildExtensionDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 13);

// Describes the message protobuf_unittest.TestChildExtensionData. Use `create(TestChildExtensionDataDesc)` to create a new TestChildExtensionData.
export const TestChildExtensionDataDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 14);

// Describes the message protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData. Use `create(TestChildExtensionData_NestedTestAllExtensionsDataDesc)` to create a new TestChildExtensionData_NestedTestAllExtensionsData.
export const TestChildExtensionData_NestedTestAllExtensionsDataDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 14, 0);

// Describes the message protobuf_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions. Use `create(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensionsDesc)` to create a new TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensions.
export const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensionsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 14, 0, 0);

// Describes the message protobuf_unittest.TestNestedChildExtension. Use `create(TestNestedChildExtensionDesc)` to create a new TestNestedChildExtension.
export const TestNestedChildExtensionDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 15);

// Describes the message protobuf_unittest.TestNestedChildExtensionData. Use `create(TestNestedChildExtensionDataDesc)` to create a new TestNestedChildExtensionData.
export const TestNestedChildExtensionDataDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 16);

// Describes the message protobuf_unittest.TestRequiredEnum. Use `create(TestRequiredEnumDesc)` to create a new TestRequiredEnum.
export const TestRequiredEnumDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 17);

// Describes the message protobuf_unittest.TestRequiredEnumNoMask. Use `create(TestRequiredEnumNoMaskDesc)` to create a new TestRequiredEnumNoMask.
export const TestRequiredEnumNoMaskDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 18);

// Describes the enum protobuf_unittest.TestRequiredEnumNoMask.NestedEnum.
export const TestRequiredEnumNoMask_NestedEnumDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 18, 0);

/**
 * @generated from enum protobuf_unittest.TestRequiredEnumNoMask.NestedEnum
 */
export const TestRequiredEnumNoMask_NestedEnum = /*@__PURE__*/
  tsEnum(TestRequiredEnumNoMask_NestedEnumDesc);

// Describes the message protobuf_unittest.TestRequiredEnumMulti. Use `create(TestRequiredEnumMultiDesc)` to create a new TestRequiredEnumMulti.
export const TestRequiredEnumMultiDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 19);

// Describes the enum protobuf_unittest.TestRequiredEnumMulti.NestedEnum.
export const TestRequiredEnumMulti_NestedEnumDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 19, 0);

/**
 * @generated from enum protobuf_unittest.TestRequiredEnumMulti.NestedEnum
 */
export const TestRequiredEnumMulti_NestedEnum = /*@__PURE__*/
  tsEnum(TestRequiredEnumMulti_NestedEnumDesc);

// Describes the message protobuf_unittest.TestRequiredNoMaskMulti. Use `create(TestRequiredNoMaskMultiDesc)` to create a new TestRequiredNoMaskMulti.
export const TestRequiredNoMaskMultiDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 20);

// Describes the enum protobuf_unittest.TestRequiredNoMaskMulti.NestedEnum.
export const TestRequiredNoMaskMulti_NestedEnumDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 20, 0);

/**
 * @generated from enum protobuf_unittest.TestRequiredNoMaskMulti.NestedEnum
 */
export const TestRequiredNoMaskMulti_NestedEnum = /*@__PURE__*/
  tsEnum(TestRequiredNoMaskMulti_NestedEnumDesc);

// Describes the message protobuf_unittest.TestRequired. Use `create(TestRequiredDesc)` to create a new TestRequired.
export const TestRequiredDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 21);

/**
 * @generated from extension: optional protobuf_unittest.TestRequired single = 1000;
 */
export const TestRequired_single = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 21, 0);

/**
 * @generated from extension: repeated protobuf_unittest.TestRequired multi = 1001;
 */
export const TestRequired_multi = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 21, 1);

// Describes the message protobuf_unittest.TestRequiredForeign. Use `create(TestRequiredForeignDesc)` to create a new TestRequiredForeign.
export const TestRequiredForeignDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 22);

// Describes the message protobuf_unittest.TestRequiredMessage. Use `create(TestRequiredMessageDesc)` to create a new TestRequiredMessage.
export const TestRequiredMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 23);

// Describes the message protobuf_unittest.TestNestedRequiredForeign. Use `create(TestNestedRequiredForeignDesc)` to create a new TestNestedRequiredForeign.
export const TestNestedRequiredForeignDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 24);

// Describes the message protobuf_unittest.TestForeignNested. Use `create(TestForeignNestedDesc)` to create a new TestForeignNested.
export const TestForeignNestedDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 25);

// Describes the message protobuf_unittest.TestEmptyMessage. Use `create(TestEmptyMessageDesc)` to create a new TestEmptyMessage.
export const TestEmptyMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 26);

// Describes the message protobuf_unittest.TestEmptyMessageWithExtensions. Use `create(TestEmptyMessageWithExtensionsDesc)` to create a new TestEmptyMessageWithExtensions.
export const TestEmptyMessageWithExtensionsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 27);

// Describes the message protobuf_unittest.TestPickleNestedMessage. Use `create(TestPickleNestedMessageDesc)` to create a new TestPickleNestedMessage.
export const TestPickleNestedMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 28);

// Describes the message protobuf_unittest.TestPickleNestedMessage.NestedMessage. Use `create(TestPickleNestedMessage_NestedMessageDesc)` to create a new TestPickleNestedMessage_NestedMessage.
export const TestPickleNestedMessage_NestedMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 28, 0);

// Describes the message protobuf_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage. Use `create(TestPickleNestedMessage_NestedMessage_NestedNestedMessageDesc)` to create a new TestPickleNestedMessage_NestedMessage_NestedNestedMessage.
export const TestPickleNestedMessage_NestedMessage_NestedNestedMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 28, 0, 0);

// Describes the message protobuf_unittest.TestMultipleExtensionRanges. Use `create(TestMultipleExtensionRangesDesc)` to create a new TestMultipleExtensionRanges.
export const TestMultipleExtensionRangesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 29);

// Describes the message protobuf_unittest.TestReallyLargeTagNumber. Use `create(TestReallyLargeTagNumberDesc)` to create a new TestReallyLargeTagNumber.
export const TestReallyLargeTagNumberDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 30);

// Describes the message protobuf_unittest.TestRecursiveMessage. Use `create(TestRecursiveMessageDesc)` to create a new TestRecursiveMessage.
export const TestRecursiveMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 31);

// Describes the message protobuf_unittest.TestMutualRecursionA. Use `create(TestMutualRecursionADesc)` to create a new TestMutualRecursionA.
export const TestMutualRecursionADesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 32);

// Describes the message protobuf_unittest.TestMutualRecursionA.SubMessage. Use `create(TestMutualRecursionA_SubMessageDesc)` to create a new TestMutualRecursionA_SubMessage.
export const TestMutualRecursionA_SubMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 32, 0);

// Describes the message protobuf_unittest.TestMutualRecursionA.SubGroup. Use `create(TestMutualRecursionA_SubGroupDesc)` to create a new TestMutualRecursionA_SubGroup.
export const TestMutualRecursionA_SubGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 32, 1);

// Describes the message protobuf_unittest.TestMutualRecursionA.SubGroupR. Use `create(TestMutualRecursionA_SubGroupRDesc)` to create a new TestMutualRecursionA_SubGroupR.
export const TestMutualRecursionA_SubGroupRDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 32, 2);

// Describes the message protobuf_unittest.TestMutualRecursionB. Use `create(TestMutualRecursionBDesc)` to create a new TestMutualRecursionB.
export const TestMutualRecursionBDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 33);

// Describes the message protobuf_unittest.TestIsInitialized. Use `create(TestIsInitializedDesc)` to create a new TestIsInitialized.
export const TestIsInitializedDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 34);

// Describes the message protobuf_unittest.TestIsInitialized.SubMessage. Use `create(TestIsInitialized_SubMessageDesc)` to create a new TestIsInitialized_SubMessage.
export const TestIsInitialized_SubMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 34, 0);

// Describes the message protobuf_unittest.TestIsInitialized.SubMessage.SubGroup. Use `create(TestIsInitialized_SubMessage_SubGroupDesc)` to create a new TestIsInitialized_SubMessage_SubGroup.
export const TestIsInitialized_SubMessage_SubGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 34, 0, 0);

// Describes the message protobuf_unittest.TestDupFieldNumber. Use `create(TestDupFieldNumberDesc)` to create a new TestDupFieldNumber.
export const TestDupFieldNumberDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 35);

// Describes the message protobuf_unittest.TestDupFieldNumber.Foo. Use `create(TestDupFieldNumber_FooDesc)` to create a new TestDupFieldNumber_Foo.
export const TestDupFieldNumber_FooDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 35, 0);

// Describes the message protobuf_unittest.TestDupFieldNumber.Bar. Use `create(TestDupFieldNumber_BarDesc)` to create a new TestDupFieldNumber_Bar.
export const TestDupFieldNumber_BarDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 35, 1);

// Describes the message protobuf_unittest.TestEagerMessage. Use `create(TestEagerMessageDesc)` to create a new TestEagerMessage.
export const TestEagerMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 36);

// Describes the message protobuf_unittest.TestLazyMessage. Use `create(TestLazyMessageDesc)` to create a new TestLazyMessage.
export const TestLazyMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 37);

// Describes the message protobuf_unittest.TestLazyMessageRepeated. Use `create(TestLazyMessageRepeatedDesc)` to create a new TestLazyMessageRepeated.
export const TestLazyMessageRepeatedDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 38);

// Describes the message protobuf_unittest.TestEagerMaybeLazy. Use `create(TestEagerMaybeLazyDesc)` to create a new TestEagerMaybeLazy.
export const TestEagerMaybeLazyDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 39);

// Describes the message protobuf_unittest.TestEagerMaybeLazy.NestedMessage. Use `create(TestEagerMaybeLazy_NestedMessageDesc)` to create a new TestEagerMaybeLazy_NestedMessage.
export const TestEagerMaybeLazy_NestedMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 39, 0);

// Describes the message protobuf_unittest.TestNestedMessageHasBits. Use `create(TestNestedMessageHasBitsDesc)` to create a new TestNestedMessageHasBits.
export const TestNestedMessageHasBitsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 40);

// Describes the message protobuf_unittest.TestNestedMessageHasBits.NestedMessage. Use `create(TestNestedMessageHasBits_NestedMessageDesc)` to create a new TestNestedMessageHasBits_NestedMessage.
export const TestNestedMessageHasBits_NestedMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 40, 0);

// Describes the message protobuf_unittest.TestCamelCaseFieldNames. Use `create(TestCamelCaseFieldNamesDesc)` to create a new TestCamelCaseFieldNames.
export const TestCamelCaseFieldNamesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 41);

// Describes the message protobuf_unittest.TestFieldOrderings. Use `create(TestFieldOrderingsDesc)` to create a new TestFieldOrderings.
export const TestFieldOrderingsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 42);

// Describes the message protobuf_unittest.TestFieldOrderings.NestedMessage. Use `create(TestFieldOrderings_NestedMessageDesc)` to create a new TestFieldOrderings_NestedMessage.
export const TestFieldOrderings_NestedMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 42, 0);

// Describes the message protobuf_unittest.TestExtensionOrderings1. Use `create(TestExtensionOrderings1Desc)` to create a new TestExtensionOrderings1.
export const TestExtensionOrderings1Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 43);

/**
 * @generated from extension: optional protobuf_unittest.TestExtensionOrderings1 test_ext_orderings1 = 13;
 */
export const TestExtensionOrderings1_test_ext_orderings1 = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 43, 0);

// Describes the message protobuf_unittest.TestExtensionOrderings2. Use `create(TestExtensionOrderings2Desc)` to create a new TestExtensionOrderings2.
export const TestExtensionOrderings2Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 44);

// Describes the message protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3. Use `create(TestExtensionOrderings2_TestExtensionOrderings3Desc)` to create a new TestExtensionOrderings2_TestExtensionOrderings3.
export const TestExtensionOrderings2_TestExtensionOrderings3Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 44, 0);

/**
 * @generated from extension: optional protobuf_unittest.TestExtensionOrderings2.TestExtensionOrderings3 test_ext_orderings3 = 14;
 */
export const TestExtensionOrderings2_TestExtensionOrderings3_test_ext_orderings3 = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 44, 0, 0);

/**
 * @generated from extension: optional protobuf_unittest.TestExtensionOrderings2 test_ext_orderings2 = 12;
 */
export const TestExtensionOrderings2_test_ext_orderings2 = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 44, 0);

// Describes the message protobuf_unittest.TestExtremeDefaultValues. Use `create(TestExtremeDefaultValuesDesc)` to create a new TestExtremeDefaultValues.
export const TestExtremeDefaultValuesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 45);

// Describes the message protobuf_unittest.SparseEnumMessage. Use `create(SparseEnumMessageDesc)` to create a new SparseEnumMessage.
export const SparseEnumMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 46);

// Describes the message protobuf_unittest.OneString. Use `create(OneStringDesc)` to create a new OneString.
export const OneStringDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 47);

// Describes the message protobuf_unittest.MoreString. Use `create(MoreStringDesc)` to create a new MoreString.
export const MoreStringDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 48);

// Describes the message protobuf_unittest.OneBytes. Use `create(OneBytesDesc)` to create a new OneBytes.
export const OneBytesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 49);

// Describes the message protobuf_unittest.MoreBytes. Use `create(MoreBytesDesc)` to create a new MoreBytes.
export const MoreBytesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 50);

// Describes the message protobuf_unittest.ManyOptionalString. Use `create(ManyOptionalStringDesc)` to create a new ManyOptionalString.
export const ManyOptionalStringDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 51);

// Describes the message protobuf_unittest.Int32Message. Use `create(Int32MessageDesc)` to create a new Int32Message.
export const Int32MessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 52);

// Describes the message protobuf_unittest.Uint32Message. Use `create(Uint32MessageDesc)` to create a new Uint32Message.
export const Uint32MessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 53);

// Describes the message protobuf_unittest.Int64Message. Use `create(Int64MessageDesc)` to create a new Int64Message.
export const Int64MessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 54);

// Describes the message protobuf_unittest.Uint64Message. Use `create(Uint64MessageDesc)` to create a new Uint64Message.
export const Uint64MessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 55);

// Describes the message protobuf_unittest.BoolMessage. Use `create(BoolMessageDesc)` to create a new BoolMessage.
export const BoolMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 56);

// Describes the message protobuf_unittest.TestOneof. Use `create(TestOneofDesc)` to create a new TestOneof.
export const TestOneofDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 57);

// Describes the message protobuf_unittest.TestOneof.FooGroup. Use `create(TestOneof_FooGroupDesc)` to create a new TestOneof_FooGroup.
export const TestOneof_FooGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 57, 0);

// Describes the message protobuf_unittest.TestOneofBackwardsCompatible. Use `create(TestOneofBackwardsCompatibleDesc)` to create a new TestOneofBackwardsCompatible.
export const TestOneofBackwardsCompatibleDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 58);

// Describes the message protobuf_unittest.TestOneofBackwardsCompatible.FooGroup. Use `create(TestOneofBackwardsCompatible_FooGroupDesc)` to create a new TestOneofBackwardsCompatible_FooGroup.
export const TestOneofBackwardsCompatible_FooGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 58, 0);

// Describes the message protobuf_unittest.TestOneof2. Use `create(TestOneof2Desc)` to create a new TestOneof2.
export const TestOneof2Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 59);

// Describes the message protobuf_unittest.TestOneof2.FooGroup. Use `create(TestOneof2_FooGroupDesc)` to create a new TestOneof2_FooGroup.
export const TestOneof2_FooGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 59, 0);

// Describes the message protobuf_unittest.TestOneof2.NestedMessage. Use `create(TestOneof2_NestedMessageDesc)` to create a new TestOneof2_NestedMessage.
export const TestOneof2_NestedMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 59, 1);

// Describes the enum protobuf_unittest.TestOneof2.NestedEnum.
export const TestOneof2_NestedEnumDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 59, 0);

/**
 * @generated from enum protobuf_unittest.TestOneof2.NestedEnum
 */
export const TestOneof2_NestedEnum = /*@__PURE__*/
  tsEnum(TestOneof2_NestedEnumDesc);

// Describes the message protobuf_unittest.TestRequiredOneof. Use `create(TestRequiredOneofDesc)` to create a new TestRequiredOneof.
export const TestRequiredOneofDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 60);

// Describes the message protobuf_unittest.TestRequiredOneof.NestedMessage. Use `create(TestRequiredOneof_NestedMessageDesc)` to create a new TestRequiredOneof_NestedMessage.
export const TestRequiredOneof_NestedMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 60, 0);

// Describes the message protobuf_unittest.TestPackedTypes. Use `create(TestPackedTypesDesc)` to create a new TestPackedTypes.
export const TestPackedTypesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 61);

// Describes the message protobuf_unittest.TestUnpackedTypes. Use `create(TestUnpackedTypesDesc)` to create a new TestUnpackedTypes.
export const TestUnpackedTypesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 62);

// Describes the message protobuf_unittest.TestPackedExtensions. Use `create(TestPackedExtensionsDesc)` to create a new TestPackedExtensions.
export const TestPackedExtensionsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 63);

// Describes the message protobuf_unittest.TestUnpackedExtensions. Use `create(TestUnpackedExtensionsDesc)` to create a new TestUnpackedExtensions.
export const TestUnpackedExtensionsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 64);

// Describes the message protobuf_unittest.TestDynamicExtensions. Use `create(TestDynamicExtensionsDesc)` to create a new TestDynamicExtensions.
export const TestDynamicExtensionsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 65);

// Describes the message protobuf_unittest.TestDynamicExtensions.DynamicMessageType. Use `create(TestDynamicExtensions_DynamicMessageTypeDesc)` to create a new TestDynamicExtensions_DynamicMessageType.
export const TestDynamicExtensions_DynamicMessageTypeDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 65, 0);

// Describes the enum protobuf_unittest.TestDynamicExtensions.DynamicEnumType.
export const TestDynamicExtensions_DynamicEnumTypeDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 65, 0);

/**
 * @generated from enum protobuf_unittest.TestDynamicExtensions.DynamicEnumType
 */
export const TestDynamicExtensions_DynamicEnumType = /*@__PURE__*/
  tsEnum(TestDynamicExtensions_DynamicEnumTypeDesc);

// Describes the message protobuf_unittest.TestRepeatedString. Use `create(TestRepeatedStringDesc)` to create a new TestRepeatedString.
export const TestRepeatedStringDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 66);

// Describes the message protobuf_unittest.TestRepeatedScalarDifferentTagSizes. Use `create(TestRepeatedScalarDifferentTagSizesDesc)` to create a new TestRepeatedScalarDifferentTagSizes.
export const TestRepeatedScalarDifferentTagSizesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 67);

// Describes the message protobuf_unittest.TestParsingMerge. Use `create(TestParsingMergeDesc)` to create a new TestParsingMerge.
export const TestParsingMergeDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 68);

// Describes the message protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator. Use `create(TestParsingMerge_RepeatedFieldsGeneratorDesc)` to create a new TestParsingMerge_RepeatedFieldsGenerator.
export const TestParsingMerge_RepeatedFieldsGeneratorDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 68, 0);

// Describes the message protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1. Use `create(TestParsingMerge_RepeatedFieldsGenerator_Group1Desc)` to create a new TestParsingMerge_RepeatedFieldsGenerator_Group1.
export const TestParsingMerge_RepeatedFieldsGenerator_Group1Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 68, 0, 0);

// Describes the message protobuf_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2. Use `create(TestParsingMerge_RepeatedFieldsGenerator_Group2Desc)` to create a new TestParsingMerge_RepeatedFieldsGenerator_Group2.
export const TestParsingMerge_RepeatedFieldsGenerator_Group2Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 68, 0, 1);

// Describes the message protobuf_unittest.TestParsingMerge.OptionalGroup. Use `create(TestParsingMerge_OptionalGroupDesc)` to create a new TestParsingMerge_OptionalGroup.
export const TestParsingMerge_OptionalGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 68, 1);

// Describes the message protobuf_unittest.TestParsingMerge.RepeatedGroup. Use `create(TestParsingMerge_RepeatedGroupDesc)` to create a new TestParsingMerge_RepeatedGroup.
export const TestParsingMerge_RepeatedGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 68, 2);

/**
 * @generated from extension: optional protobuf_unittest.TestAllTypes optional_ext = 1000;
 */
export const TestParsingMerge_optional_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 68, 0);

/**
 * @generated from extension: repeated protobuf_unittest.TestAllTypes repeated_ext = 1001;
 */
export const TestParsingMerge_repeated_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 68, 1);

// Describes the message protobuf_unittest.TestMergeException. Use `create(TestMergeExceptionDesc)` to create a new TestMergeException.
export const TestMergeExceptionDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 69);

// Describes the message protobuf_unittest.TestCommentInjectionMessage. Use `create(TestCommentInjectionMessageDesc)` to create a new TestCommentInjectionMessage.
export const TestCommentInjectionMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 70);

// Describes the message protobuf_unittest.TestMessageSize. Use `create(TestMessageSizeDesc)` to create a new TestMessageSize.
export const TestMessageSizeDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 71);

// Describes the message protobuf_unittest.FooRequest. Use `create(FooRequestDesc)` to create a new FooRequest.
export const FooRequestDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 72);

// Describes the message protobuf_unittest.FooResponse. Use `create(FooResponseDesc)` to create a new FooResponse.
export const FooResponseDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 73);

// Describes the message protobuf_unittest.FooClientMessage. Use `create(FooClientMessageDesc)` to create a new FooClientMessage.
export const FooClientMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 74);

// Describes the message protobuf_unittest.FooServerMessage. Use `create(FooServerMessageDesc)` to create a new FooServerMessage.
export const FooServerMessageDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 75);

// Describes the message protobuf_unittest.BarRequest. Use `create(BarRequestDesc)` to create a new BarRequest.
export const BarRequestDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 76);

// Describes the message protobuf_unittest.BarResponse. Use `create(BarResponseDesc)` to create a new BarResponse.
export const BarResponseDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 77);

// Describes the message protobuf_unittest.TestJsonName. Use `create(TestJsonNameDesc)` to create a new TestJsonName.
export const TestJsonNameDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 78);

// Describes the message protobuf_unittest.TestHugeFieldNumbers. Use `create(TestHugeFieldNumbersDesc)` to create a new TestHugeFieldNumbers.
export const TestHugeFieldNumbersDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 79);

// Describes the message protobuf_unittest.TestHugeFieldNumbers.OptionalGroup. Use `create(TestHugeFieldNumbers_OptionalGroupDesc)` to create a new TestHugeFieldNumbers_OptionalGroup.
export const TestHugeFieldNumbers_OptionalGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 79, 0);

// Describes the message protobuf_unittest.TestExtensionInsideTable. Use `create(TestExtensionInsideTableDesc)` to create a new TestExtensionInsideTable.
export const TestExtensionInsideTableDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 80);

// Describes the message protobuf_unittest.TestNestedGroupExtensionOuter. Use `create(TestNestedGroupExtensionOuterDesc)` to create a new TestNestedGroupExtensionOuter.
export const TestNestedGroupExtensionOuterDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 81);

// Describes the message protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup. Use `create(TestNestedGroupExtensionOuter_Layer1OptionalGroupDesc)` to create a new TestNestedGroupExtensionOuter_Layer1OptionalGroup.
export const TestNestedGroupExtensionOuter_Layer1OptionalGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 81, 0);

// Describes the message protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup. Use `create(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroupDesc)` to create a new TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroup.
export const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 81, 0, 0);

// Describes the message protobuf_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup. Use `create(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroupDesc)` to create a new TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroup.
export const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroupDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 81, 0, 1);

// Describes the message protobuf_unittest.TestNestedGroupExtensionInnerExtension. Use `create(TestNestedGroupExtensionInnerExtensionDesc)` to create a new TestNestedGroupExtensionInnerExtension.
export const TestNestedGroupExtensionInnerExtensionDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 82);

// Describes the message protobuf_unittest.TestExtensionRangeSerialize. Use `create(TestExtensionRangeSerializeDesc)` to create a new TestExtensionRangeSerialize.
export const TestExtensionRangeSerializeDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 83);

/**
 * @generated from extension: optional int32 bar_one = 2;
 */
export const TestExtensionRangeSerialize_bar_one = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 83, 0);

/**
 * @generated from extension: optional int32 bar_two = 4;
 */
export const TestExtensionRangeSerialize_bar_two = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 83, 1);

/**
 * @generated from extension: optional int32 bar_three = 10;
 */
export const TestExtensionRangeSerialize_bar_three = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 83, 2);

/**
 * @generated from extension: optional int32 bar_four = 15;
 */
export const TestExtensionRangeSerialize_bar_four = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 83, 3);

/**
 * @generated from extension: optional int32 bar_five = 19;
 */
export const TestExtensionRangeSerialize_bar_five = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 83, 4);

// Describes the message protobuf_unittest.TestVerifyInt32Simple. Use `create(TestVerifyInt32SimpleDesc)` to create a new TestVerifyInt32Simple.
export const TestVerifyInt32SimpleDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 84);

// Describes the message protobuf_unittest.TestVerifyInt32. Use `create(TestVerifyInt32Desc)` to create a new TestVerifyInt32.
export const TestVerifyInt32Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 85);

// Describes the message protobuf_unittest.TestVerifyMostlyInt32. Use `create(TestVerifyMostlyInt32Desc)` to create a new TestVerifyMostlyInt32.
export const TestVerifyMostlyInt32Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 86);

// Describes the message protobuf_unittest.TestVerifyMostlyInt32BigFieldNumber. Use `create(TestVerifyMostlyInt32BigFieldNumberDesc)` to create a new TestVerifyMostlyInt32BigFieldNumber.
export const TestVerifyMostlyInt32BigFieldNumberDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 87);

// Describes the message protobuf_unittest.TestVerifyUint32Simple. Use `create(TestVerifyUint32SimpleDesc)` to create a new TestVerifyUint32Simple.
export const TestVerifyUint32SimpleDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 88);

// Describes the message protobuf_unittest.TestVerifyUint32. Use `create(TestVerifyUint32Desc)` to create a new TestVerifyUint32.
export const TestVerifyUint32Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 89);

// Describes the message protobuf_unittest.TestVerifyOneUint32. Use `create(TestVerifyOneUint32Desc)` to create a new TestVerifyOneUint32.
export const TestVerifyOneUint32Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 90);

// Describes the message protobuf_unittest.TestVerifyOneInt32BigFieldNumber. Use `create(TestVerifyOneInt32BigFieldNumberDesc)` to create a new TestVerifyOneInt32BigFieldNumber.
export const TestVerifyOneInt32BigFieldNumberDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 91);

// Describes the message protobuf_unittest.TestVerifyInt32BigFieldNumber. Use `create(TestVerifyInt32BigFieldNumberDesc)` to create a new TestVerifyInt32BigFieldNumber.
export const TestVerifyInt32BigFieldNumberDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 92);

// Describes the message protobuf_unittest.TestVerifyUint32BigFieldNumber. Use `create(TestVerifyUint32BigFieldNumberDesc)` to create a new TestVerifyUint32BigFieldNumber.
export const TestVerifyUint32BigFieldNumberDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 93);

// Describes the message protobuf_unittest.TestVerifyBigFieldNumberUint32. Use `create(TestVerifyBigFieldNumberUint32Desc)` to create a new TestVerifyBigFieldNumberUint32.
export const TestVerifyBigFieldNumberUint32Desc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 94);

// Describes the message protobuf_unittest.TestVerifyBigFieldNumberUint32.Nested. Use `create(TestVerifyBigFieldNumberUint32_NestedDesc)` to create a new TestVerifyBigFieldNumberUint32_Nested.
export const TestVerifyBigFieldNumberUint32_NestedDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 94, 0);

// Describes the message protobuf_unittest.EnumParseTester. Use `create(EnumParseTesterDesc)` to create a new EnumParseTester.
export const EnumParseTesterDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 95);

// Describes the enum protobuf_unittest.EnumParseTester.SeqSmall0.
export const EnumParseTester_SeqSmall0Desc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 95, 0);

/**
 * @generated from enum protobuf_unittest.EnumParseTester.SeqSmall0
 */
export const EnumParseTester_SeqSmall0 = /*@__PURE__*/
  tsEnum(EnumParseTester_SeqSmall0Desc);

// Describes the enum protobuf_unittest.EnumParseTester.SeqSmall1.
export const EnumParseTester_SeqSmall1Desc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 95, 1);

/**
 * @generated from enum protobuf_unittest.EnumParseTester.SeqSmall1
 */
export const EnumParseTester_SeqSmall1 = /*@__PURE__*/
  tsEnum(EnumParseTester_SeqSmall1Desc);

// Describes the enum protobuf_unittest.EnumParseTester.SeqLarge.
export const EnumParseTester_SeqLargeDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 95, 2);

/**
 * @generated from enum protobuf_unittest.EnumParseTester.SeqLarge
 */
export const EnumParseTester_SeqLarge = /*@__PURE__*/
  tsEnum(EnumParseTester_SeqLargeDesc);

// Describes the enum protobuf_unittest.EnumParseTester.Arbitrary.
export const EnumParseTester_ArbitraryDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 95, 3);

/**
 * @generated from enum protobuf_unittest.EnumParseTester.Arbitrary
 */
export const EnumParseTester_Arbitrary = /*@__PURE__*/
  tsEnum(EnumParseTester_ArbitraryDesc);

/**
 * @generated from extension: optional protobuf_unittest.EnumParseTester.Arbitrary optional_arbitrary_ext = 2000000;
 */
export const EnumParseTester_optional_arbitrary_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 95, 0);

/**
 * @generated from extension: repeated protobuf_unittest.EnumParseTester.Arbitrary repeated_arbitrary_ext = 2000001;
 */
export const EnumParseTester_repeated_arbitrary_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 95, 1);

/**
 * @generated from extension: repeated protobuf_unittest.EnumParseTester.Arbitrary packed_arbitrary_ext = 2000002 [packed = true];
 */
export const EnumParseTester_packed_arbitrary_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 95, 2);

// Describes the message protobuf_unittest.BoolParseTester. Use `create(BoolParseTesterDesc)` to create a new BoolParseTester.
export const BoolParseTesterDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 96);

/**
 * @generated from extension: optional bool optional_bool_ext = 2000000;
 */
export const BoolParseTester_optional_bool_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 96, 0);

/**
 * @generated from extension: repeated bool repeated_bool_ext = 2000001;
 */
export const BoolParseTester_repeated_bool_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 96, 1);

/**
 * @generated from extension: repeated bool packed_bool_ext = 2000002 [packed = true];
 */
export const BoolParseTester_packed_bool_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 96, 2);

// Describes the message protobuf_unittest.Int32ParseTester. Use `create(Int32ParseTesterDesc)` to create a new Int32ParseTester.
export const Int32ParseTesterDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 97);

/**
 * @generated from extension: optional int32 optional_int32_ext = 2000000;
 */
export const Int32ParseTester_optional_int32_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 97, 0);

/**
 * @generated from extension: repeated int32 repeated_int32_ext = 2000001;
 */
export const Int32ParseTester_repeated_int32_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 97, 1);

/**
 * @generated from extension: repeated int32 packed_int32_ext = 2000002 [packed = true];
 */
export const Int32ParseTester_packed_int32_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 97, 2);

// Describes the message protobuf_unittest.Int64ParseTester. Use `create(Int64ParseTesterDesc)` to create a new Int64ParseTester.
export const Int64ParseTesterDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 98);

/**
 * @generated from extension: optional int64 optional_int64_ext = 2000000;
 */
export const Int64ParseTester_optional_int64_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 98, 0);

/**
 * @generated from extension: repeated int64 repeated_int64_ext = 2000001;
 */
export const Int64ParseTester_repeated_int64_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 98, 1);

/**
 * @generated from extension: repeated int64 packed_int64_ext = 2000002 [packed = true];
 */
export const Int64ParseTester_packed_int64_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 98, 2);

// Describes the message protobuf_unittest.InlinedStringIdxRegressionProto. Use `create(InlinedStringIdxRegressionProtoDesc)` to create a new InlinedStringIdxRegressionProto.
export const InlinedStringIdxRegressionProtoDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 99);

// Describes the message protobuf_unittest.StringParseTester. Use `create(StringParseTesterDesc)` to create a new StringParseTester.
export const StringParseTesterDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 100);

/**
 * @generated from extension: optional string optional_string_ext = 2000000;
 */
export const StringParseTester_optional_string_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 100, 0);

/**
 * @generated from extension: repeated string repeated_string_ext = 2000001;
 */
export const StringParseTester_repeated_string_ext = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 100, 1);

// Describes the message protobuf_unittest.BadFieldNames. Use `create(BadFieldNamesDesc)` to create a new BadFieldNames.
export const BadFieldNamesDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 101);

// Describes the message protobuf_unittest.TestNestedMessageRedaction. Use `create(TestNestedMessageRedactionDesc)` to create a new TestNestedMessageRedaction.
export const TestNestedMessageRedactionDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 102);

// Describes the message protobuf_unittest.RedactedFields. Use `create(RedactedFieldsDesc)` to create a new RedactedFields.
export const RedactedFieldsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 103);

// Describes the message protobuf_unittest.TestCord. Use `create(TestCordDesc)` to create a new TestCord.
export const TestCordDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 104);

// Describes the message protobuf_unittest.TestPackedEnumSmallRange. Use `create(TestPackedEnumSmallRangeDesc)` to create a new TestPackedEnumSmallRange.
export const TestPackedEnumSmallRangeDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 105);

// Describes the enum protobuf_unittest.TestPackedEnumSmallRange.NestedEnum.
export const TestPackedEnumSmallRange_NestedEnumDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 105, 0);

/**
 * @generated from enum protobuf_unittest.TestPackedEnumSmallRange.NestedEnum
 */
export const TestPackedEnumSmallRange_NestedEnum = /*@__PURE__*/
  tsEnum(TestPackedEnumSmallRange_NestedEnumDesc);

// Describes the message protobuf_unittest.EnumsForBenchmark. Use `create(EnumsForBenchmarkDesc)` to create a new EnumsForBenchmark.
export const EnumsForBenchmarkDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 106);

// Describes the enum protobuf_unittest.EnumsForBenchmark.Flat.
export const EnumsForBenchmark_FlatDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 106, 0);

/**
 * @generated from enum protobuf_unittest.EnumsForBenchmark.Flat
 */
export const EnumsForBenchmark_Flat = /*@__PURE__*/
  tsEnum(EnumsForBenchmark_FlatDesc);

// Describes the enum protobuf_unittest.EnumsForBenchmark.AlmostFlat.
export const EnumsForBenchmark_AlmostFlatDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 106, 1);

/**
 * Has a few holes, bitmap can be used.
 *
 * @generated from enum protobuf_unittest.EnumsForBenchmark.AlmostFlat
 */
export const EnumsForBenchmark_AlmostFlat = /*@__PURE__*/
  tsEnum(EnumsForBenchmark_AlmostFlatDesc);

// Describes the enum protobuf_unittest.EnumsForBenchmark.Sparse.
export const EnumsForBenchmark_SparseDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 106, 2);

/**
 * @generated from enum protobuf_unittest.EnumsForBenchmark.Sparse
 */
export const EnumsForBenchmark_Sparse = /*@__PURE__*/
  tsEnum(EnumsForBenchmark_SparseDesc);

// Describes the message protobuf_unittest.TestMessageWithManyRepeatedPtrFields. Use `create(TestMessageWithManyRepeatedPtrFieldsDesc)` to create a new TestMessageWithManyRepeatedPtrFields.
export const TestMessageWithManyRepeatedPtrFieldsDesc = /*@__PURE__*/
  messageDesc(fileDesc_google_protobuf_unittest, 107);

// Describes the enum protobuf_unittest.ForeignEnum.
export const ForeignEnumDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 0);

/**
 * @generated from enum protobuf_unittest.ForeignEnum
 */
export const ForeignEnum = /*@__PURE__*/
  tsEnum(ForeignEnumDesc);

// Describes the enum protobuf_unittest.TestReservedEnumFields.
export const TestReservedEnumFieldsDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 1);

/**
 * @generated from enum protobuf_unittest.TestReservedEnumFields
 */
export const TestReservedEnumFields = /*@__PURE__*/
  tsEnum(TestReservedEnumFieldsDesc);

// Describes the enum protobuf_unittest.TestEnumWithDupValue.
export const TestEnumWithDupValueDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 2);

/**
 * Test an enum that has multiple values with the same number.
 *
 * @generated from enum protobuf_unittest.TestEnumWithDupValue
 */
export const TestEnumWithDupValue = /*@__PURE__*/
  tsEnum(TestEnumWithDupValueDesc);

// Describes the enum protobuf_unittest.TestSparseEnum.
export const TestSparseEnumDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 3);

/**
 * Test an enum with large, unordered values.
 *
 * @generated from enum protobuf_unittest.TestSparseEnum
 */
export const TestSparseEnum = /*@__PURE__*/
  tsEnum(TestSparseEnumDesc);

// Describes the enum protobuf_unittest.VeryLargeEnum.
export const VeryLargeEnumDesc = /*@__PURE__*/
  enumDesc(fileDesc_google_protobuf_unittest, 4);

/**
 * @generated from enum protobuf_unittest.VeryLargeEnum
 */
export const VeryLargeEnum = /*@__PURE__*/
  tsEnum(VeryLargeEnumDesc);

/**
 * @generated from service protobuf_unittest.TestService
 */
export const TestService = /*@__PURE__*/
  serviceDesc(fileDesc_google_protobuf_unittest, 0);

/**
 * Singular
 *
 * @generated from extension: optional int32 optional_int32_extension = 1;
 */
export const optional_int32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 0);

/**
 * @generated from extension: optional int64 optional_int64_extension = 2;
 */
export const optional_int64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 1);

/**
 * @generated from extension: optional uint32 optional_uint32_extension = 3;
 */
export const optional_uint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 2);

/**
 * @generated from extension: optional uint64 optional_uint64_extension = 4;
 */
export const optional_uint64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 3);

/**
 * @generated from extension: optional sint32 optional_sint32_extension = 5;
 */
export const optional_sint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 4);

/**
 * @generated from extension: optional sint64 optional_sint64_extension = 6;
 */
export const optional_sint64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 5);

/**
 * @generated from extension: optional fixed32 optional_fixed32_extension = 7;
 */
export const optional_fixed32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 6);

/**
 * @generated from extension: optional fixed64 optional_fixed64_extension = 8;
 */
export const optional_fixed64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 7);

/**
 * @generated from extension: optional sfixed32 optional_sfixed32_extension = 9;
 */
export const optional_sfixed32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 8);

/**
 * @generated from extension: optional sfixed64 optional_sfixed64_extension = 10;
 */
export const optional_sfixed64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 9);

/**
 * @generated from extension: optional float optional_float_extension = 11;
 */
export const optional_float_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 10);

/**
 * @generated from extension: optional double optional_double_extension = 12;
 */
export const optional_double_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 11);

/**
 * @generated from extension: optional bool optional_bool_extension = 13;
 */
export const optional_bool_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 12);

/**
 * @generated from extension: optional string optional_string_extension = 14;
 */
export const optional_string_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 13);

/**
 * @generated from extension: optional bytes optional_bytes_extension = 15;
 */
export const optional_bytes_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 14);

/**
 * @generated from extension: optional protobuf_unittest.OptionalGroup_extension optionalgroup_extension = 16;
 */
export const optionalgroup_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 15);

/**
 * @generated from extension: optional protobuf_unittest.TestAllTypes.NestedMessage optional_nested_message_extension = 18;
 */
export const optional_nested_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 16);

/**
 * @generated from extension: optional protobuf_unittest.ForeignMessage optional_foreign_message_extension = 19;
 */
export const optional_foreign_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 17);

/**
 * @generated from extension: optional protobuf_unittest_import.ImportMessage optional_import_message_extension = 20;
 */
export const optional_import_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 18);

/**
 * @generated from extension: optional protobuf_unittest.TestAllTypes.NestedEnum optional_nested_enum_extension = 21;
 */
export const optional_nested_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 19);

/**
 * @generated from extension: optional protobuf_unittest.ForeignEnum optional_foreign_enum_extension = 22;
 */
export const optional_foreign_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 20);

/**
 * @generated from extension: optional protobuf_unittest_import.ImportEnum optional_import_enum_extension = 23;
 */
export const optional_import_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 21);

/**
 * @generated from extension: optional string optional_string_piece_extension = 24;
 */
export const optional_string_piece_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 22);

/**
 * TODO: ctype=CORD is not supported for extension. Add
 * ctype=CORD option back after it is supported.
 *
 * @generated from extension: optional string optional_cord_extension = 25;
 */
export const optional_cord_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 23);

/**
 * @generated from extension: optional protobuf_unittest_import.PublicImportMessage optional_public_import_message_extension = 26;
 */
export const optional_public_import_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 24);

/**
 * @generated from extension: optional protobuf_unittest.TestAllTypes.NestedMessage optional_lazy_message_extension = 27;
 */
export const optional_lazy_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 25);

/**
 * @generated from extension: optional protobuf_unittest.TestAllTypes.NestedMessage optional_unverified_lazy_message_extension = 28;
 */
export const optional_unverified_lazy_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 26);

/**
 * Repeated
 *
 * @generated from extension: repeated int32 repeated_int32_extension = 31;
 */
export const repeated_int32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 27);

/**
 * @generated from extension: repeated int64 repeated_int64_extension = 32;
 */
export const repeated_int64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 28);

/**
 * @generated from extension: repeated uint32 repeated_uint32_extension = 33;
 */
export const repeated_uint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 29);

/**
 * @generated from extension: repeated uint64 repeated_uint64_extension = 34;
 */
export const repeated_uint64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 30);

/**
 * @generated from extension: repeated sint32 repeated_sint32_extension = 35;
 */
export const repeated_sint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 31);

/**
 * @generated from extension: repeated sint64 repeated_sint64_extension = 36;
 */
export const repeated_sint64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 32);

/**
 * @generated from extension: repeated fixed32 repeated_fixed32_extension = 37;
 */
export const repeated_fixed32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 33);

/**
 * @generated from extension: repeated fixed64 repeated_fixed64_extension = 38;
 */
export const repeated_fixed64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 34);

/**
 * @generated from extension: repeated sfixed32 repeated_sfixed32_extension = 39;
 */
export const repeated_sfixed32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 35);

/**
 * @generated from extension: repeated sfixed64 repeated_sfixed64_extension = 40;
 */
export const repeated_sfixed64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 36);

/**
 * @generated from extension: repeated float repeated_float_extension = 41;
 */
export const repeated_float_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 37);

/**
 * @generated from extension: repeated double repeated_double_extension = 42;
 */
export const repeated_double_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 38);

/**
 * @generated from extension: repeated bool repeated_bool_extension = 43;
 */
export const repeated_bool_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 39);

/**
 * @generated from extension: repeated string repeated_string_extension = 44;
 */
export const repeated_string_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 40);

/**
 * @generated from extension: repeated bytes repeated_bytes_extension = 45;
 */
export const repeated_bytes_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 41);

/**
 * @generated from extension: repeated protobuf_unittest.RepeatedGroup_extension repeatedgroup_extension = 46;
 */
export const repeatedgroup_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 42);

/**
 * @generated from extension: repeated protobuf_unittest.TestAllTypes.NestedMessage repeated_nested_message_extension = 48;
 */
export const repeated_nested_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 43);

/**
 * @generated from extension: repeated protobuf_unittest.ForeignMessage repeated_foreign_message_extension = 49;
 */
export const repeated_foreign_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 44);

/**
 * @generated from extension: repeated protobuf_unittest_import.ImportMessage repeated_import_message_extension = 50;
 */
export const repeated_import_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 45);

/**
 * @generated from extension: repeated protobuf_unittest.TestAllTypes.NestedEnum repeated_nested_enum_extension = 51;
 */
export const repeated_nested_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 46);

/**
 * @generated from extension: repeated protobuf_unittest.ForeignEnum repeated_foreign_enum_extension = 52;
 */
export const repeated_foreign_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 47);

/**
 * @generated from extension: repeated protobuf_unittest_import.ImportEnum repeated_import_enum_extension = 53;
 */
export const repeated_import_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 48);

/**
 * @generated from extension: repeated string repeated_string_piece_extension = 54;
 */
export const repeated_string_piece_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 49);

/**
 * TODO: ctype=CORD is not supported for extension. Add
 * ctype=CORD option back after it is supported.
 *
 * @generated from extension: repeated string repeated_cord_extension = 55;
 */
export const repeated_cord_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 50);

/**
 * @generated from extension: repeated protobuf_unittest.TestAllTypes.NestedMessage repeated_lazy_message_extension = 57;
 */
export const repeated_lazy_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 51);

/**
 * Singular with defaults
 *
 * @generated from extension: optional int32 default_int32_extension = 61 [default = 41];
 */
export const default_int32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 52);

/**
 * @generated from extension: optional int64 default_int64_extension = 62 [default = 42];
 */
export const default_int64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 53);

/**
 * @generated from extension: optional uint32 default_uint32_extension = 63 [default = 43];
 */
export const default_uint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 54);

/**
 * @generated from extension: optional uint64 default_uint64_extension = 64 [default = 44];
 */
export const default_uint64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 55);

/**
 * @generated from extension: optional sint32 default_sint32_extension = 65 [default = -45];
 */
export const default_sint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 56);

/**
 * @generated from extension: optional sint64 default_sint64_extension = 66 [default = 46];
 */
export const default_sint64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 57);

/**
 * @generated from extension: optional fixed32 default_fixed32_extension = 67 [default = 47];
 */
export const default_fixed32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 58);

/**
 * @generated from extension: optional fixed64 default_fixed64_extension = 68 [default = 48];
 */
export const default_fixed64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 59);

/**
 * @generated from extension: optional sfixed32 default_sfixed32_extension = 69 [default = 49];
 */
export const default_sfixed32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 60);

/**
 * @generated from extension: optional sfixed64 default_sfixed64_extension = 70 [default = -50];
 */
export const default_sfixed64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 61);

/**
 * @generated from extension: optional float default_float_extension = 71 [default = 51.5];
 */
export const default_float_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 62);

/**
 * @generated from extension: optional double default_double_extension = 72 [default = 52000];
 */
export const default_double_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 63);

/**
 * @generated from extension: optional bool default_bool_extension = 73 [default = true];
 */
export const default_bool_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 64);

/**
 * @generated from extension: optional string default_string_extension = 74 [default = "hello"];
 */
export const default_string_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 65);

/**
 * @generated from extension: optional bytes default_bytes_extension = 75 [default = "world"];
 */
export const default_bytes_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 66);

/**
 * @generated from extension: optional protobuf_unittest.TestAllTypes.NestedEnum default_nested_enum_extension = 81 [default = BAR];
 */
export const default_nested_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 67);

/**
 * @generated from extension: optional protobuf_unittest.ForeignEnum default_foreign_enum_extension = 82 [default = FOREIGN_BAR];
 */
export const default_foreign_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 68);

/**
 * @generated from extension: optional protobuf_unittest_import.ImportEnum default_import_enum_extension = 83 [default = IMPORT_BAR];
 */
export const default_import_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 69);

/**
 * @generated from extension: optional string default_string_piece_extension = 84 [default = "abc"];
 */
export const default_string_piece_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 70);

/**
 * TODO: ctype=CORD is not supported for extension. Add
 * ctype=CORD option back after it is supported.
 *
 * @generated from extension: optional string default_cord_extension = 85 [default = "123"];
 */
export const default_cord_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 71);

/**
 * For oneof test
 *
 * @generated from extension: optional uint32 oneof_uint32_extension = 111;
 */
export const oneof_uint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 72);

/**
 * @generated from extension: optional protobuf_unittest.TestAllTypes.NestedMessage oneof_nested_message_extension = 112;
 */
export const oneof_nested_message_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 73);

/**
 * @generated from extension: optional string oneof_string_extension = 113;
 */
export const oneof_string_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 74);

/**
 * @generated from extension: optional bytes oneof_bytes_extension = 114;
 */
export const oneof_bytes_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 75);

/**
 * @generated from extension: optional string my_extension_string = 50;
 */
export const my_extension_string = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 76);

/**
 * @generated from extension: optional int32 my_extension_int = 5;
 */
export const my_extension_int = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 77);

/**
 * @generated from extension: repeated int32 packed_int32_extension = 90 [packed = true];
 */
export const packed_int32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 78);

/**
 * @generated from extension: repeated int64 packed_int64_extension = 91 [packed = true];
 */
export const packed_int64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 79);

/**
 * @generated from extension: repeated uint32 packed_uint32_extension = 92 [packed = true];
 */
export const packed_uint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 80);

/**
 * @generated from extension: repeated uint64 packed_uint64_extension = 93 [packed = true];
 */
export const packed_uint64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 81);

/**
 * @generated from extension: repeated sint32 packed_sint32_extension = 94 [packed = true];
 */
export const packed_sint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 82);

/**
 * @generated from extension: repeated sint64 packed_sint64_extension = 95 [packed = true];
 */
export const packed_sint64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 83);

/**
 * @generated from extension: repeated fixed32 packed_fixed32_extension = 96 [packed = true];
 */
export const packed_fixed32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 84);

/**
 * @generated from extension: repeated fixed64 packed_fixed64_extension = 97 [packed = true];
 */
export const packed_fixed64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 85);

/**
 * @generated from extension: repeated sfixed32 packed_sfixed32_extension = 98 [packed = true];
 */
export const packed_sfixed32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 86);

/**
 * @generated from extension: repeated sfixed64 packed_sfixed64_extension = 99 [packed = true];
 */
export const packed_sfixed64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 87);

/**
 * @generated from extension: repeated float packed_float_extension = 100 [packed = true];
 */
export const packed_float_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 88);

/**
 * @generated from extension: repeated double packed_double_extension = 101 [packed = true];
 */
export const packed_double_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 89);

/**
 * @generated from extension: repeated bool packed_bool_extension = 102 [packed = true];
 */
export const packed_bool_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 90);

/**
 * @generated from extension: repeated protobuf_unittest.ForeignEnum packed_enum_extension = 103 [packed = true];
 */
export const packed_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 91);

/**
 * @generated from extension: repeated int32 unpacked_int32_extension = 90 [packed = false];
 */
export const unpacked_int32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 92);

/**
 * @generated from extension: repeated int64 unpacked_int64_extension = 91 [packed = false];
 */
export const unpacked_int64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 93);

/**
 * @generated from extension: repeated uint32 unpacked_uint32_extension = 92 [packed = false];
 */
export const unpacked_uint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 94);

/**
 * @generated from extension: repeated uint64 unpacked_uint64_extension = 93 [packed = false];
 */
export const unpacked_uint64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 95);

/**
 * @generated from extension: repeated sint32 unpacked_sint32_extension = 94 [packed = false];
 */
export const unpacked_sint32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 96);

/**
 * @generated from extension: repeated sint64 unpacked_sint64_extension = 95 [packed = false];
 */
export const unpacked_sint64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 97);

/**
 * @generated from extension: repeated fixed32 unpacked_fixed32_extension = 96 [packed = false];
 */
export const unpacked_fixed32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 98);

/**
 * @generated from extension: repeated fixed64 unpacked_fixed64_extension = 97 [packed = false];
 */
export const unpacked_fixed64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 99);

/**
 * @generated from extension: repeated sfixed32 unpacked_sfixed32_extension = 98 [packed = false];
 */
export const unpacked_sfixed32_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 100);

/**
 * @generated from extension: repeated sfixed64 unpacked_sfixed64_extension = 99 [packed = false];
 */
export const unpacked_sfixed64_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 101);

/**
 * @generated from extension: repeated float unpacked_float_extension = 100 [packed = false];
 */
export const unpacked_float_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 102);

/**
 * @generated from extension: repeated double unpacked_double_extension = 101 [packed = false];
 */
export const unpacked_double_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 103);

/**
 * @generated from extension: repeated bool unpacked_bool_extension = 102 [packed = false];
 */
export const unpacked_bool_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 104);

/**
 * @generated from extension: repeated protobuf_unittest.ForeignEnum unpacked_enum_extension = 103 [packed = false];
 */
export const unpacked_enum_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 105);

/**
 * @generated from extension: optional protobuf_unittest.TestAllTypes test_all_types = 536860000;
 */
export const test_all_types = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 106);

/**
 * @generated from extension: optional int32 test_extension_inside_table_extension = 5;
 */
export const test_extension_inside_table_extension = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 107);

/**
 * @generated from extension: optional protobuf_unittest.TestNestedGroupExtensionInnerExtension inner = 3;
 */
export const inner = /*@__PURE__*/
  extDesc(fileDesc_google_protobuf_unittest, 108);

