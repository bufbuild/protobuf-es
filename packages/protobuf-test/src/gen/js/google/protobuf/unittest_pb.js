// Copyright 2021-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// A proto file we will use for unit testing.
//
// LINT: ALLOW_GROUPS, LEGACY_NAMES

// @generated by protoc-gen-es v2.9.0 with parameter "target=js+dts,import_extension=js"
// @generated from file google/protobuf/unittest.proto (package proto2_unittest, edition 2023)
// option features.enum_type = CLOSED;
// option features.repeated_field_encoding = EXPANDED;
// option features.utf8_validation = NONE;
/* eslint-disable */

// We don't put this in a package within proto2 because we need to make sure
// that the generated code doesn't depend on being in the proto2 namespace.
// In test_util.h we do "using namespace unittest = proto2_unittest".

import { enumDesc, extDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_unittest_import } from "./unittest_import_pb.js";

/**
 * Describes the file google/protobuf/unittest.proto.
 */
export const file_google_protobuf_unittest = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_unittest_import]);

/**
 * Describes the message proto2_unittest.TestAllTypes.
 * Use `create(TestAllTypesSchema)` to create a new message.
 */
export const TestAllTypesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 0);

/**
 * Describes the message proto2_unittest.TestAllTypes.NestedMessage.
 * Use `create(TestAllTypes_NestedMessageSchema)` to create a new message.
 */
export const TestAllTypes_NestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 0, 0);

/**
 * Describes the message proto2_unittest.TestAllTypes.OptionalGroup.
 * Use `create(TestAllTypes_OptionalGroupSchema)` to create a new message.
 */
export const TestAllTypes_OptionalGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 0, 1);

/**
 * Describes the message proto2_unittest.TestAllTypes.RepeatedGroup.
 * Use `create(TestAllTypes_RepeatedGroupSchema)` to create a new message.
 */
export const TestAllTypes_RepeatedGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 0, 2);

/**
 * Describes the enum proto2_unittest.TestAllTypes.NestedEnum.
 */
export const TestAllTypes_NestedEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 0, 0);

/**
 * @generated from enum proto2_unittest.TestAllTypes.NestedEnum
 */
export const TestAllTypes_NestedEnum = /*@__PURE__*/
  tsEnum(TestAllTypes_NestedEnumSchema);

/**
 * Describes the message proto2_unittest.NestedTestAllTypes.
 * Use `create(NestedTestAllTypesSchema)` to create a new message.
 */
export const NestedTestAllTypesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 1);

/**
 * Describes the message proto2_unittest.TestDeprecatedFields.
 * Use `create(TestDeprecatedFieldsSchema)` to create a new message.
 */
export const TestDeprecatedFieldsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 2);

/**
 * Describes the message proto2_unittest.TestDeprecatedMessage.
 * Use `create(TestDeprecatedMessageSchema)` to create a new message.
 * @deprecated
 */
export const TestDeprecatedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 3);

/**
 * Describes the message proto2_unittest.ForeignMessage.
 * Use `create(ForeignMessageSchema)` to create a new message.
 */
export const ForeignMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 4);

/**
 * Describes the message proto2_unittest.TestReservedFields.
 * Use `create(TestReservedFieldsSchema)` to create a new message.
 */
export const TestReservedFieldsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 5);

/**
 * Describes the message proto2_unittest.TestAllExtensions.
 * Use `create(TestAllExtensionsSchema)` to create a new message.
 */
export const TestAllExtensionsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 6);

/**
 * Describes the message proto2_unittest.OptionalGroup_extension.
 * Use `create(OptionalGroup_extensionSchema)` to create a new message.
 */
export const OptionalGroup_extensionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 7);

/**
 * Describes the message proto2_unittest.RepeatedGroup_extension.
 * Use `create(RepeatedGroup_extensionSchema)` to create a new message.
 */
export const RepeatedGroup_extensionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 8);

/**
 * Describes the message proto2_unittest.TestMixedFieldsAndExtensions.
 * Use `create(TestMixedFieldsAndExtensionsSchema)` to create a new message.
 */
export const TestMixedFieldsAndExtensionsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 9);

/**
 * @generated from extension: int32 c = 2;
 */
export const TestMixedFieldsAndExtensions_c = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 9, 0);

/**
 * @generated from extension: repeated fixed32 d = 4;
 */
export const TestMixedFieldsAndExtensions_d = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 9, 1);

/**
 * Describes the message proto2_unittest.TestGroup.
 * Use `create(TestGroupSchema)` to create a new message.
 */
export const TestGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 10);

/**
 * Describes the message proto2_unittest.TestGroup.OptionalGroup.
 * Use `create(TestGroup_OptionalGroupSchema)` to create a new message.
 */
export const TestGroup_OptionalGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 10, 0);

/**
 * Describes the message proto2_unittest.TestGroupExtension.
 * Use `create(TestGroupExtensionSchema)` to create a new message.
 */
export const TestGroupExtensionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 11);

/**
 * Describes the message proto2_unittest.TestNestedExtension.
 * Use `create(TestNestedExtensionSchema)` to create a new message.
 */
export const TestNestedExtensionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 12);

/**
 * Describes the message proto2_unittest.TestNestedExtension.OptionalGroup_extension.
 * Use `create(TestNestedExtension_OptionalGroup_extensionSchema)` to create a new message.
 */
export const TestNestedExtension_OptionalGroup_extensionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 12, 0);

/**
 * Check for bug where string extensions declared in tested scope did not
 * compile.
 *
 * @generated from extension: string test = 1002 [default = "test"];
 */
export const TestNestedExtension_test = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 12, 0);

/**
 * Used to test if generated extension name is correct when there are
 * underscores.
 *
 * @generated from extension: string nested_string_extension = 1003;
 */
export const TestNestedExtension_nested_string_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 12, 1);

/**
 * @generated from extension: proto2_unittest.TestNestedExtension.OptionalGroup_extension optionalgroup_extension = 16 [features.message_encoding = DELIMITED];
 */
export const TestNestedExtension_optionalgroup_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 12, 2);

/**
 * @generated from extension: proto2_unittest.ForeignEnum optional_foreign_enum_extension = 22;
 */
export const TestNestedExtension_optional_foreign_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 12, 3);

/**
 * Describes the message proto2_unittest.TestChildExtension.
 * Use `create(TestChildExtensionSchema)` to create a new message.
 */
export const TestChildExtensionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 13);

/**
 * Describes the message proto2_unittest.TestChildExtensionData.
 * Use `create(TestChildExtensionDataSchema)` to create a new message.
 */
export const TestChildExtensionDataSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 14);

/**
 * Describes the message proto2_unittest.TestChildExtensionData.NestedTestAllExtensionsData.
 * Use `create(TestChildExtensionData_NestedTestAllExtensionsDataSchema)` to create a new message.
 */
export const TestChildExtensionData_NestedTestAllExtensionsDataSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 14, 0);

/**
 * Describes the message proto2_unittest.TestChildExtensionData.NestedTestAllExtensionsData.NestedDynamicExtensions.
 * Use `create(TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensionsSchema)` to create a new message.
 */
export const TestChildExtensionData_NestedTestAllExtensionsData_NestedDynamicExtensionsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 14, 0, 0);

/**
 * Describes the message proto2_unittest.TestNestedChildExtension.
 * Use `create(TestNestedChildExtensionSchema)` to create a new message.
 */
export const TestNestedChildExtensionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 15);

/**
 * Describes the message proto2_unittest.TestNestedChildExtensionData.
 * Use `create(TestNestedChildExtensionDataSchema)` to create a new message.
 */
export const TestNestedChildExtensionDataSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 16);

/**
 * Describes the message proto2_unittest.TestRequiredEnum.
 * Use `create(TestRequiredEnumSchema)` to create a new message.
 */
export const TestRequiredEnumSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 17);

/**
 * Describes the message proto2_unittest.TestRequiredOpenEnum.
 * Use `create(TestRequiredOpenEnumSchema)` to create a new message.
 */
export const TestRequiredOpenEnumSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 18);

/**
 * Describes the message proto2_unittest.TestRequiredEnumNoMask.
 * Use `create(TestRequiredEnumNoMaskSchema)` to create a new message.
 */
export const TestRequiredEnumNoMaskSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 19);

/**
 * Describes the enum proto2_unittest.TestRequiredEnumNoMask.NestedEnum.
 */
export const TestRequiredEnumNoMask_NestedEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 19, 0);

/**
 * @generated from enum proto2_unittest.TestRequiredEnumNoMask.NestedEnum
 */
export const TestRequiredEnumNoMask_NestedEnum = /*@__PURE__*/
  tsEnum(TestRequiredEnumNoMask_NestedEnumSchema);

/**
 * Describes the message proto2_unittest.TestRequiredEnumMulti.
 * Use `create(TestRequiredEnumMultiSchema)` to create a new message.
 */
export const TestRequiredEnumMultiSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 20);

/**
 * Describes the enum proto2_unittest.TestRequiredEnumMulti.NestedEnum.
 */
export const TestRequiredEnumMulti_NestedEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 20, 0);

/**
 * @generated from enum proto2_unittest.TestRequiredEnumMulti.NestedEnum
 */
export const TestRequiredEnumMulti_NestedEnum = /*@__PURE__*/
  tsEnum(TestRequiredEnumMulti_NestedEnumSchema);

/**
 * Describes the message proto2_unittest.TestRequiredNoMaskMulti.
 * Use `create(TestRequiredNoMaskMultiSchema)` to create a new message.
 */
export const TestRequiredNoMaskMultiSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 21);

/**
 * Describes the enum proto2_unittest.TestRequiredNoMaskMulti.NestedEnum.
 */
export const TestRequiredNoMaskMulti_NestedEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 21, 0);

/**
 * @generated from enum proto2_unittest.TestRequiredNoMaskMulti.NestedEnum
 */
export const TestRequiredNoMaskMulti_NestedEnum = /*@__PURE__*/
  tsEnum(TestRequiredNoMaskMulti_NestedEnumSchema);

/**
 * Describes the message proto2_unittest.TestRequired.
 * Use `create(TestRequiredSchema)` to create a new message.
 */
export const TestRequiredSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 22);

/**
 * @generated from extension: proto2_unittest.TestRequired single = 1000;
 */
export const TestRequired_single = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 22, 0);

/**
 * @generated from extension: repeated proto2_unittest.TestRequired multi = 1001;
 */
export const TestRequired_multi = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 22, 1);

/**
 * Describes the message proto2_unittest.TestRequiredForeign.
 * Use `create(TestRequiredForeignSchema)` to create a new message.
 */
export const TestRequiredForeignSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 23);

/**
 * Describes the message proto2_unittest.TestRequiredMessage.
 * Use `create(TestRequiredMessageSchema)` to create a new message.
 */
export const TestRequiredMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 24);

/**
 * Describes the message proto2_unittest.TestNestedRequiredForeign.
 * Use `create(TestNestedRequiredForeignSchema)` to create a new message.
 */
export const TestNestedRequiredForeignSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 25);

/**
 * Describes the message proto2_unittest.TestForeignNested.
 * Use `create(TestForeignNestedSchema)` to create a new message.
 */
export const TestForeignNestedSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 26);

/**
 * Describes the message proto2_unittest.TestEmptyMessage.
 * Use `create(TestEmptyMessageSchema)` to create a new message.
 */
export const TestEmptyMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 27);

/**
 * Describes the message proto2_unittest.TestEmptyMessageWithExtensions.
 * Use `create(TestEmptyMessageWithExtensionsSchema)` to create a new message.
 */
export const TestEmptyMessageWithExtensionsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 28);

/**
 * Describes the message proto2_unittest.TestPickleNestedMessage.
 * Use `create(TestPickleNestedMessageSchema)` to create a new message.
 */
export const TestPickleNestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 29);

/**
 * Describes the message proto2_unittest.TestPickleNestedMessage.NestedMessage.
 * Use `create(TestPickleNestedMessage_NestedMessageSchema)` to create a new message.
 */
export const TestPickleNestedMessage_NestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 29, 0);

/**
 * Describes the message proto2_unittest.TestPickleNestedMessage.NestedMessage.NestedNestedMessage.
 * Use `create(TestPickleNestedMessage_NestedMessage_NestedNestedMessageSchema)` to create a new message.
 */
export const TestPickleNestedMessage_NestedMessage_NestedNestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 29, 0, 0);

/**
 * Describes the message proto2_unittest.TestMultipleExtensionRanges.
 * Use `create(TestMultipleExtensionRangesSchema)` to create a new message.
 */
export const TestMultipleExtensionRangesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 30);

/**
 * Describes the message proto2_unittest.TestReallyLargeTagNumber.
 * Use `create(TestReallyLargeTagNumberSchema)` to create a new message.
 */
export const TestReallyLargeTagNumberSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 31);

/**
 * Describes the message proto2_unittest.TestRecursiveMessage.
 * Use `create(TestRecursiveMessageSchema)` to create a new message.
 */
export const TestRecursiveMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 32);

/**
 * Describes the message proto2_unittest.TestMutualRecursionA.
 * Use `create(TestMutualRecursionASchema)` to create a new message.
 */
export const TestMutualRecursionASchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 33);

/**
 * Describes the message proto2_unittest.TestMutualRecursionA.SubMessage.
 * Use `create(TestMutualRecursionA_SubMessageSchema)` to create a new message.
 */
export const TestMutualRecursionA_SubMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 33, 0);

/**
 * Describes the message proto2_unittest.TestMutualRecursionA.SubGroup.
 * Use `create(TestMutualRecursionA_SubGroupSchema)` to create a new message.
 */
export const TestMutualRecursionA_SubGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 33, 1);

/**
 * Describes the message proto2_unittest.TestMutualRecursionA.SubGroupR.
 * Use `create(TestMutualRecursionA_SubGroupRSchema)` to create a new message.
 */
export const TestMutualRecursionA_SubGroupRSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 33, 2);

/**
 * Describes the message proto2_unittest.TestMutualRecursionB.
 * Use `create(TestMutualRecursionBSchema)` to create a new message.
 */
export const TestMutualRecursionBSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 34);

/**
 * Describes the message proto2_unittest.TestIsInitialized.
 * Use `create(TestIsInitializedSchema)` to create a new message.
 */
export const TestIsInitializedSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 35);

/**
 * Describes the message proto2_unittest.TestIsInitialized.SubMessage.
 * Use `create(TestIsInitialized_SubMessageSchema)` to create a new message.
 */
export const TestIsInitialized_SubMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 35, 0);

/**
 * Describes the message proto2_unittest.TestIsInitialized.SubMessage.SubGroup.
 * Use `create(TestIsInitialized_SubMessage_SubGroupSchema)` to create a new message.
 */
export const TestIsInitialized_SubMessage_SubGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 35, 0, 0);

/**
 * Describes the message proto2_unittest.TestDupFieldNumber.
 * Use `create(TestDupFieldNumberSchema)` to create a new message.
 */
export const TestDupFieldNumberSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 36);

/**
 * Describes the message proto2_unittest.TestDupFieldNumber.Foo.
 * Use `create(TestDupFieldNumber_FooSchema)` to create a new message.
 */
export const TestDupFieldNumber_FooSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 36, 0);

/**
 * Describes the message proto2_unittest.TestDupFieldNumber.Bar.
 * Use `create(TestDupFieldNumber_BarSchema)` to create a new message.
 */
export const TestDupFieldNumber_BarSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 36, 1);

/**
 * Describes the message proto2_unittest.TestEagerMessage.
 * Use `create(TestEagerMessageSchema)` to create a new message.
 */
export const TestEagerMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 37);

/**
 * Describes the message proto2_unittest.TestLazyMessage.
 * Use `create(TestLazyMessageSchema)` to create a new message.
 */
export const TestLazyMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 38);

/**
 * Describes the message proto2_unittest.TestLazyMessageRepeated.
 * Use `create(TestLazyMessageRepeatedSchema)` to create a new message.
 */
export const TestLazyMessageRepeatedSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 39);

/**
 * Describes the message proto2_unittest.TestEagerMaybeLazy.
 * Use `create(TestEagerMaybeLazySchema)` to create a new message.
 */
export const TestEagerMaybeLazySchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 40);

/**
 * Describes the message proto2_unittest.TestEagerMaybeLazy.NestedMessage.
 * Use `create(TestEagerMaybeLazy_NestedMessageSchema)` to create a new message.
 */
export const TestEagerMaybeLazy_NestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 40, 0);

/**
 * Describes the message proto2_unittest.TestNestedMessageHasBits.
 * Use `create(TestNestedMessageHasBitsSchema)` to create a new message.
 */
export const TestNestedMessageHasBitsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 41);

/**
 * Describes the message proto2_unittest.TestNestedMessageHasBits.NestedMessage.
 * Use `create(TestNestedMessageHasBits_NestedMessageSchema)` to create a new message.
 */
export const TestNestedMessageHasBits_NestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 41, 0);

/**
 * Describes the message proto2_unittest.TestCamelCaseFieldNames.
 * Use `create(TestCamelCaseFieldNamesSchema)` to create a new message.
 */
export const TestCamelCaseFieldNamesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 42);

/**
 * Describes the message proto2_unittest.TestFieldOrderings.
 * Use `create(TestFieldOrderingsSchema)` to create a new message.
 */
export const TestFieldOrderingsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 43);

/**
 * Describes the message proto2_unittest.TestFieldOrderings.NestedMessage.
 * Use `create(TestFieldOrderings_NestedMessageSchema)` to create a new message.
 */
export const TestFieldOrderings_NestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 43, 0);

/**
 * Describes the message proto2_unittest.TestExtensionOrderings1.
 * Use `create(TestExtensionOrderings1Schema)` to create a new message.
 */
export const TestExtensionOrderings1Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 44);

/**
 * @generated from extension: proto2_unittest.TestExtensionOrderings1 test_ext_orderings1 = 13;
 */
export const TestExtensionOrderings1_test_ext_orderings1 = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 44, 0);

/**
 * Describes the message proto2_unittest.TestExtensionOrderings2.
 * Use `create(TestExtensionOrderings2Schema)` to create a new message.
 */
export const TestExtensionOrderings2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 45);

/**
 * Describes the message proto2_unittest.TestExtensionOrderings2.TestExtensionOrderings3.
 * Use `create(TestExtensionOrderings2_TestExtensionOrderings3Schema)` to create a new message.
 */
export const TestExtensionOrderings2_TestExtensionOrderings3Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 45, 0);

/**
 * @generated from extension: proto2_unittest.TestExtensionOrderings2.TestExtensionOrderings3 test_ext_orderings3 = 14;
 */
export const TestExtensionOrderings2_TestExtensionOrderings3_test_ext_orderings3 = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 45, 0, 0);

/**
 * @generated from extension: proto2_unittest.TestExtensionOrderings2 test_ext_orderings2 = 12;
 */
export const TestExtensionOrderings2_test_ext_orderings2 = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 45, 0);

/**
 * Describes the message proto2_unittest.TestExtremeDefaultValues.
 * Use `create(TestExtremeDefaultValuesSchema)` to create a new message.
 */
export const TestExtremeDefaultValuesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 46);

/**
 * Describes the message proto2_unittest.SparseEnumMessage.
 * Use `create(SparseEnumMessageSchema)` to create a new message.
 */
export const SparseEnumMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 47);

/**
 * Describes the message proto2_unittest.OneString.
 * Use `create(OneStringSchema)` to create a new message.
 */
export const OneStringSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 48);

/**
 * Describes the message proto2_unittest.MoreString.
 * Use `create(MoreStringSchema)` to create a new message.
 */
export const MoreStringSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 49);

/**
 * Describes the message proto2_unittest.OneBytes.
 * Use `create(OneBytesSchema)` to create a new message.
 */
export const OneBytesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 50);

/**
 * Describes the message proto2_unittest.MoreBytes.
 * Use `create(MoreBytesSchema)` to create a new message.
 */
export const MoreBytesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 51);

/**
 * Describes the message proto2_unittest.ManyOptionalString.
 * Use `create(ManyOptionalStringSchema)` to create a new message.
 */
export const ManyOptionalStringSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 52);

/**
 * Describes the message proto2_unittest.Int32Message.
 * Use `create(Int32MessageSchema)` to create a new message.
 */
export const Int32MessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 53);

/**
 * Describes the message proto2_unittest.Uint32Message.
 * Use `create(Uint32MessageSchema)` to create a new message.
 */
export const Uint32MessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 54);

/**
 * Describes the message proto2_unittest.Int64Message.
 * Use `create(Int64MessageSchema)` to create a new message.
 */
export const Int64MessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 55);

/**
 * Describes the message proto2_unittest.Uint64Message.
 * Use `create(Uint64MessageSchema)` to create a new message.
 */
export const Uint64MessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 56);

/**
 * Describes the message proto2_unittest.BoolMessage.
 * Use `create(BoolMessageSchema)` to create a new message.
 */
export const BoolMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 57);

/**
 * Describes the message proto2_unittest.TestOneof.
 * Use `create(TestOneofSchema)` to create a new message.
 */
export const TestOneofSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 58);

/**
 * Describes the message proto2_unittest.TestOneof.FooGroup.
 * Use `create(TestOneof_FooGroupSchema)` to create a new message.
 */
export const TestOneof_FooGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 58, 0);

/**
 * Describes the message proto2_unittest.TestOneofBackwardsCompatible.
 * Use `create(TestOneofBackwardsCompatibleSchema)` to create a new message.
 */
export const TestOneofBackwardsCompatibleSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 59);

/**
 * Describes the message proto2_unittest.TestOneofBackwardsCompatible.FooGroup.
 * Use `create(TestOneofBackwardsCompatible_FooGroupSchema)` to create a new message.
 */
export const TestOneofBackwardsCompatible_FooGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 59, 0);

/**
 * Describes the message proto2_unittest.TestOneof2.
 * Use `create(TestOneof2Schema)` to create a new message.
 */
export const TestOneof2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 60);

/**
 * Describes the message proto2_unittest.TestOneof2.FooGroup.
 * Use `create(TestOneof2_FooGroupSchema)` to create a new message.
 */
export const TestOneof2_FooGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 60, 0);

/**
 * Describes the message proto2_unittest.TestOneof2.NestedMessage.
 * Use `create(TestOneof2_NestedMessageSchema)` to create a new message.
 */
export const TestOneof2_NestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 60, 1);

/**
 * Describes the enum proto2_unittest.TestOneof2.NestedEnum.
 */
export const TestOneof2_NestedEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 60, 0);

/**
 * @generated from enum proto2_unittest.TestOneof2.NestedEnum
 */
export const TestOneof2_NestedEnum = /*@__PURE__*/
  tsEnum(TestOneof2_NestedEnumSchema);

/**
 * Describes the message proto2_unittest.TestRequiredOneof.
 * Use `create(TestRequiredOneofSchema)` to create a new message.
 */
export const TestRequiredOneofSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 61);

/**
 * Describes the message proto2_unittest.TestRequiredOneof.NestedMessage.
 * Use `create(TestRequiredOneof_NestedMessageSchema)` to create a new message.
 */
export const TestRequiredOneof_NestedMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 61, 0);

/**
 * Describes the message proto2_unittest.TestPackedTypes.
 * Use `create(TestPackedTypesSchema)` to create a new message.
 */
export const TestPackedTypesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 62);

/**
 * Describes the message proto2_unittest.TestUnpackedTypes.
 * Use `create(TestUnpackedTypesSchema)` to create a new message.
 */
export const TestUnpackedTypesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 63);

/**
 * Describes the message proto2_unittest.TestPackedExtensions.
 * Use `create(TestPackedExtensionsSchema)` to create a new message.
 */
export const TestPackedExtensionsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 64);

/**
 * Describes the message proto2_unittest.TestUnpackedExtensions.
 * Use `create(TestUnpackedExtensionsSchema)` to create a new message.
 */
export const TestUnpackedExtensionsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 65);

/**
 * Describes the message proto2_unittest.TestDynamicExtensions.
 * Use `create(TestDynamicExtensionsSchema)` to create a new message.
 */
export const TestDynamicExtensionsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 66);

/**
 * Describes the message proto2_unittest.TestDynamicExtensions.DynamicMessageType.
 * Use `create(TestDynamicExtensions_DynamicMessageTypeSchema)` to create a new message.
 */
export const TestDynamicExtensions_DynamicMessageTypeSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 66, 0);

/**
 * Describes the enum proto2_unittest.TestDynamicExtensions.DynamicEnumType.
 */
export const TestDynamicExtensions_DynamicEnumTypeSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 66, 0);

/**
 * @generated from enum proto2_unittest.TestDynamicExtensions.DynamicEnumType
 */
export const TestDynamicExtensions_DynamicEnumType = /*@__PURE__*/
  tsEnum(TestDynamicExtensions_DynamicEnumTypeSchema);

/**
 * Describes the message proto2_unittest.TestRepeatedString.
 * Use `create(TestRepeatedStringSchema)` to create a new message.
 */
export const TestRepeatedStringSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 67);

/**
 * Describes the message proto2_unittest.TestRepeatedScalarDifferentTagSizes.
 * Use `create(TestRepeatedScalarDifferentTagSizesSchema)` to create a new message.
 */
export const TestRepeatedScalarDifferentTagSizesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 68);

/**
 * Describes the message proto2_unittest.TestParsingMerge.
 * Use `create(TestParsingMergeSchema)` to create a new message.
 */
export const TestParsingMergeSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 69);

/**
 * Describes the message proto2_unittest.TestParsingMerge.RepeatedFieldsGenerator.
 * Use `create(TestParsingMerge_RepeatedFieldsGeneratorSchema)` to create a new message.
 */
export const TestParsingMerge_RepeatedFieldsGeneratorSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 69, 0);

/**
 * Describes the message proto2_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group1.
 * Use `create(TestParsingMerge_RepeatedFieldsGenerator_Group1Schema)` to create a new message.
 */
export const TestParsingMerge_RepeatedFieldsGenerator_Group1Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 69, 0, 0);

/**
 * Describes the message proto2_unittest.TestParsingMerge.RepeatedFieldsGenerator.Group2.
 * Use `create(TestParsingMerge_RepeatedFieldsGenerator_Group2Schema)` to create a new message.
 */
export const TestParsingMerge_RepeatedFieldsGenerator_Group2Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 69, 0, 1);

/**
 * Describes the message proto2_unittest.TestParsingMerge.OptionalGroup.
 * Use `create(TestParsingMerge_OptionalGroupSchema)` to create a new message.
 */
export const TestParsingMerge_OptionalGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 69, 1);

/**
 * Describes the message proto2_unittest.TestParsingMerge.RepeatedGroup.
 * Use `create(TestParsingMerge_RepeatedGroupSchema)` to create a new message.
 */
export const TestParsingMerge_RepeatedGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 69, 2);

/**
 * @generated from extension: proto2_unittest.TestAllTypes optional_ext = 1000;
 */
export const TestParsingMerge_optional_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 69, 0);

/**
 * @generated from extension: repeated proto2_unittest.TestAllTypes repeated_ext = 1001;
 */
export const TestParsingMerge_repeated_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 69, 1);

/**
 * Describes the message proto2_unittest.TestMergeException.
 * Use `create(TestMergeExceptionSchema)` to create a new message.
 */
export const TestMergeExceptionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 70);

/**
 * Describes the message proto2_unittest.TestCommentInjectionMessage.
 * Use `create(TestCommentInjectionMessageSchema)` to create a new message.
 */
export const TestCommentInjectionMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 71);

/**
 * Describes the message proto2_unittest.TestMessageSize.
 * Use `create(TestMessageSizeSchema)` to create a new message.
 */
export const TestMessageSizeSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 72);

/**
 * Describes the message proto2_unittest.OpenEnumMessage.
 * Use `create(OpenEnumMessageSchema)` to create a new message.
 */
export const OpenEnumMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 73);

/**
 * Describes the enum proto2_unittest.OpenEnumMessage.TestEnum.
 */
export const OpenEnumMessage_TestEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 73, 0);

/**
 * @generated from enum proto2_unittest.OpenEnumMessage.TestEnum
 * @generated with option features.enum_type = OPEN
 */
export const OpenEnumMessage_TestEnum = /*@__PURE__*/
  tsEnum(OpenEnumMessage_TestEnumSchema);

/**
 * Describes the message proto2_unittest.TestEagerlyVerifiedLazyMessage.
 * Use `create(TestEagerlyVerifiedLazyMessageSchema)` to create a new message.
 */
export const TestEagerlyVerifiedLazyMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 74);

/**
 * Describes the message proto2_unittest.TestEagerlyVerifiedLazyMessage.LazyMessage.
 * Use `create(TestEagerlyVerifiedLazyMessage_LazyMessageSchema)` to create a new message.
 */
export const TestEagerlyVerifiedLazyMessage_LazyMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 74, 0);

/**
 * Describes the message proto2_unittest.FooRequest.
 * Use `create(FooRequestSchema)` to create a new message.
 */
export const FooRequestSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 75);

/**
 * Describes the message proto2_unittest.FooResponse.
 * Use `create(FooResponseSchema)` to create a new message.
 */
export const FooResponseSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 76);

/**
 * Describes the message proto2_unittest.FooClientMessage.
 * Use `create(FooClientMessageSchema)` to create a new message.
 */
export const FooClientMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 77);

/**
 * Describes the message proto2_unittest.FooServerMessage.
 * Use `create(FooServerMessageSchema)` to create a new message.
 */
export const FooServerMessageSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 78);

/**
 * Describes the message proto2_unittest.BarRequest.
 * Use `create(BarRequestSchema)` to create a new message.
 */
export const BarRequestSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 79);

/**
 * Describes the message proto2_unittest.BarResponse.
 * Use `create(BarResponseSchema)` to create a new message.
 */
export const BarResponseSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 80);

/**
 * Describes the message proto2_unittest.TestJsonName.
 * Use `create(TestJsonNameSchema)` to create a new message.
 */
export const TestJsonNameSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 81);

/**
 * Describes the message proto2_unittest.TestHugeFieldNumbers.
 * Use `create(TestHugeFieldNumbersSchema)` to create a new message.
 */
export const TestHugeFieldNumbersSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 82);

/**
 * Describes the message proto2_unittest.TestHugeFieldNumbers.OptionalGroup.
 * Use `create(TestHugeFieldNumbers_OptionalGroupSchema)` to create a new message.
 */
export const TestHugeFieldNumbers_OptionalGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 82, 0);

/**
 * Describes the message proto2_unittest.TestExtensionInsideTable.
 * Use `create(TestExtensionInsideTableSchema)` to create a new message.
 */
export const TestExtensionInsideTableSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 83);

/**
 * Describes the message proto2_unittest.TestNestedGroupExtensionOuter.
 * Use `create(TestNestedGroupExtensionOuterSchema)` to create a new message.
 */
export const TestNestedGroupExtensionOuterSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 84);

/**
 * Describes the message proto2_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.
 * Use `create(TestNestedGroupExtensionOuter_Layer1OptionalGroupSchema)` to create a new message.
 */
export const TestNestedGroupExtensionOuter_Layer1OptionalGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 84, 0);

/**
 * Describes the message proto2_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2RepeatedGroup.
 * Use `create(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroupSchema)` to create a new message.
 */
export const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2RepeatedGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 84, 0, 0);

/**
 * Describes the message proto2_unittest.TestNestedGroupExtensionOuter.Layer1OptionalGroup.Layer2AnotherOptionalRepeatedGroup.
 * Use `create(TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroupSchema)` to create a new message.
 */
export const TestNestedGroupExtensionOuter_Layer1OptionalGroup_Layer2AnotherOptionalRepeatedGroupSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 84, 0, 1);

/**
 * Describes the message proto2_unittest.TestNestedGroupExtensionInnerExtension.
 * Use `create(TestNestedGroupExtensionInnerExtensionSchema)` to create a new message.
 */
export const TestNestedGroupExtensionInnerExtensionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 85);

/**
 * Describes the message proto2_unittest.TestExtensionRangeSerialize.
 * Use `create(TestExtensionRangeSerializeSchema)` to create a new message.
 */
export const TestExtensionRangeSerializeSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 86);

/**
 * @generated from extension: int32 bar_one = 2;
 */
export const TestExtensionRangeSerialize_bar_one = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 86, 0);

/**
 * @generated from extension: int32 bar_two = 4;
 */
export const TestExtensionRangeSerialize_bar_two = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 86, 1);

/**
 * @generated from extension: int32 bar_three = 10;
 */
export const TestExtensionRangeSerialize_bar_three = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 86, 2);

/**
 * @generated from extension: int32 bar_four = 15;
 */
export const TestExtensionRangeSerialize_bar_four = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 86, 3);

/**
 * @generated from extension: int32 bar_five = 19;
 */
export const TestExtensionRangeSerialize_bar_five = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 86, 4);

/**
 * Describes the message proto2_unittest.TestVerifyInt32Simple.
 * Use `create(TestVerifyInt32SimpleSchema)` to create a new message.
 */
export const TestVerifyInt32SimpleSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 87);

/**
 * Describes the message proto2_unittest.TestVerifyInt32.
 * Use `create(TestVerifyInt32Schema)` to create a new message.
 */
export const TestVerifyInt32Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 88);

/**
 * Describes the message proto2_unittest.TestVerifyMostlyInt32.
 * Use `create(TestVerifyMostlyInt32Schema)` to create a new message.
 */
export const TestVerifyMostlyInt32Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 89);

/**
 * Describes the message proto2_unittest.TestVerifyMostlyInt32BigFieldNumber.
 * Use `create(TestVerifyMostlyInt32BigFieldNumberSchema)` to create a new message.
 */
export const TestVerifyMostlyInt32BigFieldNumberSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 90);

/**
 * Describes the message proto2_unittest.TestVerifyUint32Simple.
 * Use `create(TestVerifyUint32SimpleSchema)` to create a new message.
 */
export const TestVerifyUint32SimpleSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 91);

/**
 * Describes the message proto2_unittest.TestVerifyUint32.
 * Use `create(TestVerifyUint32Schema)` to create a new message.
 */
export const TestVerifyUint32Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 92);

/**
 * Describes the message proto2_unittest.TestVerifyOneUint32.
 * Use `create(TestVerifyOneUint32Schema)` to create a new message.
 */
export const TestVerifyOneUint32Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 93);

/**
 * Describes the message proto2_unittest.TestVerifyOneInt32BigFieldNumber.
 * Use `create(TestVerifyOneInt32BigFieldNumberSchema)` to create a new message.
 */
export const TestVerifyOneInt32BigFieldNumberSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 94);

/**
 * Describes the message proto2_unittest.TestVerifyInt32BigFieldNumber.
 * Use `create(TestVerifyInt32BigFieldNumberSchema)` to create a new message.
 */
export const TestVerifyInt32BigFieldNumberSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 95);

/**
 * Describes the message proto2_unittest.TestVerifyUint32BigFieldNumber.
 * Use `create(TestVerifyUint32BigFieldNumberSchema)` to create a new message.
 */
export const TestVerifyUint32BigFieldNumberSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 96);

/**
 * Describes the message proto2_unittest.TestVerifyBigFieldNumberUint32.
 * Use `create(TestVerifyBigFieldNumberUint32Schema)` to create a new message.
 */
export const TestVerifyBigFieldNumberUint32Schema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 97);

/**
 * Describes the message proto2_unittest.TestVerifyBigFieldNumberUint32.Nested.
 * Use `create(TestVerifyBigFieldNumberUint32_NestedSchema)` to create a new message.
 */
export const TestVerifyBigFieldNumberUint32_NestedSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 97, 0);

/**
 * Describes the message proto2_unittest.EnumParseTester.
 * Use `create(EnumParseTesterSchema)` to create a new message.
 */
export const EnumParseTesterSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 98);

/**
 * Describes the enum proto2_unittest.EnumParseTester.SeqSmall0.
 */
export const EnumParseTester_SeqSmall0Schema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 98, 0);

/**
 * @generated from enum proto2_unittest.EnumParseTester.SeqSmall0
 */
export const EnumParseTester_SeqSmall0 = /*@__PURE__*/
  tsEnum(EnumParseTester_SeqSmall0Schema);

/**
 * Describes the enum proto2_unittest.EnumParseTester.SeqSmall1.
 */
export const EnumParseTester_SeqSmall1Schema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 98, 1);

/**
 * @generated from enum proto2_unittest.EnumParseTester.SeqSmall1
 */
export const EnumParseTester_SeqSmall1 = /*@__PURE__*/
  tsEnum(EnumParseTester_SeqSmall1Schema);

/**
 * Describes the enum proto2_unittest.EnumParseTester.SeqLarge.
 */
export const EnumParseTester_SeqLargeSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 98, 2);

/**
 * @generated from enum proto2_unittest.EnumParseTester.SeqLarge
 */
export const EnumParseTester_SeqLarge = /*@__PURE__*/
  tsEnum(EnumParseTester_SeqLargeSchema);

/**
 * Describes the enum proto2_unittest.EnumParseTester.Arbitrary.
 */
export const EnumParseTester_ArbitrarySchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 98, 3);

/**
 * @generated from enum proto2_unittest.EnumParseTester.Arbitrary
 */
export const EnumParseTester_Arbitrary = /*@__PURE__*/
  tsEnum(EnumParseTester_ArbitrarySchema);

/**
 * @generated from extension: proto2_unittest.EnumParseTester.Arbitrary optional_arbitrary_ext = 2000000;
 */
export const EnumParseTester_optional_arbitrary_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 98, 0);

/**
 * @generated from extension: repeated proto2_unittest.EnumParseTester.Arbitrary repeated_arbitrary_ext = 2000001;
 */
export const EnumParseTester_repeated_arbitrary_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 98, 1);

/**
 * @generated from extension: repeated proto2_unittest.EnumParseTester.Arbitrary packed_arbitrary_ext = 2000002 [features.repeated_field_encoding = PACKED];
 */
export const EnumParseTester_packed_arbitrary_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 98, 2);

/**
 * Describes the message proto2_unittest.BoolParseTester.
 * Use `create(BoolParseTesterSchema)` to create a new message.
 */
export const BoolParseTesterSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 99);

/**
 * @generated from extension: bool optional_bool_ext = 2000000;
 */
export const BoolParseTester_optional_bool_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 99, 0);

/**
 * @generated from extension: repeated bool repeated_bool_ext = 2000001;
 */
export const BoolParseTester_repeated_bool_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 99, 1);

/**
 * @generated from extension: repeated bool packed_bool_ext = 2000002 [features.repeated_field_encoding = PACKED];
 */
export const BoolParseTester_packed_bool_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 99, 2);

/**
 * Describes the message proto2_unittest.Int32ParseTester.
 * Use `create(Int32ParseTesterSchema)` to create a new message.
 */
export const Int32ParseTesterSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 100);

/**
 * @generated from extension: int32 optional_int32_ext = 2000000;
 */
export const Int32ParseTester_optional_int32_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 100, 0);

/**
 * @generated from extension: repeated int32 repeated_int32_ext = 2000001;
 */
export const Int32ParseTester_repeated_int32_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 100, 1);

/**
 * @generated from extension: repeated int32 packed_int32_ext = 2000002 [features.repeated_field_encoding = PACKED];
 */
export const Int32ParseTester_packed_int32_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 100, 2);

/**
 * Describes the message proto2_unittest.Int64ParseTester.
 * Use `create(Int64ParseTesterSchema)` to create a new message.
 */
export const Int64ParseTesterSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 101);

/**
 * @generated from extension: int64 optional_int64_ext = 2000000;
 */
export const Int64ParseTester_optional_int64_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 101, 0);

/**
 * @generated from extension: repeated int64 repeated_int64_ext = 2000001;
 */
export const Int64ParseTester_repeated_int64_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 101, 1);

/**
 * @generated from extension: repeated int64 packed_int64_ext = 2000002 [features.repeated_field_encoding = PACKED];
 */
export const Int64ParseTester_packed_int64_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 101, 2);

/**
 * Describes the message proto2_unittest.InlinedStringIdxRegressionProto.
 * Use `create(InlinedStringIdxRegressionProtoSchema)` to create a new message.
 */
export const InlinedStringIdxRegressionProtoSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 102);

/**
 * Describes the message proto2_unittest.StringParseTester.
 * Use `create(StringParseTesterSchema)` to create a new message.
 */
export const StringParseTesterSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 103);

/**
 * @generated from extension: string optional_string_ext = 2000000;
 */
export const StringParseTester_optional_string_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 103, 0);

/**
 * @generated from extension: repeated string repeated_string_ext = 2000001;
 */
export const StringParseTester_repeated_string_ext = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 103, 1);

/**
 * Describes the message proto2_unittest.BadFieldNames.
 * Use `create(BadFieldNamesSchema)` to create a new message.
 */
export const BadFieldNamesSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 104);

/**
 * Describes the message proto2_unittest.TestNestedMessageRedaction.
 * Use `create(TestNestedMessageRedactionSchema)` to create a new message.
 */
export const TestNestedMessageRedactionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 105);

/**
 * Describes the message proto2_unittest.RedactedFields.
 * Use `create(RedactedFieldsSchema)` to create a new message.
 */
export const RedactedFieldsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 106);

/**
 * Describes the message proto2_unittest.TestString.
 * Use `create(TestStringSchema)` to create a new message.
 */
export const TestStringSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 107);

/**
 * Describes the message proto2_unittest.TestCord.
 * Use `create(TestCordSchema)` to create a new message.
 */
export const TestCordSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 108);

/**
 * Describes the message proto2_unittest.TestPackedEnumSmallRange.
 * Use `create(TestPackedEnumSmallRangeSchema)` to create a new message.
 */
export const TestPackedEnumSmallRangeSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 109);

/**
 * Describes the enum proto2_unittest.TestPackedEnumSmallRange.NestedEnum.
 */
export const TestPackedEnumSmallRange_NestedEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 109, 0);

/**
 * @generated from enum proto2_unittest.TestPackedEnumSmallRange.NestedEnum
 */
export const TestPackedEnumSmallRange_NestedEnum = /*@__PURE__*/
  tsEnum(TestPackedEnumSmallRange_NestedEnumSchema);

/**
 * Describes the message proto2_unittest.EnumsForBenchmark.
 * Use `create(EnumsForBenchmarkSchema)` to create a new message.
 */
export const EnumsForBenchmarkSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 110);

/**
 * Describes the enum proto2_unittest.EnumsForBenchmark.Flat.
 */
export const EnumsForBenchmark_FlatSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 110, 0);

/**
 * @generated from enum proto2_unittest.EnumsForBenchmark.Flat
 */
export const EnumsForBenchmark_Flat = /*@__PURE__*/
  tsEnum(EnumsForBenchmark_FlatSchema);

/**
 * Describes the enum proto2_unittest.EnumsForBenchmark.AlmostFlat.
 */
export const EnumsForBenchmark_AlmostFlatSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 110, 1);

/**
 * Has a few holes, bitmap can be used.
 *
 * @generated from enum proto2_unittest.EnumsForBenchmark.AlmostFlat
 */
export const EnumsForBenchmark_AlmostFlat = /*@__PURE__*/
  tsEnum(EnumsForBenchmark_AlmostFlatSchema);

/**
 * Describes the enum proto2_unittest.EnumsForBenchmark.Sparse.
 */
export const EnumsForBenchmark_SparseSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 110, 2);

/**
 * @generated from enum proto2_unittest.EnumsForBenchmark.Sparse
 */
export const EnumsForBenchmark_Sparse = /*@__PURE__*/
  tsEnum(EnumsForBenchmark_SparseSchema);

/**
 * Describes the message proto2_unittest.TestMessageWithManyRepeatedPtrFields.
 * Use `create(TestMessageWithManyRepeatedPtrFieldsSchema)` to create a new message.
 */
export const TestMessageWithManyRepeatedPtrFieldsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 111);

/**
 * Describes the message proto2_unittest.MessageCreatorZeroInit.
 * Use `create(MessageCreatorZeroInitSchema)` to create a new message.
 */
export const MessageCreatorZeroInitSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 112);

/**
 * Describes the message proto2_unittest.MessageCreatorMemcpy.
 * Use `create(MessageCreatorMemcpySchema)` to create a new message.
 */
export const MessageCreatorMemcpySchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 113);

/**
 * Describes the message proto2_unittest.MessageCreatorFunc.
 * Use `create(MessageCreatorFuncSchema)` to create a new message.
 */
export const MessageCreatorFuncSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 114);

/**
 * Describes the message proto2_unittest.FastParseTableCompression.
 * Use `create(FastParseTableCompressionSchema)` to create a new message.
 */
export const FastParseTableCompressionSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 115);

/**
 * Describes the message proto2_unittest.TestMessageForMove_Small.
 * Use `create(TestMessageForMove_SmallSchema)` to create a new message.
 */
export const TestMessageForMove_SmallSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 116);

/**
 * Describes the message proto2_unittest.TestMessageForMove_Large.
 * Use `create(TestMessageForMove_LargeSchema)` to create a new message.
 */
export const TestMessageForMove_LargeSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_unittest, 117);

/**
 * Describes the enum proto2_unittest.ForeignEnum.
 */
export const ForeignEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 0);

/**
 * @generated from enum proto2_unittest.ForeignEnum
 */
export const ForeignEnum = /*@__PURE__*/
  tsEnum(ForeignEnumSchema);

/**
 * Describes the enum proto2_unittest.TestReservedEnumFields.
 */
export const TestReservedEnumFieldsSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 1);

/**
 * @generated from enum proto2_unittest.TestReservedEnumFields
 */
export const TestReservedEnumFields = /*@__PURE__*/
  tsEnum(TestReservedEnumFieldsSchema);

/**
 * Describes the enum proto2_unittest.ForeignOpenEnum.
 */
export const ForeignOpenEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 2);

/**
 * Required and open enum accepts invalid enum values.
 *
 * @generated from enum proto2_unittest.ForeignOpenEnum
 * @generated with option features.enum_type = OPEN
 */
export const ForeignOpenEnum = /*@__PURE__*/
  tsEnum(ForeignOpenEnumSchema);

/**
 * Describes the enum proto2_unittest.TestEnumWithDupValue.
 */
export const TestEnumWithDupValueSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 3);

/**
 * Test an enum that has multiple values with the same number.
 *
 * @generated from enum proto2_unittest.TestEnumWithDupValue
 */
export const TestEnumWithDupValue = /*@__PURE__*/
  tsEnum(TestEnumWithDupValueSchema);

/**
 * Describes the enum proto2_unittest.TestSparseEnum.
 */
export const TestSparseEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 4);

/**
 * Test an enum with large, unordered values.
 *
 * @generated from enum proto2_unittest.TestSparseEnum
 */
export const TestSparseEnum = /*@__PURE__*/
  tsEnum(TestSparseEnumSchema);

/**
 * Describes the enum proto2_unittest.VeryLargeEnum.
 */
export const VeryLargeEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_unittest, 5);

/**
 * @generated from enum proto2_unittest.VeryLargeEnum
 */
export const VeryLargeEnum = /*@__PURE__*/
  tsEnum(VeryLargeEnumSchema);

/**
 * @generated from service proto2_unittest.TestService
 */
export const TestService = /*@__PURE__*/
  serviceDesc(file_google_protobuf_unittest, 0);

/**
 * Singular
 *
 * @generated from extension: int32 optional_int32_extension = 1;
 */
export const optional_int32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 0);

/**
 * @generated from extension: int64 optional_int64_extension = 2;
 */
export const optional_int64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 1);

/**
 * @generated from extension: uint32 optional_uint32_extension = 3;
 */
export const optional_uint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 2);

/**
 * @generated from extension: uint64 optional_uint64_extension = 4;
 */
export const optional_uint64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 3);

/**
 * @generated from extension: sint32 optional_sint32_extension = 5;
 */
export const optional_sint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 4);

/**
 * @generated from extension: sint64 optional_sint64_extension = 6;
 */
export const optional_sint64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 5);

/**
 * @generated from extension: fixed32 optional_fixed32_extension = 7;
 */
export const optional_fixed32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 6);

/**
 * @generated from extension: fixed64 optional_fixed64_extension = 8;
 */
export const optional_fixed64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 7);

/**
 * @generated from extension: sfixed32 optional_sfixed32_extension = 9;
 */
export const optional_sfixed32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 8);

/**
 * @generated from extension: sfixed64 optional_sfixed64_extension = 10;
 */
export const optional_sfixed64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 9);

/**
 * @generated from extension: float optional_float_extension = 11;
 */
export const optional_float_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 10);

/**
 * @generated from extension: double optional_double_extension = 12;
 */
export const optional_double_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 11);

/**
 * @generated from extension: bool optional_bool_extension = 13;
 */
export const optional_bool_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 12);

/**
 * @generated from extension: string optional_string_extension = 14;
 */
export const optional_string_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 13);

/**
 * @generated from extension: bytes optional_bytes_extension = 15;
 */
export const optional_bytes_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 14);

/**
 * @generated from extension: proto2_unittest.OptionalGroup_extension optionalgroup_extension = 16 [features.message_encoding = DELIMITED];
 */
export const optionalgroup_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 15);

/**
 * @generated from extension: proto2_unittest.TestAllTypes.NestedMessage optional_nested_message_extension = 18;
 */
export const optional_nested_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 16);

/**
 * @generated from extension: proto2_unittest.ForeignMessage optional_foreign_message_extension = 19;
 */
export const optional_foreign_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 17);

/**
 * @generated from extension: proto2_unittest_import.ImportMessage optional_import_message_extension = 20;
 */
export const optional_import_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 18);

/**
 * @generated from extension: proto2_unittest.TestAllTypes.NestedEnum optional_nested_enum_extension = 21;
 */
export const optional_nested_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 19);

/**
 * @generated from extension: proto2_unittest.ForeignEnum optional_foreign_enum_extension = 22;
 */
export const optional_foreign_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 20);

/**
 * @generated from extension: proto2_unittest_import.ImportEnum optional_import_enum_extension = 23;
 */
export const optional_import_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 21);

/**
 * @generated from extension: string optional_string_piece_extension = 24;
 */
export const optional_string_piece_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 22);

/**
 * TODO: ctype=CORD is not supported for extension. Add
 * ctype=CORD option back after it is supported.
 *
 * @generated from extension: string optional_cord_extension = 25;
 */
export const optional_cord_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 23);

/**
 * @generated from extension: bytes optional_bytes_cord_extension = 86;
 */
export const optional_bytes_cord_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 24);

/**
 * @generated from extension: proto2_unittest_import.PublicImportMessage optional_public_import_message_extension = 26;
 */
export const optional_public_import_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 25);

/**
 * @generated from extension: proto2_unittest.TestAllTypes.NestedMessage optional_lazy_message_extension = 27;
 */
export const optional_lazy_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 26);

/**
 * @generated from extension: proto2_unittest.TestAllTypes.NestedMessage optional_unverified_lazy_message_extension = 28;
 */
export const optional_unverified_lazy_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 27);

/**
 * Repeated
 *
 * @generated from extension: repeated int32 repeated_int32_extension = 31;
 */
export const repeated_int32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 28);

/**
 * @generated from extension: repeated int64 repeated_int64_extension = 32;
 */
export const repeated_int64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 29);

/**
 * @generated from extension: repeated uint32 repeated_uint32_extension = 33;
 */
export const repeated_uint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 30);

/**
 * @generated from extension: repeated uint64 repeated_uint64_extension = 34;
 */
export const repeated_uint64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 31);

/**
 * @generated from extension: repeated sint32 repeated_sint32_extension = 35;
 */
export const repeated_sint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 32);

/**
 * @generated from extension: repeated sint64 repeated_sint64_extension = 36;
 */
export const repeated_sint64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 33);

/**
 * @generated from extension: repeated fixed32 repeated_fixed32_extension = 37;
 */
export const repeated_fixed32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 34);

/**
 * @generated from extension: repeated fixed64 repeated_fixed64_extension = 38;
 */
export const repeated_fixed64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 35);

/**
 * @generated from extension: repeated sfixed32 repeated_sfixed32_extension = 39;
 */
export const repeated_sfixed32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 36);

/**
 * @generated from extension: repeated sfixed64 repeated_sfixed64_extension = 40;
 */
export const repeated_sfixed64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 37);

/**
 * @generated from extension: repeated float repeated_float_extension = 41;
 */
export const repeated_float_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 38);

/**
 * @generated from extension: repeated double repeated_double_extension = 42;
 */
export const repeated_double_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 39);

/**
 * @generated from extension: repeated bool repeated_bool_extension = 43;
 */
export const repeated_bool_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 40);

/**
 * @generated from extension: repeated string repeated_string_extension = 44;
 */
export const repeated_string_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 41);

/**
 * @generated from extension: repeated bytes repeated_bytes_extension = 45;
 */
export const repeated_bytes_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 42);

/**
 * @generated from extension: repeated proto2_unittest.RepeatedGroup_extension repeatedgroup_extension = 46 [features.message_encoding = DELIMITED];
 */
export const repeatedgroup_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 43);

/**
 * @generated from extension: repeated proto2_unittest.TestAllTypes.NestedMessage repeated_nested_message_extension = 48;
 */
export const repeated_nested_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 44);

/**
 * @generated from extension: repeated proto2_unittest.ForeignMessage repeated_foreign_message_extension = 49;
 */
export const repeated_foreign_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 45);

/**
 * @generated from extension: repeated proto2_unittest_import.ImportMessage repeated_import_message_extension = 50;
 */
export const repeated_import_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 46);

/**
 * @generated from extension: repeated proto2_unittest.TestAllTypes.NestedEnum repeated_nested_enum_extension = 51;
 */
export const repeated_nested_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 47);

/**
 * @generated from extension: repeated proto2_unittest.ForeignEnum repeated_foreign_enum_extension = 52;
 */
export const repeated_foreign_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 48);

/**
 * @generated from extension: repeated proto2_unittest_import.ImportEnum repeated_import_enum_extension = 53;
 */
export const repeated_import_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 49);

/**
 * @generated from extension: repeated string repeated_string_piece_extension = 54;
 */
export const repeated_string_piece_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 50);

/**
 * TODO: ctype=CORD is not supported for extension. Add
 * ctype=CORD option back after it is supported.
 *
 * @generated from extension: repeated string repeated_cord_extension = 55;
 */
export const repeated_cord_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 51);

/**
 * @generated from extension: repeated proto2_unittest.TestAllTypes.NestedMessage repeated_lazy_message_extension = 57;
 */
export const repeated_lazy_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 52);

/**
 * Singular with defaults
 *
 * @generated from extension: int32 default_int32_extension = 61 [default = 41];
 */
export const default_int32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 53);

/**
 * @generated from extension: int64 default_int64_extension = 62 [default = 42];
 */
export const default_int64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 54);

/**
 * @generated from extension: uint32 default_uint32_extension = 63 [default = 43];
 */
export const default_uint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 55);

/**
 * @generated from extension: uint64 default_uint64_extension = 64 [default = 44];
 */
export const default_uint64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 56);

/**
 * @generated from extension: sint32 default_sint32_extension = 65 [default = -45];
 */
export const default_sint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 57);

/**
 * @generated from extension: sint64 default_sint64_extension = 66 [default = 46];
 */
export const default_sint64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 58);

/**
 * @generated from extension: fixed32 default_fixed32_extension = 67 [default = 47];
 */
export const default_fixed32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 59);

/**
 * @generated from extension: fixed64 default_fixed64_extension = 68 [default = 48];
 */
export const default_fixed64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 60);

/**
 * @generated from extension: sfixed32 default_sfixed32_extension = 69 [default = 49];
 */
export const default_sfixed32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 61);

/**
 * @generated from extension: sfixed64 default_sfixed64_extension = 70 [default = -50];
 */
export const default_sfixed64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 62);

/**
 * @generated from extension: float default_float_extension = 71 [default = 51.5];
 */
export const default_float_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 63);

/**
 * @generated from extension: double default_double_extension = 72 [default = 52000];
 */
export const default_double_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 64);

/**
 * @generated from extension: bool default_bool_extension = 73 [default = true];
 */
export const default_bool_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 65);

/**
 * @generated from extension: string default_string_extension = 74 [default = "hello"];
 */
export const default_string_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 66);

/**
 * @generated from extension: bytes default_bytes_extension = 75 [default = "world"];
 */
export const default_bytes_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 67);

/**
 * @generated from extension: proto2_unittest.TestAllTypes.NestedEnum default_nested_enum_extension = 81 [default = BAR];
 */
export const default_nested_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 68);

/**
 * @generated from extension: proto2_unittest.ForeignEnum default_foreign_enum_extension = 82 [default = FOREIGN_BAR];
 */
export const default_foreign_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 69);

/**
 * @generated from extension: proto2_unittest_import.ImportEnum default_import_enum_extension = 83 [default = IMPORT_BAR];
 */
export const default_import_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 70);

/**
 * @generated from extension: string default_string_piece_extension = 84 [default = "abc"];
 */
export const default_string_piece_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 71);

/**
 * TODO: ctype=CORD is not supported for extension. Add
 * ctype=CORD option back after it is supported.
 *
 * @generated from extension: string default_cord_extension = 85 [default = "123"];
 */
export const default_cord_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 72);

/**
 * For oneof test
 *
 * @generated from extension: uint32 oneof_uint32_extension = 111;
 */
export const oneof_uint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 73);

/**
 * @generated from extension: proto2_unittest.TestAllTypes.NestedMessage oneof_nested_message_extension = 112;
 */
export const oneof_nested_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 74);

/**
 * @generated from extension: string oneof_string_extension = 113;
 */
export const oneof_string_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 75);

/**
 * @generated from extension: bytes oneof_bytes_extension = 114;
 */
export const oneof_bytes_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 76);

/**
 * @generated from extension: string optional_utf8_string_extension = 115 [features.utf8_validation = VERIFY];
 */
export const optional_utf8_string_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 77);

/**
 * @generated from extension: repeated string repeated_utf8_string_extension = 116 [features.utf8_validation = VERIFY];
 */
export const repeated_utf8_string_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 78);

/**
 * Singular message containing required fields; used to test initialization.
 *
 * @generated from extension: proto2_unittest.TestRequired required_message_extension = 117;
 */
export const required_message_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 79);

/**
 * @generated from extension: string my_extension_string = 50;
 */
export const my_extension_string = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 80);

/**
 * @generated from extension: int32 my_extension_int = 5;
 */
export const my_extension_int = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 81);

/**
 * @generated from extension: repeated int32 packed_int32_extension = 90 [features.repeated_field_encoding = PACKED];
 */
export const packed_int32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 82);

/**
 * @generated from extension: repeated int64 packed_int64_extension = 91 [features.repeated_field_encoding = PACKED];
 */
export const packed_int64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 83);

/**
 * @generated from extension: repeated uint32 packed_uint32_extension = 92 [features.repeated_field_encoding = PACKED];
 */
export const packed_uint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 84);

/**
 * @generated from extension: repeated uint64 packed_uint64_extension = 93 [features.repeated_field_encoding = PACKED];
 */
export const packed_uint64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 85);

/**
 * @generated from extension: repeated sint32 packed_sint32_extension = 94 [features.repeated_field_encoding = PACKED];
 */
export const packed_sint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 86);

/**
 * @generated from extension: repeated sint64 packed_sint64_extension = 95 [features.repeated_field_encoding = PACKED];
 */
export const packed_sint64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 87);

/**
 * @generated from extension: repeated fixed32 packed_fixed32_extension = 96 [features.repeated_field_encoding = PACKED];
 */
export const packed_fixed32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 88);

/**
 * @generated from extension: repeated fixed64 packed_fixed64_extension = 97 [features.repeated_field_encoding = PACKED];
 */
export const packed_fixed64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 89);

/**
 * @generated from extension: repeated sfixed32 packed_sfixed32_extension = 98 [features.repeated_field_encoding = PACKED];
 */
export const packed_sfixed32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 90);

/**
 * @generated from extension: repeated sfixed64 packed_sfixed64_extension = 99 [features.repeated_field_encoding = PACKED];
 */
export const packed_sfixed64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 91);

/**
 * @generated from extension: repeated float packed_float_extension = 100 [features.repeated_field_encoding = PACKED];
 */
export const packed_float_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 92);

/**
 * @generated from extension: repeated double packed_double_extension = 101 [features.repeated_field_encoding = PACKED];
 */
export const packed_double_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 93);

/**
 * @generated from extension: repeated bool packed_bool_extension = 102 [features.repeated_field_encoding = PACKED];
 */
export const packed_bool_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 94);

/**
 * @generated from extension: repeated proto2_unittest.ForeignEnum packed_enum_extension = 103 [features.repeated_field_encoding = PACKED];
 */
export const packed_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 95);

/**
 * @generated from extension: repeated int32 unpacked_int32_extension = 90;
 */
export const unpacked_int32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 96);

/**
 * @generated from extension: repeated int64 unpacked_int64_extension = 91;
 */
export const unpacked_int64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 97);

/**
 * @generated from extension: repeated uint32 unpacked_uint32_extension = 92;
 */
export const unpacked_uint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 98);

/**
 * @generated from extension: repeated uint64 unpacked_uint64_extension = 93;
 */
export const unpacked_uint64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 99);

/**
 * @generated from extension: repeated sint32 unpacked_sint32_extension = 94;
 */
export const unpacked_sint32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 100);

/**
 * @generated from extension: repeated sint64 unpacked_sint64_extension = 95;
 */
export const unpacked_sint64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 101);

/**
 * @generated from extension: repeated fixed32 unpacked_fixed32_extension = 96;
 */
export const unpacked_fixed32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 102);

/**
 * @generated from extension: repeated fixed64 unpacked_fixed64_extension = 97;
 */
export const unpacked_fixed64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 103);

/**
 * @generated from extension: repeated sfixed32 unpacked_sfixed32_extension = 98;
 */
export const unpacked_sfixed32_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 104);

/**
 * @generated from extension: repeated sfixed64 unpacked_sfixed64_extension = 99;
 */
export const unpacked_sfixed64_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 105);

/**
 * @generated from extension: repeated float unpacked_float_extension = 100;
 */
export const unpacked_float_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 106);

/**
 * @generated from extension: repeated double unpacked_double_extension = 101;
 */
export const unpacked_double_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 107);

/**
 * @generated from extension: repeated bool unpacked_bool_extension = 102;
 */
export const unpacked_bool_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 108);

/**
 * @generated from extension: repeated proto2_unittest.ForeignEnum unpacked_enum_extension = 103;
 */
export const unpacked_enum_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 109);

/**
 * @generated from extension: proto2_unittest.TestAllTypes test_all_types = 536860000;
 */
export const test_all_types = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 110);

/**
 * @generated from extension: int32 test_extension_inside_table_extension = 5;
 */
export const test_extension_inside_table_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 111);

/**
 * @generated from extension: proto2_unittest.TestNestedGroupExtensionInnerExtension inner = 3;
 */
export const inner = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 112);

/**
 * @generated from extension: string redacted_extension = 20;
 */
export const redacted_extension = /*@__PURE__*/
  extDesc(file_google_protobuf_unittest, 113);

