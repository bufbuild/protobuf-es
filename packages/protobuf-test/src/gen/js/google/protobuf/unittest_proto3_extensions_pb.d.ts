// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.9.0 with parameter "ts_nocheck=false,target=js+dts"
// @generated from file google/protobuf/unittest_proto3_extensions.proto (package protobuf_unittest, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, Extension, FieldList, FileOptions, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * For testing proto3 extension behaviors.
 *
 * @generated from message protobuf_unittest.Proto3FileExtensions
 */
export declare class Proto3FileExtensions extends Message<Proto3FileExtensions> {
  constructor(data?: PartialMessage<Proto3FileExtensions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "protobuf_unittest.Proto3FileExtensions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proto3FileExtensions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proto3FileExtensions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proto3FileExtensions;

  static equals(a: Proto3FileExtensions | PlainMessage<Proto3FileExtensions> | undefined, b: Proto3FileExtensions | PlainMessage<Proto3FileExtensions> | undefined): boolean;
}

/**
 * @generated from extension: int32 singular_int = 1001;
 */
export declare const Proto3FileExtensions_singular_int: Extension<FileOptions, number>;

/**
 * @generated from extension: repeated int32 repeated_int = 1002;
 */
export declare const Proto3FileExtensions_repeated_int: Extension<FileOptions, number[]>;

