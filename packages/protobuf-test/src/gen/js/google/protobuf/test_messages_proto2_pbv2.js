// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// LINT: ALLOW_GROUPS

// @generated by protoc-gen-es-next v1.7.2 with parameter "ts_nocheck=false,target=js+dts"
// @generated from file google/protobuf/test_messages_proto2.proto (package protobuf_test_messages.proto2, syntax proto2)
/* eslint-disable */

import { enumDesc, extDesc, fileDesc, messageDesc, tsEnum } from "@bufbuild/protobuf/next/codegenv1";

export const fileDesc_google_protobuf_test_messages_proto2 = fileDesc("");

// Describes the message protobuf_test_messages.proto2.TestAllTypesProto2. Use `create(TestAllTypesProto2Desc)` to create a new TestAllTypesProto2.
export const TestAllTypesProto2Desc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 0);

// Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.NestedMessage. Use `create(TestAllTypesProto2_NestedMessageDesc)` to create a new TestAllTypesProto2_NestedMessage.
export const TestAllTypesProto2_NestedMessageDesc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 0, 0);

// Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.Data. Use `create(TestAllTypesProto2_DataDesc)` to create a new TestAllTypesProto2_Data.
export const TestAllTypesProto2_DataDesc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 0, 1);

// Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrect. Use `create(TestAllTypesProto2_MessageSetCorrectDesc)` to create a new TestAllTypesProto2_MessageSetCorrect.
export const TestAllTypesProto2_MessageSetCorrectDesc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 0, 2);

// Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1. Use `create(TestAllTypesProto2_MessageSetCorrectExtension1Desc)` to create a new TestAllTypesProto2_MessageSetCorrectExtension1.
export const TestAllTypesProto2_MessageSetCorrectExtension1Desc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 0, 3);

/**
 * @generated from extension: optional protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension1 message_set_extension = 1547769;
 */
export const TestAllTypesProto2_MessageSetCorrectExtension1_message_set_extension = extDesc(fileDesc_google_protobuf_test_messages_proto2, 0, 3, 0);

// Describes the message protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2. Use `create(TestAllTypesProto2_MessageSetCorrectExtension2Desc)` to create a new TestAllTypesProto2_MessageSetCorrectExtension2.
export const TestAllTypesProto2_MessageSetCorrectExtension2Desc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 0, 4);

/**
 * @generated from extension: optional protobuf_test_messages.proto2.TestAllTypesProto2.MessageSetCorrectExtension2 message_set_extension = 4135312;
 */
export const TestAllTypesProto2_MessageSetCorrectExtension2_message_set_extension = extDesc(fileDesc_google_protobuf_test_messages_proto2, 0, 4, 0);

// Describes the enum protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum.
export const TestAllTypesProto2_NestedEnumDesc = enumDesc(fileDesc_google_protobuf_test_messages_proto2, 0, 0);

/**
 * @generated from enum protobuf_test_messages.proto2.TestAllTypesProto2.NestedEnum
 */
export const TestAllTypesProto2_NestedEnum = tsEnum(TestAllTypesProto2_NestedEnumDesc);

// Describes the message protobuf_test_messages.proto2.ForeignMessageProto2. Use `create(ForeignMessageProto2Desc)` to create a new ForeignMessageProto2.
export const ForeignMessageProto2Desc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 1);

// Describes the message protobuf_test_messages.proto2.UnknownToTestAllTypes. Use `create(UnknownToTestAllTypesDesc)` to create a new UnknownToTestAllTypes.
export const UnknownToTestAllTypesDesc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 2);

// Describes the message protobuf_test_messages.proto2.UnknownToTestAllTypes.OptionalGroup. Use `create(UnknownToTestAllTypes_OptionalGroupDesc)` to create a new UnknownToTestAllTypes_OptionalGroup.
export const UnknownToTestAllTypes_OptionalGroupDesc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 2, 0);

// Describes the message protobuf_test_messages.proto2.NullHypothesisProto2. Use `create(NullHypothesisProto2Desc)` to create a new NullHypothesisProto2.
export const NullHypothesisProto2Desc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 3);

// Describes the message protobuf_test_messages.proto2.EnumOnlyProto2. Use `create(EnumOnlyProto2Desc)` to create a new EnumOnlyProto2.
export const EnumOnlyProto2Desc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 4);

// Describes the enum protobuf_test_messages.proto2.EnumOnlyProto2.Bool.
export const EnumOnlyProto2_BoolDesc = enumDesc(fileDesc_google_protobuf_test_messages_proto2, 4, 0);

/**
 * @generated from enum protobuf_test_messages.proto2.EnumOnlyProto2.Bool
 */
export const EnumOnlyProto2_Bool = tsEnum(EnumOnlyProto2_BoolDesc);

// Describes the message protobuf_test_messages.proto2.OneStringProto2. Use `create(OneStringProto2Desc)` to create a new OneStringProto2.
export const OneStringProto2Desc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 5);

// Describes the message protobuf_test_messages.proto2.ProtoWithKeywords. Use `create(ProtoWithKeywordsDesc)` to create a new ProtoWithKeywords.
export const ProtoWithKeywordsDesc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 6);

// Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2. Use `create(TestAllRequiredTypesProto2Desc)` to create a new TestAllRequiredTypesProto2.
export const TestAllRequiredTypesProto2Desc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 7);

// Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.NestedMessage. Use `create(TestAllRequiredTypesProto2_NestedMessageDesc)` to create a new TestAllRequiredTypesProto2_NestedMessage.
export const TestAllRequiredTypesProto2_NestedMessageDesc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 7, 0);

// Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.Data. Use `create(TestAllRequiredTypesProto2_DataDesc)` to create a new TestAllRequiredTypesProto2_Data.
export const TestAllRequiredTypesProto2_DataDesc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 7, 1);

// Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.MessageSetCorrect. Use `create(TestAllRequiredTypesProto2_MessageSetCorrectDesc)` to create a new TestAllRequiredTypesProto2_MessageSetCorrect.
export const TestAllRequiredTypesProto2_MessageSetCorrectDesc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 7, 2);

// Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.MessageSetCorrectExtension1. Use `create(TestAllRequiredTypesProto2_MessageSetCorrectExtension1Desc)` to create a new TestAllRequiredTypesProto2_MessageSetCorrectExtension1.
export const TestAllRequiredTypesProto2_MessageSetCorrectExtension1Desc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 7, 3);

/**
 * @generated from extension: optional protobuf_test_messages.proto2.TestAllRequiredTypesProto2.MessageSetCorrectExtension1 message_set_extension = 1547769;
 */
export const TestAllRequiredTypesProto2_MessageSetCorrectExtension1_message_set_extension = extDesc(fileDesc_google_protobuf_test_messages_proto2, 7, 3, 0);

// Describes the message protobuf_test_messages.proto2.TestAllRequiredTypesProto2.MessageSetCorrectExtension2. Use `create(TestAllRequiredTypesProto2_MessageSetCorrectExtension2Desc)` to create a new TestAllRequiredTypesProto2_MessageSetCorrectExtension2.
export const TestAllRequiredTypesProto2_MessageSetCorrectExtension2Desc = messageDesc(fileDesc_google_protobuf_test_messages_proto2, 7, 4);

/**
 * @generated from extension: optional protobuf_test_messages.proto2.TestAllRequiredTypesProto2.MessageSetCorrectExtension2 message_set_extension = 4135312;
 */
export const TestAllRequiredTypesProto2_MessageSetCorrectExtension2_message_set_extension = extDesc(fileDesc_google_protobuf_test_messages_proto2, 7, 4, 0);

// Describes the enum protobuf_test_messages.proto2.TestAllRequiredTypesProto2.NestedEnum.
export const TestAllRequiredTypesProto2_NestedEnumDesc = enumDesc(fileDesc_google_protobuf_test_messages_proto2, 7, 0);

/**
 * @generated from enum protobuf_test_messages.proto2.TestAllRequiredTypesProto2.NestedEnum
 */
export const TestAllRequiredTypesProto2_NestedEnum = tsEnum(TestAllRequiredTypesProto2_NestedEnumDesc);

// Describes the enum protobuf_test_messages.proto2.ForeignEnumProto2.
export const ForeignEnumProto2Desc = enumDesc(fileDesc_google_protobuf_test_messages_proto2, 0);

/**
 * @generated from enum protobuf_test_messages.proto2.ForeignEnumProto2
 */
export const ForeignEnumProto2 = tsEnum(ForeignEnumProto2Desc);

/**
 * @generated from extension: optional int32 extension_int32 = 120;
 */
export const extension_int32 = extDesc(fileDesc_google_protobuf_test_messages_proto2, 0);

