// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.2.1 with parameter "target=js+dts,import_extension=js"
// @generated from file google/protobuf/map_proto2_unittest.proto (package protobuf_unittest, syntax proto2)
/* eslint-disable */

// We don't put this in a package within proto2 because we need to make sure
// that the generated code doesn't depend on being in the proto2 namespace.
// In map_test_util.h we do "using namespace unittest = protobuf_unittest".

import { enumDesc, fileDesc, messageDesc, tsEnum } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_unittest_import } from "./unittest_import_pb.js";

/**
 * Describes the file google/protobuf/map_proto2_unittest.proto.
 */
export const file_google_protobuf_map_proto2_unittest = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_unittest_import]);

/**
 * Describes the message protobuf_unittest.TestEnumMap.
 * Use `create(TestEnumMapSchema)` to create a new message.
 */
export const TestEnumMapSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_map_proto2_unittest, 0);

/**
 * Describes the message protobuf_unittest.TestEnumMapPlusExtra.
 * Use `create(TestEnumMapPlusExtraSchema)` to create a new message.
 */
export const TestEnumMapPlusExtraSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_map_proto2_unittest, 1);

/**
 * Describes the message protobuf_unittest.TestImportEnumMap.
 * Use `create(TestImportEnumMapSchema)` to create a new message.
 */
export const TestImportEnumMapSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_map_proto2_unittest, 2);

/**
 * Describes the message protobuf_unittest.TestIntIntMap.
 * Use `create(TestIntIntMapSchema)` to create a new message.
 */
export const TestIntIntMapSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_map_proto2_unittest, 3);

/**
 * Describes the message protobuf_unittest.TestMaps.
 * Use `create(TestMapsSchema)` to create a new message.
 */
export const TestMapsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_map_proto2_unittest, 4);

/**
 * Describes the message protobuf_unittest.TestSubmessageMaps.
 * Use `create(TestSubmessageMapsSchema)` to create a new message.
 */
export const TestSubmessageMapsSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_map_proto2_unittest, 5);

/**
 * Describes the message protobuf_unittest.TestProto2BytesMap.
 * Use `create(TestProto2BytesMapSchema)` to create a new message.
 */
export const TestProto2BytesMapSchema = /*@__PURE__*/
  messageDesc(file_google_protobuf_map_proto2_unittest, 6);

/**
 * Describes the enum protobuf_unittest.Proto2MapEnum.
 */
export const Proto2MapEnumSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_map_proto2_unittest, 0);

/**
 * @generated from enum protobuf_unittest.Proto2MapEnum
 */
export const Proto2MapEnum = /*@__PURE__*/
  tsEnum(Proto2MapEnumSchema);

/**
 * Describes the enum protobuf_unittest.Proto2MapEnumPlusExtra.
 */
export const Proto2MapEnumPlusExtraSchema = /*@__PURE__*/
  enumDesc(file_google_protobuf_map_proto2_unittest, 1);

/**
 * @generated from enum protobuf_unittest.Proto2MapEnumPlusExtra
 */
export const Proto2MapEnumPlusExtra = /*@__PURE__*/
  tsEnum(Proto2MapEnumPlusExtraSchema);

