// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.8.0 with parameter "ts_nocheck=false,target=js+dts"
// @generated from file google/protobuf/java_features.proto (package pb, syntax proto2)
/* eslint-disable */

import type { BinaryReadOptions, Extension, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto2 } from "@bufbuild/protobuf";
import type { FeatureSet } from "./descriptor_pb.js";

/**
 * @generated from message pb.JavaFeatures
 */
export declare class JavaFeatures extends Message<JavaFeatures> {
  /**
   * Whether or not to treat an enum field as closed.  This option is only
   * applicable to enum fields, and will be removed in the future.  It is
   * consistent with the legacy behavior of using proto3 enum types for proto2
   * fields.
   *
   * @generated from field: optional bool legacy_closed_enum = 1;
   */
  legacyClosedEnum?: boolean;

  /**
   * @generated from field: optional pb.JavaFeatures.Utf8Validation utf8_validation = 2;
   */
  utf8Validation?: JavaFeatures_Utf8Validation;

  constructor(data?: PartialMessage<JavaFeatures>);

  static readonly runtime: typeof proto2;
  static readonly typeName = "pb.JavaFeatures";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JavaFeatures;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JavaFeatures;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JavaFeatures;

  static equals(a: JavaFeatures | PlainMessage<JavaFeatures> | undefined, b: JavaFeatures | PlainMessage<JavaFeatures> | undefined): boolean;
}

/**
 * The UTF8 validation strategy to use.  See go/editions-utf8-validation for
 * more information on this feature.
 *
 * @generated from enum pb.JavaFeatures.Utf8Validation
 */
export declare enum JavaFeatures_Utf8Validation {
  /**
   * Invalid default, which should never be used.
   *
   * @generated from enum value: UTF8_VALIDATION_UNKNOWN = 0;
   */
  UTF8_VALIDATION_UNKNOWN = 0,

  /**
   * Respect the UTF8 validation behavior specified by the global
   * utf8_validation feature.
   *
   * @generated from enum value: DEFAULT = 1;
   */
  DEFAULT = 1,

  /**
   * Verifies UTF8 validity overriding the global utf8_validation
   * feature. This represents the legacy java_string_check_utf8 option.
   *
   * @generated from enum value: VERIFY = 2;
   */
  VERIFY = 2,
}

/**
 * @generated from extension: optional pb.JavaFeatures java = 1001;
 */
export declare const java: Extension<FeatureSet, JavaFeatures>;

