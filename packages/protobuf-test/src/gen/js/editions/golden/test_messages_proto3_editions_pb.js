// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.2.1 with parameter "target=js+dts,import_extension=js"
// @generated from file editions/golden/test_messages_proto3_editions.proto (package protobuf_test_messages.editions.proto3, edition 2023)
// option features.field_presence = IMPLICIT;
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, tsEnum } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_field_mask, file_google_protobuf_struct, file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file editions/golden/test_messages_proto3_editions.proto.
 */
export const file_editions_golden_test_messages_proto3_editions = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_field_mask, file_google_protobuf_struct, file_google_protobuf_timestamp, file_google_protobuf_wrappers]);

/**
 * Describes the message protobuf_test_messages.editions.proto3.TestAllTypesProto3.
 * Use `create(TestAllTypesProto3Schema)` to create a new message.
 */
export const TestAllTypesProto3Schema = /*@__PURE__*/
  messageDesc(file_editions_golden_test_messages_proto3_editions, 0);

/**
 * Describes the message protobuf_test_messages.editions.proto3.TestAllTypesProto3.NestedMessage.
 * Use `create(TestAllTypesProto3_NestedMessageSchema)` to create a new message.
 */
export const TestAllTypesProto3_NestedMessageSchema = /*@__PURE__*/
  messageDesc(file_editions_golden_test_messages_proto3_editions, 0, 0);

/**
 * Describes the enum protobuf_test_messages.editions.proto3.TestAllTypesProto3.NestedEnum.
 */
export const TestAllTypesProto3_NestedEnumSchema = /*@__PURE__*/
  enumDesc(file_editions_golden_test_messages_proto3_editions, 0, 0);

/**
 * @generated from enum protobuf_test_messages.editions.proto3.TestAllTypesProto3.NestedEnum
 */
export const TestAllTypesProto3_NestedEnum = /*@__PURE__*/
  tsEnum(TestAllTypesProto3_NestedEnumSchema);

/**
 * Describes the enum protobuf_test_messages.editions.proto3.TestAllTypesProto3.AliasedEnum.
 */
export const TestAllTypesProto3_AliasedEnumSchema = /*@__PURE__*/
  enumDesc(file_editions_golden_test_messages_proto3_editions, 0, 1);

/**
 * @generated from enum protobuf_test_messages.editions.proto3.TestAllTypesProto3.AliasedEnum
 */
export const TestAllTypesProto3_AliasedEnum = /*@__PURE__*/
  tsEnum(TestAllTypesProto3_AliasedEnumSchema);

/**
 * Describes the message protobuf_test_messages.editions.proto3.ForeignMessage.
 * Use `create(ForeignMessageSchema)` to create a new message.
 */
export const ForeignMessageSchema = /*@__PURE__*/
  messageDesc(file_editions_golden_test_messages_proto3_editions, 1);

/**
 * Describes the message protobuf_test_messages.editions.proto3.NullHypothesisProto3.
 * Use `create(NullHypothesisProto3Schema)` to create a new message.
 */
export const NullHypothesisProto3Schema = /*@__PURE__*/
  messageDesc(file_editions_golden_test_messages_proto3_editions, 2);

/**
 * Describes the message protobuf_test_messages.editions.proto3.EnumOnlyProto3.
 * Use `create(EnumOnlyProto3Schema)` to create a new message.
 */
export const EnumOnlyProto3Schema = /*@__PURE__*/
  messageDesc(file_editions_golden_test_messages_proto3_editions, 3);

/**
 * Describes the enum protobuf_test_messages.editions.proto3.EnumOnlyProto3.Bool.
 */
export const EnumOnlyProto3_BoolSchema = /*@__PURE__*/
  enumDesc(file_editions_golden_test_messages_proto3_editions, 3, 0);

/**
 * @generated from enum protobuf_test_messages.editions.proto3.EnumOnlyProto3.Bool
 */
export const EnumOnlyProto3_Bool = /*@__PURE__*/
  tsEnum(EnumOnlyProto3_BoolSchema);

/**
 * Describes the enum protobuf_test_messages.editions.proto3.ForeignEnum.
 */
export const ForeignEnumSchema = /*@__PURE__*/
  enumDesc(file_editions_golden_test_messages_proto3_editions, 0);

/**
 * @generated from enum protobuf_test_messages.editions.proto3.ForeignEnum
 */
export const ForeignEnum = /*@__PURE__*/
  tsEnum(ForeignEnumSchema);

