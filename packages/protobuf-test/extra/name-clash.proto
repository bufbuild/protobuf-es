// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package spec;

message ReservedPropertyNames {
    message BuiltIn {
        string constructor = 2; // built-in constructor()
        string to_string = 3; // built-in toString()
        string to_JSON = 4; // built-in toJSON()
        string value_of = 5; // built-in valueOf()
    }
    message Runtime {
        string to_json = 4; // runtime toJson()
        string type = 6; // runtime type()
        string clone = 7; // runtime clone()
        string equals = 8; // runtime equals()
        string from_binary = 9; // runtime fromBinary()
        string from_json = 10; // runtime fromJson()
        string from_json_string = 11; // runtime fromJsonString()
        string to_binary = 12; // runtime toBinary()
        string to_json_string = 14; // runtime toJsonString()
    }
    enum EnumBuiltIn {
        constructor = 0;
        toString = 1;
        to_JSON = 2;
        value_of = 3;
    }
    enum EnumRuntime {
        to_json = 0;
        type = 6;
        clone = 7;
        equals = 8;
        from_binary = 9;
        from_json = 10;
        from_json_string = 11;
        to_binary = 12;
        to_json_string = 14;
    }
    message OneofBultIn {
        oneof built_in {
            string constructor = 1;
            string to_string = 2;
            string to_JSON = 3;
            string value_of = 4;
        }
    }
    message OneofRuntime {
        oneof runtime {
            string to_json = 5;
            string type = 6;
            string clone = 7;
            string equals = 8;
            string from_binary = 9;
            string from_json = 10;
            string from_json_string = 11;
            string to_binary = 12;
            string to_json_string = 14;
        }
    }
}

service ReservedPropertyNamesService {
    rpc constructor (Error) returns (Error);
    rpc toString (Error) returns (Error);
    rpc to_JSON (Error) returns (Error);
    rpc value_of (Error) returns (Error);
}


// reserved identifier
message interface {
}
// reserved identifier
message function {
}
// reserved identifier
message instanceof {
}
// reserved identifier
message switch {
}
// reserved identifier
message case {
}
// reserved identifier
message return {
}

// used by runtime
message Message {
}
// used by runtime
message PartialMessage {
}
// used by runtime
message PlainMessage {
}
// clash with global type "Error"
// either this message name is escaped in generated code, or the generated
// code must escape its calls to the global error object (i.e. `new Error`)
message Error {
    string field_name = 1;
    string message = 2;
}
// clash with global type
message Object {
}


message object {
}
// clash with global type
message array {
}
// clash with global type
message string {
}
// clash with global type
message number {
}
// clash with global type
message boolean {
}
// clash with global type
message bigint {
}

// clash with global type
message Uint8Array {
}

// clash with global type
message Array {
}

// clash with global type
message String {
}

// clash with global type
message Number {
}
// clash with global type
message Boolean {
}

// clash with global type
message BigInt {
}


message ClashParent {
    // should clash with message ClashParent_ClashChild
    message ClashChild {
    }
}

// TODO we do not support this case
// should clash with name of ClashParent.ClashChild
//message ClashParent_ClashChild {
//}


message NoClashFields {
    // ok as object property
    string const = 1;
    // ok as object property
    string switch = 2;
    // ok as object property
    string case = 3;
    // ok as object property
    string function = 4;
    // ok as object property
    string interface = 5;
    // ok as object property
    string return = 6;
}
message NoClashOneof {
    oneof kind {
        // ok as object property
        string const = 1;
        // ok as object property
        string switch = 2;
        // ok as object property
        string case = 3;
        // ok as object property
        string function = 4;
        // ok as object property
        string interface = 5;
        // ok as object property
        string return = 6;
    }
}
message NoClashOneofADT {
    message M {
        string case = 1;
        optional string value = 2;
    }
    M m = 1;
}
// just here as a "namespace" for the enum
message NoClashEnumWrap {
    enum X {
        // ok as object property
        instanceof = 0;
        // ok as object property
        switch = 1;
        // ok as object property
        case = 3;
        // ok as object property
        function = 4;
        // ok as object property
        interface = 5;
        // ok as object property
        return = 6;
    }
}
