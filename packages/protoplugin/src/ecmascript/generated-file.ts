// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {
  AnyDesc,
  DescEnum,
  DescExtension,
  DescFile,
  DescMessage,
  LongType,
  protoInt64,
  ScalarType,
} from "@bufbuild/protobuf";
import type { ImportSymbol } from "./import-symbol.js";
import { createImportSymbol } from "./import-symbol.js";
import type { RuntimeImports } from "./runtime-imports.js";
import { makeImportPathRelative } from "./import-path.js";
import type { JSDocBlock } from "./jsdoc.js";
import { createJsDocBlock } from "./jsdoc.js";
import {
  createExportDeclaration,
  ExportDeclaration,
  LiteralProtoInt64,
  LiteralString,
  RefDescEnum,
  RefDescMessage,
} from "./opaque-printables.js";

/**
 * All types that can be passed to GeneratedFile.print()
 */
export type Printable =
  | string
  | number
  | boolean
  | bigint
  | Uint8Array
  | ImportSymbol
  | ExportDeclaration
  | JSDocBlock
  | LiteralString
  | LiteralProtoInt64
  | RefDescMessage
  | RefDescEnum
  | DescMessage
  | DescEnum
  | DescExtension
  | Printable[];

/**
 * FileInfo represents an intermediate type using for transpiling TypeScript internally.
 */
export interface FileInfo {
  name: string;
  content: string;
  preamble?: string | undefined;
}

/**
 * Represents a JavaScript, TypeScript, or TypeScript declaration file.
 */
export interface GeneratedFile {
  /**
   * Create a standard preamble the includes comments at the top of the
   * protobuf source file (like a license header), as well as information
   * about the code generator and its version.
   *
   * The preamble is always placed at the very top of the generated file,
   * above import statements.
   *
   * A file with a preamble but no other content is still considered empty,
   * and will not be generated unless the plugin option keep_empty_files=true
   * is set.
   */
  preamble(file: DescFile): void;

  /**
   * Add a line of code to the file.
   *
   * - string: Prints the string verbatim.
   * - number or boolean: Prints a literal.
   * - bigint: Prints an expression using protoInt64.parse().
   * - Uint8Array: Prints an expression that re-created the array.
   * - ImportSymbol: Adds an import statement and prints the name of the symbol.
   * - DescMessage or DescEnum: Imports the type if necessary, and prints the name.
   */
  print(...printables: Printable[]): void;

  /**
   * Add a line of code to the file with tagged template literal and
   * an optional array of Printables.
   * See print(Printable[]) for behavior when printing Printable items.
   */
  print(fragments: TemplateStringsArray, ...printables: Printable[]): void;

  /**
   * @deprecated Please use createImportSymbol() from @bufbuild/protoplugin/ecmascript instead
   */
  export(name: string): ImportSymbol;

  /**
   * Create a string literal.
   */
  string(string: string): Printable;

  /**
   * Create a JSDoc comment block with the given text. Line breaks and white-space
   * stay intact.
   */
  jsDoc(text: string, indentation?: string): JSDocBlock;

  /**
   * Create a JSDoc comment block for the given message, enumeration, or other
   * descriptor. The comment block will contain the original comments from the
   * protobuf source, and annotations such as `@generated from message MyMessage`.
   */
  jsDoc(desc: Exclude<AnyDesc, DescFile>, indentation?: string): JSDocBlock;

  /**
   * Create a printable export statement. For example:
   *
   * ```ts
   * f.print(f.exportDecl("abstract class", "MyClass"), " {}")
   * ```
   *
   * Will generate as:
   * ```ts
   * export abstract class MyClass {}
   * ```
   *
   * Using this method is preferred over a calling print() with a literal export
   * statement. If the plugin option `js_import_style=legacy_commonjs` is set,
   * exports will automatically be generated for CommonJS.
   */
  exportDecl(
    declaration: string,
    name: string | DescMessage | DescEnum | DescExtension,
  ): Printable;

  /**
   * Import a message or enumeration generated by protoc-gen-es.
   */
  import(type: DescMessage | DescEnum | DescExtension): ImportSymbol;

  /**
   * Import any symbol from a file or package.
   *
   * The import path can point to a package, for example `@foo/bar/baz.js`, or
   * to a file, for example `./bar/baz.js`.
   *
   * Note that while paths to a file begin with a `./`, they must be
   * relative to the project root. The import path is automatically made
   * relative to the current file.
   */
  import(name: string, from: string): ImportSymbol;

  /**
   * In case you need full control over exports and imports, use print() and
   * formulate your own imports and exports based on this property.
   */
  readonly jsImportStyle: "module" | "legacy_commonjs";
}

export interface GeneratedFileController extends GeneratedFile {
  getFileInfo(): FileInfo;
}

type CreateTypeImportFn = (
  desc: DescMessage | DescEnum | DescExtension,
) => ImportSymbol;
type RewriteImportPathFn = (path: string) => string;
type CreatePreambleFn = (descFile: DescFile) => string;

export function createGeneratedFile(
  name: string,
  importPath: string,
  jsImportStyle: "module" | "legacy_commonjs",
  rewriteImportPath: RewriteImportPathFn,
  createTypeImport: CreateTypeImportFn,
  runtimeImports: RuntimeImports,
  createPreamble: CreatePreambleFn,
): GeneratedFileController {
  let preamble: string | undefined;
  const el: El[] = [];
  return {
    preamble(file) {
      preamble = createPreamble(file);
    },
    print(
      printableOrFragments?: Printable | TemplateStringsArray,
      ...rest: Printable[]
    ) {
      let printables: Printable[];

      if (
        printableOrFragments != null &&
        Object.prototype.hasOwnProperty.call(printableOrFragments, "raw")
      ) {
        // If called with a tagged template literal
        printables = buildPrintablesFromFragments(
          printableOrFragments as TemplateStringsArray,
          rest,
        );
      } else {
        // If called with just an array of Printables
        printables =
          printableOrFragments != null
            ? [printableOrFragments as Printable, ...rest]
            : rest;
      }

      printableToEl(printables, el, createTypeImport, runtimeImports);
      el.push("\n");
    },
    export(name) {
      return createImportSymbol(name, importPath);
    },
    exportDecl(declaration, name) {
      return createExportDeclaration(declaration, name);
    },
    string(string) {
      // We do not use LiteralString, which was added later, to maintain backwards compatibility
      return escapeString(string);
    },
    jsDoc(textOrDesc, indentation) {
      return createJsDocBlock(textOrDesc, indentation);
    },
    import(
      typeOrName: DescMessage | DescEnum | DescExtension | string,
      from?: string,
    ) {
      if (typeof typeOrName == "string") {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return createImportSymbol(typeOrName, from!);
      }
      return createTypeImport(typeOrName);
    },
    jsImportStyle,
    getFileInfo() {
      return {
        name,
        content: elToContent(
          el,
          importPath,
          rewriteImportPath,
          jsImportStyle == "legacy_commonjs",
        ),
        preamble,
      };
    },
  };
}

type El =
  | string
  | ImportSymbol
  | { kind: "es_export_stmt"; declaration?: string; name: string };

function elToContent(
  el: El[],
  importerPath: string,
  rewriteImportPath: RewriteImportPathFn,
  legacyCommonJs: boolean,
): string {
  if (el.length == 0) {
    return "";
  }
  const c: string[] = [];
  if (legacyCommonJs) {
    c.push(`"use strict";\n`);
    c.push(`Object.defineProperty(exports, "__esModule", { value: true });\n`);
    c.push(`\n`);
  }
  const symbolToIdentifier = processImports(
    el,
    importerPath,
    rewriteImportPath,
    (typeOnly, from, names) => {
      if (legacyCommonJs) {
        const p = names.map(({ name, alias }) =>
          alias == undefined ? name : `${name}: ${alias}`,
        );
        const what = `{ ${p.join(", ")} }`;
        c.push(`const ${what} = require(${escapeString(from)});\n`);
      } else {
        const p = names.map(({ name, alias }) =>
          alias == undefined ? name : `${name} as ${alias}`,
        );
        const what = `{ ${p.join(", ")} }`;
        if (typeOnly) {
          c.push(`import type ${what} from ${escapeString(from)};\n`);
        } else {
          c.push(`import ${what} from ${escapeString(from)};\n`);
        }
      }
    },
  );
  if (c.length > 0) {
    c.push("\n");
  }
  const legacyCommonJsExportNames: string[] = [];
  for (const e of el) {
    if (typeof e == "string") {
      c.push(e);
    } else {
      switch (e.kind) {
        case "es_symbol": {
          const ident = symbolToIdentifier.get(e.id);
          if (ident != undefined) {
            c.push(ident);
          }
          break;
        }
        case "es_export_stmt":
          if (legacyCommonJs) {
            legacyCommonJsExportNames.push(e.name);
          } else {
            c.push("export ");
          }
          if (e.declaration !== undefined && e.declaration.length > 0) {
            c.push(e.declaration, " ");
          }
          c.push(e.name);
          break;
      }
    }
  }
  if (legacyCommonJs) {
    if (legacyCommonJsExportNames.length > 0) {
      c.push(`\n`);
    }
    for (const name of legacyCommonJsExportNames) {
      c.push(`exports.`, name, " = ", name, ";\n");
    }
  }
  return c.join("");
}

function printableToEl(
  printables: Printable[],
  el: El[],
  createTypeImport: CreateTypeImportFn,
  runtimeImports: RuntimeImports,
): void {
  for (const p of printables) {
    if (Array.isArray(p)) {
      printableToEl(p, el, createTypeImport, runtimeImports);
    } else {
      switch (typeof p) {
        case "string":
          el.push(p);
          break;
        case "number":
          elNumber(el, p, runtimeImports);
          break;
        case "boolean":
          el.push(p.toString());
          break;
        case "bigint":
          elBigint(el, p, runtimeImports);
          break;
        case "object":
          if (p instanceof Uint8Array) {
            elUint8Array(el, p);
            break;
          }
          switch (p.kind) {
            case "es_symbol":
              el.push(p);
              break;
            case "es_jsdoc":
              el.push(p.toString());
              break;
            case "es_string":
              el.push(escapeString(p.value));
              break;
            case "es_proto_int64":
              elProtoInt64(el, p, runtimeImports);
              break;
            case "es_export_decl":
              el.push({
                kind: "es_export_stmt",
                declaration: p.declaration,
                name:
                  typeof p.name == "string"
                    ? p.name
                    : createTypeImport(p.name).name,
              });
              break;
            case "es_ref_message":
            case "es_ref_enum":
              el.push(
                p.typeOnly
                  ? createTypeImport(p.type).toTypeOnly()
                  : createTypeImport(p.type),
              );
              break;
            case "message":
            case "extension":
            case "enum":
              el.push(createTypeImport(p));
              break;
          }
          break;
        default:
          throw `cannot print ${typeof p}`;
      }
    }
  }
}

function buildPrintablesFromFragments(
  fragments: TemplateStringsArray,
  values: Printable[],
): Printable[] {
  const printables: Printable[] = [];
  fragments.forEach((fragment, i) => {
    printables.push(fragment);
    if (fragments.length - 1 !== i) {
      printables.push(values[i]);
    }
  });

  return printables;
}

type MakeImportStatementFn = (
  typeOnly: boolean,
  from: string,
  names: { name: string; alias?: string }[],
) => void;

function processImports(
  el: El[],
  importerPath: string,
  rewriteImportPath: RewriteImportPathFn,
  makeImportStatement: MakeImportStatementFn,
) {
  // identifiers to use in the output
  const symbolToIdentifier = new Map<string, string>();
  // symbols that need a value import (as opposed to a type-only import)
  const symbolToIsValue = new Map<string, true>();
  // taken in this file
  const identifiersTaken = new Set<string>();
  // foreign symbols need an import
  const foreignSymbols: ImportSymbol[] = [];

  // Walk through all symbols used and populate the collections above.
  for (const s of el) {
    if (typeof s != "object") {
      continue;
    }
    switch (s.kind) {
      case "es_symbol":
        symbolToIdentifier.set(s.id, s.name);
        if (!s.typeOnly) {
          // a symbol is only type-imported as long as all uses are type-only
          symbolToIsValue.set(s.id, true);
        }
        if (s.from === importerPath) {
          identifiersTaken.add(s.name);
        } else {
          foreignSymbols.push(s);
        }
        break;
      case "es_export_stmt":
        identifiersTaken.add(s.name);
        break;
    }
  }

  // Walk through all foreign symbols and make their identifiers unique.
  const handledSymbols = new Set<string>();
  for (const s of foreignSymbols) {
    if (handledSymbols.has(s.id)) {
      continue;
    }
    handledSymbols.add(s.id);
    if (!identifiersTaken.has(s.name)) {
      identifiersTaken.add(s.name);
      continue;
    }
    let i = 1;
    let alias: string;
    for (;;) {
      // We choose '$' because it is invalid in proto identifiers.
      alias = `${s.name}$${i}`;
      if (!identifiersTaken.has(alias)) {
        break;
      }
      i++;
    }
    identifiersTaken.add(alias);
    symbolToIdentifier.set(s.id, alias);
  }

  // Group foreign symbols (imports) by their source (from).
  type Imp = {
    types: Map<string, string | undefined>; // type-only imports, name to (optional) alias
    values: Map<string, string | undefined>; // value imports, name to (optional) alias
  };
  const sourceToImport = new Map<string, Imp>();
  for (const s of foreignSymbols) {
    let i = sourceToImport.get(s.from);
    if (i == undefined) {
      i = {
        types: new Map<string, string | undefined>(),
        values: new Map<string, string | undefined>(),
      };
      sourceToImport.set(s.from, i);
    }
    let alias = symbolToIdentifier.get(s.id);
    if (alias == s.name) {
      alias = undefined;
    }
    if (symbolToIsValue.get(s.id)) {
      i.values.set(s.name, alias);
    } else {
      i.types.set(s.name, alias);
    }
  }

  // Make import statements.
  const handledSource = new Set<string>();
  const buildNames = (map: Map<string, string | undefined>) => {
    const names: { name: string; alias?: string }[] = [];
    map.forEach((value, key) => names.push({ name: key, alias: value }));
    names.sort((a, b) => a.name.localeCompare(b.name));
    return names;
  };
  for (const s of foreignSymbols) {
    if (handledSource.has(s.from)) {
      continue;
    }
    handledSource.add(s.from);
    const i = sourceToImport.get(s.from);
    if (i == undefined) {
      // should never happen
      continue;
    }
    const from = makeImportPathRelative(
      importerPath,
      rewriteImportPath(s.from),
    );
    if (i.types.size > 0) {
      makeImportStatement(true, from, buildNames(i.types));
    }
    if (i.values.size > 0) {
      makeImportStatement(false, from, buildNames(i.values));
    }
  }

  return symbolToIdentifier;
}

function elBigint(
  el: El[],
  value: bigint,
  runtimeImports: RuntimeImports,
): void {
  if (value == protoInt64.zero) {
    // Loose comparison will match between 0n and 0.
    el.push(runtimeImports.protoInt64, ".zero");
  } else {
    el.push(
      runtimeImports.protoInt64,
      value > 0 ? ".uParse(" : ".parse(",
      escapeString(value.toString()),
      ")",
    );
  }
}

function elNumber(
  el: El[],
  value: number,
  runtimeImports: RuntimeImports,
): void {
  if (Number.isNaN(value)) {
    el.push(runtimeImports.protoDouble, ".NaN");
  } else if (value === Number.POSITIVE_INFINITY) {
    el.push(runtimeImports.protoDouble, ".POSITIVE_INFINITY");
  } else if (value === Number.NEGATIVE_INFINITY) {
    el.push(runtimeImports.protoDouble, ".NEGATIVE_INFINITY");
  } else {
    el.push(value.toString(10));
  }
}

function elUint8Array(el: El[], value: Uint8Array): void {
  if (value.length === 0) {
    el.push("new Uint8Array(0)");
    return;
  }
  el.push("new Uint8Array([");
  const strings: string[] = [];
  for (const n of value) {
    strings.push("0x" + n.toString(16).toUpperCase().padStart(2, "0"));
  }
  el.push(strings.join(", "));
  el.push("])");
}

function elProtoInt64(
  el: El[],
  literal: LiteralProtoInt64,
  runtimeImports: RuntimeImports,
): void {
  switch (literal.longType) {
    case LongType.STRING:
      el.push(escapeString(literal.value.toString()));
      break;
    case LongType.BIGINT:
      if (literal.value == protoInt64.zero) {
        // Loose comparison will match between 0n and 0.
        el.push(runtimeImports.protoInt64, ".zero");
        break;
      }
      switch (literal.type) {
        case ScalarType.UINT64:
        case ScalarType.FIXED64:
          el.push(runtimeImports.protoInt64);
          el.push(".uParse(");
          el.push(escapeString(literal.value.toString()));
          el.push(")");
          break;
        default:
          el.push(runtimeImports.protoInt64);
          el.push(".parse(");
          el.push(escapeString(literal.value.toString()));
          el.push(")");
          break;
      }
  }
}

function escapeString(value: string): string {
  return (
    '"' +
    value
      .split("\\")
      .join("\\\\")
      .split('"')
      .join('\\"')
      .split("\r")
      .join("\\r")
      .split("\n")
      .join("\\n") +
    '"'
  );
}
