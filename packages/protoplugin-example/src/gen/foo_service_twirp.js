// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-twirp-es v0.1.0 with parameter "target=ts+js+dts"
// @generated from file foo_service.proto (package example, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import { GetResponse } from "./foo_service_pb.js";
;
export function createFooServiceClient(opts) {
    return new FooServiceClient(opts);
}
export class TwirpClient {
    constructor(opts) {
        this.options = undefined;
        this.options = opts;
    }
    async request(service, method, contentType, data) {
        const headers = new Headers(this.options.headers);
        headers.set("content-type", contentType);
        const response = await fetch(`${this.options.baseUrl}/${service}/${method}`, Object.assign(Object.assign({}, this.options), { method: "POST", headers, body: data.toJsonString() }));
        if (response.status === 200) {
            if (contentType === 'application/json') {
                return await response.json();
            }
            return new Uint8Array(await response.arrayBuffer());
        }
        throw Error(await response.json());
    }
}
export class FooServiceClient extends TwirpClient {
    constructor(opts) {
        super(opts);
    }
    Get(request) {
        const promise = this.request("example.FooService", "Get", "application/json", request);
        return new GetResponse();
    }
    ;
}
