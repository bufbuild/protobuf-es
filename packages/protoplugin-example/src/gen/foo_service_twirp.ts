// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-twirp-es v0.1.0 with parameter "target=ts+js+dts"
// @generated from file foo_service.proto (package example, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {GetRequest, GetResponse} from "./foo_service_pb.js";

export interface TransportOptions {
    baseUrl: string;
    headers: HeadersInit;
};

export function createFooServiceClient(opts: TransportOptions): FooServiceClient {
    return new FooServiceClient(opts);
}

export interface FooService {
    /**
     * @generated from rpc example.FooService.Get
     */
    Get(request: GetRequest): GetResponse;
}

export class TwirpClient {
    private readonly options: TransportOptions | undefined = undefined;

    constructor(opts: TransportOptions) {
        this.options = opts;
    }

    async request(service: string, method: string, contentType: string, data) {
        const headers = new Headers(this.options.headers)
        headers.set("content-type", contentType);
        const response = await fetch(`${this.options.baseUrl}/${service}/${method}`, {
            ...this.options,
            method: "POST",
            headers,
            body: data.toJsonString(),
        });
        if (response.status === 200) {
            if (contentType === 'application/json') {
                return await response.json();
            }
            return new Uint8Array(await response.arrayBuffer());
        }

        throw Error(await response.json());
    }
}

export class FooServiceClient extends TwirpClient {
    constructor(opts: TransportOptions) {
        super(opts);
    }

    Get(request: GetRequest): GetResponse{
        const promise = this.request(
            "example.FooService", 
            "Get",
            "application/json",
            request
        );
        return new GetResponse();
    };
}
