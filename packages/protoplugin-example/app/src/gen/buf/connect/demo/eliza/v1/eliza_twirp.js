// Copyright 2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-twirp-es v0.1.0 with parameter "target=ts+js+dts"
// @generated from file buf/connect/demo/eliza/v1/eliza.proto (package buf.connect.demo.eliza.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import { SayResponse } from "./eliza_pb.js";
class TwirpClient {
    constructor(opts) {
        this.options = {
            baseUrl: '',
        };
        this.options = opts;
    }
    async request(service, method, contentType, data) {
        var _a;
        const headers = new Headers((_a = this.options.headers) !== null && _a !== void 0 ? _a : []);
        headers.set('content-type', contentType);
        const response = await fetch(`${this.options.baseUrl}/${service}/${method}`, Object.assign(Object.assign({}, this.options), { method: 'POST', headers, body: data.toJsonString() }));
        if (response.status === 200) {
            if (contentType === 'application/json') {
                return await response.json();
            }
            return new Uint8Array(await response.arrayBuffer());
        }
        throw Error(await response.json());
    }
}
export function createElizaServiceClient(opts) {
    return new ElizaServiceClient(opts);
}
export class ElizaServiceClient extends TwirpClient {
    constructor(opts) {
        super(opts);
    }
    async Say(request) {
        const promise = this.request("buf.connect.demo.eliza.v1.ElizaService", "Say", "application/json", request);
        return promise.then(async (data) => SayResponse.fromJson(data));
    }
    ;
    async Converse(request) {
        throw new Error('BiDiStreaming is not supported');
    }
    ;
    async Introduce(request) {
        throw new Error('ServerStreaming is not supported');
    }
    ;
}
