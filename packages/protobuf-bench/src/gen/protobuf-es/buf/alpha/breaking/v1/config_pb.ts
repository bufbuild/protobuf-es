// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.0.0-alpha.1 with parameter "ts_nocheck=false,target=ts,import_extension=.js"
// @generated from file buf/alpha/breaking/v1/config.proto (package buf.alpha.breaking.v1, syntax proto3)
/* eslint-disable */

import type { GenDescFile, GenDescMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file buf/alpha/breaking/v1/config.proto.
 */
export const fileDesc_buf_alpha_breaking_v1_config: GenDescFile = /*@__PURE__*/
  fileDesc("CiJidWYvYWxwaGEvYnJlYWtpbmcvdjEvY29uZmlnLnByb3RvEhVidWYuYWxwaGEuYnJlYWtpbmcudjEirwEKBkNvbmZpZxIPCgd2ZXJzaW9uGAEgASgJEg8KB3VzZV9pZHMYAiADKAkSEgoKZXhjZXB0X2lkcxgDIAMoCRIUCgxpZ25vcmVfcGF0aHMYBCADKAkSNwoPaWdub3JlX2lkX3BhdGhzGAUgAygLMh4uYnVmLmFscGhhLmJyZWFraW5nLnYxLklEUGF0aHMSIAoYaWdub3JlX3Vuc3RhYmxlX3BhY2thZ2VzGAYgASgIIiQKB0lEUGF0aHMSCgoCaWQYASABKAkSDQoFcGF0aHMYAiADKAliBnByb3RvMw");

/**
 * Config represents the breaking change configuration for a module. The rule and category IDs are defined
 * by the version and apply across the config. The version is independent of the version of
 * the package. The package version refers to the config shape, the version encoded in the Config message
 * indicates which rule and category IDs should be used.
 *
 * The rule and category IDs are not encoded as enums in this package because we may want to support custom rule
 * and category IDs in the future. Callers will need to resolve the rule and category ID strings.
 *
 * @generated from message buf.alpha.breaking.v1.Config
 */
export type Config = Message<"buf.alpha.breaking.v1.Config"> & {
  /**
   * version represents the version of the breaking change rule and category IDs that should be used with this config.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * use_ids lists the rule and/or category IDs that are included in the breaking change check.
   *
   * @generated from field: repeated string use_ids = 2;
   */
  useIds: string[];

  /**
   * except_ids lists the rule and/or category IDs that are excluded from the breaking change check.
   *
   * @generated from field: repeated string except_ids = 3;
   */
  exceptIds: string[];

  /**
   * ignore_paths lists the paths of directories and/or files that should be ignored by the breaking change check.
   * All paths are relative to the root of the module.
   *
   * @generated from field: repeated string ignore_paths = 4;
   */
  ignorePaths: string[];

  /**
   * ignore_id_paths is a map of rule and/or category IDs to directory and/or file paths to exclude from the
   * breaking change check. This corresponds with the ignore_only configuration key.
   *
   * @generated from field: repeated buf.alpha.breaking.v1.IDPaths ignore_id_paths = 5;
   */
  ignoreIdPaths: IDPaths[];

  /**
   * ignore_unstable_packages ignores packages with a last component that is one of the unstable forms recognised
   * by the PACKAGE_VERSION_SUFFIX:
   *   v\d+test.*
   *   v\d+(alpha|beta)\d+
   *   v\d+p\d+(alpha|beta)\d+
   *
   * @generated from field: bool ignore_unstable_packages = 6;
   */
  ignoreUnstablePackages: boolean;
};

/**
 * Describes the message buf.alpha.breaking.v1.Config.
 * Use `create(ConfigDesc)` to create a new message.
 */
export const ConfigDesc: GenDescMessage<Config> = /*@__PURE__*/
  messageDesc(fileDesc_buf_alpha_breaking_v1_config, 0);

/**
 * IDPaths represents a rule or category ID and the file and/or directory paths that are ignored for the rule.
 *
 * @generated from message buf.alpha.breaking.v1.IDPaths
 */
export type IDPaths = Message<"buf.alpha.breaking.v1.IDPaths"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: repeated string paths = 2;
   */
  paths: string[];
};

/**
 * Describes the message buf.alpha.breaking.v1.IDPaths.
 * Use `create(IDPathsDesc)` to create a new message.
 */
export const IDPathsDesc: GenDescMessage<IDPaths> = /*@__PURE__*/
  messageDesc(fileDesc_buf_alpha_breaking_v1_config, 1);

