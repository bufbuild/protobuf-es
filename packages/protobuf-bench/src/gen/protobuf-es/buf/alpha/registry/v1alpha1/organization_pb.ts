// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v0.2.1 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/alpha/registry/v1alpha1/organization.proto (package buf.alpha.registry.v1alpha1, syntax proto3)
/* eslint-disable */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, Timestamp} from "@bufbuild/protobuf";
import {OrganizationRole, PluginRole, RepositoryRole, TemplateRole} from "./role_pb.js";

/**
 * @generated from message buf.alpha.registry.v1alpha1.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * primary key, unique, immutable
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * immutable
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * mutable
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * unique, mutable
   *
   * @generated from field: string name = 4;
   */
  name = "";

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_time", kind: "message", T: Timestamp },
    { no: 3, name: "update_time", kind: "message", T: Timestamp },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * OrganizationMembership is a nested structure that contains
 * the organization and user membership information on that organization.
 *
 * @generated from message buf.alpha.registry.v1alpha1.OrganizationMembership
 */
export class OrganizationMembership extends Message<OrganizationMembership> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.Organization organization = 1;
   */
  organization?: Organization;

  /**
   * @generated from field: buf.alpha.registry.v1alpha1.OrganizationRole organization_role = 2;
   */
  organizationRole = OrganizationRole.UNSPECIFIED;

  constructor(data?: PartialMessage<OrganizationMembership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.OrganizationMembership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
    { no: 2, name: "organization_role", kind: "enum", T: proto3.getEnumType(OrganizationRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationMembership {
    return new OrganizationMembership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationMembership {
    return new OrganizationMembership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationMembership {
    return new OrganizationMembership().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationMembership | PlainMessage<OrganizationMembership> | undefined, b: OrganizationMembership | PlainMessage<OrganizationMembership> | undefined): boolean {
    return proto3.util.equals(OrganizationMembership, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetOrganizationRequest
 */
export class GetOrganizationRequest extends Message<GetOrganizationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationRequest | PlainMessage<GetOrganizationRequest> | undefined, b: GetOrganizationRequest | PlainMessage<GetOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetOrganizationResponse
 */
export class GetOrganizationResponse extends Message<GetOrganizationResponse> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<GetOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationResponse | PlainMessage<GetOrganizationResponse> | undefined, b: GetOrganizationResponse | PlainMessage<GetOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetOrganizationByNameRequest
 */
export class GetOrganizationByNameRequest extends Message<GetOrganizationByNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetOrganizationByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetOrganizationByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationByNameRequest {
    return new GetOrganizationByNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationByNameRequest {
    return new GetOrganizationByNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationByNameRequest {
    return new GetOrganizationByNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationByNameRequest | PlainMessage<GetOrganizationByNameRequest> | undefined, b: GetOrganizationByNameRequest | PlainMessage<GetOrganizationByNameRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationByNameRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetOrganizationByNameResponse
 */
export class GetOrganizationByNameResponse extends Message<GetOrganizationByNameResponse> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<GetOrganizationByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetOrganizationByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationByNameResponse {
    return new GetOrganizationByNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationByNameResponse {
    return new GetOrganizationByNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationByNameResponse {
    return new GetOrganizationByNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationByNameResponse | PlainMessage<GetOrganizationByNameResponse> | undefined, b: GetOrganizationByNameResponse | PlainMessage<GetOrganizationByNameResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationByNameResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListOrganizationsRequest
 */
export class ListOrganizationsRequest extends Message<ListOrganizationsRequest> {
  /**
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 3;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined, b: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListOrganizationsResponse
 */
export class ListOrganizationsResponse extends Message<ListOrganizationsResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.Organization organizations = 1;
   */
  organizations: Organization[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListOrganizationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organizations", kind: "message", T: Organization, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsResponse | PlainMessage<ListOrganizationsResponse> | undefined, b: ListOrganizationsResponse | PlainMessage<ListOrganizationsResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListUserOrganizationsRequest
 */
export class ListUserOrganizationsRequest extends Message<ListUserOrganizationsRequest> {
  /**
   * The ID of the user whose organizations should be listed.
   *
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 4;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListUserOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListUserOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserOrganizationsRequest {
    return new ListUserOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserOrganizationsRequest {
    return new ListUserOrganizationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserOrganizationsRequest {
    return new ListUserOrganizationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserOrganizationsRequest | PlainMessage<ListUserOrganizationsRequest> | undefined, b: ListUserOrganizationsRequest | PlainMessage<ListUserOrganizationsRequest> | undefined): boolean {
    return proto3.util.equals(ListUserOrganizationsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListUserOrganizationsResponse
 */
export class ListUserOrganizationsResponse extends Message<ListUserOrganizationsResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.OrganizationMembership organizations = 1;
   */
  organizations: OrganizationMembership[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListUserOrganizationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListUserOrganizationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organizations", kind: "message", T: OrganizationMembership, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserOrganizationsResponse {
    return new ListUserOrganizationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserOrganizationsResponse {
    return new ListUserOrganizationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserOrganizationsResponse {
    return new ListUserOrganizationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserOrganizationsResponse | PlainMessage<ListUserOrganizationsResponse> | undefined, b: ListUserOrganizationsResponse | PlainMessage<ListUserOrganizationsResponse> | undefined): boolean {
    return proto3.util.equals(ListUserOrganizationsResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.CreateOrganizationRequest
 */
export class CreateOrganizationRequest extends Message<CreateOrganizationRequest> {
  /**
   * Must be unique across organizations.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.CreateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined, b: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.CreateOrganizationResponse
 */
export class CreateOrganizationResponse extends Message<CreateOrganizationResponse> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<CreateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.CreateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined, b: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeleteOrganizationRequest
 */
export class DeleteOrganizationRequest extends Message<DeleteOrganizationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeleteOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined, b: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeleteOrganizationResponse
 */
export class DeleteOrganizationResponse extends Message<DeleteOrganizationResponse> {
  constructor(data?: PartialMessage<DeleteOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeleteOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationResponse | PlainMessage<DeleteOrganizationResponse> | undefined, b: DeleteOrganizationResponse | PlainMessage<DeleteOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeleteOrganizationByNameRequest
 */
export class DeleteOrganizationByNameRequest extends Message<DeleteOrganizationByNameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteOrganizationByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeleteOrganizationByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationByNameRequest {
    return new DeleteOrganizationByNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationByNameRequest {
    return new DeleteOrganizationByNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationByNameRequest {
    return new DeleteOrganizationByNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationByNameRequest | PlainMessage<DeleteOrganizationByNameRequest> | undefined, b: DeleteOrganizationByNameRequest | PlainMessage<DeleteOrganizationByNameRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationByNameRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeleteOrganizationByNameResponse
 */
export class DeleteOrganizationByNameResponse extends Message<DeleteOrganizationByNameResponse> {
  constructor(data?: PartialMessage<DeleteOrganizationByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeleteOrganizationByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationByNameResponse {
    return new DeleteOrganizationByNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationByNameResponse {
    return new DeleteOrganizationByNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationByNameResponse {
    return new DeleteOrganizationByNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationByNameResponse | PlainMessage<DeleteOrganizationByNameResponse> | undefined, b: DeleteOrganizationByNameResponse | PlainMessage<DeleteOrganizationByNameResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationByNameResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.AddOrganizationMemberRequest
 */
export class AddOrganizationMemberRequest extends Message<AddOrganizationMemberRequest> {
  /**
   * The ID of the organization for which the user will be added to.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * The ID of the user for which to be added to the organization.
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * The new role of the user in the organization.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.OrganizationRole organization_role = 3;
   */
  organizationRole = OrganizationRole.UNSPECIFIED;

  constructor(data?: PartialMessage<AddOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.AddOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "organization_role", kind: "enum", T: proto3.getEnumType(OrganizationRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOrganizationMemberRequest {
    return new AddOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOrganizationMemberRequest {
    return new AddOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOrganizationMemberRequest {
    return new AddOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddOrganizationMemberRequest | PlainMessage<AddOrganizationMemberRequest> | undefined, b: AddOrganizationMemberRequest | PlainMessage<AddOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(AddOrganizationMemberRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.AddOrganizationMemberResponse
 */
export class AddOrganizationMemberResponse extends Message<AddOrganizationMemberResponse> {
  constructor(data?: PartialMessage<AddOrganizationMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.AddOrganizationMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOrganizationMemberResponse {
    return new AddOrganizationMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOrganizationMemberResponse {
    return new AddOrganizationMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOrganizationMemberResponse {
    return new AddOrganizationMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddOrganizationMemberResponse | PlainMessage<AddOrganizationMemberResponse> | undefined, b: AddOrganizationMemberResponse | PlainMessage<AddOrganizationMemberResponse> | undefined): boolean {
    return proto3.util.equals(AddOrganizationMemberResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.UpdateOrganizationMemberRequest
 */
export class UpdateOrganizationMemberRequest extends Message<UpdateOrganizationMemberRequest> {
  /**
   * The ID of the organization for which the member belongs to.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * The ID of the user for which to be updated the role.
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * The new role of the user in the organization.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.OrganizationRole organization_role = 3;
   */
  organizationRole = OrganizationRole.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.UpdateOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "organization_role", kind: "enum", T: proto3.getEnumType(OrganizationRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationMemberRequest {
    return new UpdateOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationMemberRequest {
    return new UpdateOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationMemberRequest {
    return new UpdateOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationMemberRequest | PlainMessage<UpdateOrganizationMemberRequest> | undefined, b: UpdateOrganizationMemberRequest | PlainMessage<UpdateOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationMemberRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.UpdateOrganizationMemberResponse
 */
export class UpdateOrganizationMemberResponse extends Message<UpdateOrganizationMemberResponse> {
  constructor(data?: PartialMessage<UpdateOrganizationMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.UpdateOrganizationMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationMemberResponse {
    return new UpdateOrganizationMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationMemberResponse {
    return new UpdateOrganizationMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationMemberResponse {
    return new UpdateOrganizationMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationMemberResponse | PlainMessage<UpdateOrganizationMemberResponse> | undefined, b: UpdateOrganizationMemberResponse | PlainMessage<UpdateOrganizationMemberResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationMemberResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.RemoveOrganizationMemberRequest
 */
export class RemoveOrganizationMemberRequest extends Message<RemoveOrganizationMemberRequest> {
  /**
   * The ID of the organization for which the member belongs to.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * The ID of the user for which to be removed the role.
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  constructor(data?: PartialMessage<RemoveOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.RemoveOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOrganizationMemberRequest {
    return new RemoveOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberRequest {
    return new RemoveOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberRequest {
    return new RemoveOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOrganizationMemberRequest | PlainMessage<RemoveOrganizationMemberRequest> | undefined, b: RemoveOrganizationMemberRequest | PlainMessage<RemoveOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(RemoveOrganizationMemberRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.RemoveOrganizationMemberResponse
 */
export class RemoveOrganizationMemberResponse extends Message<RemoveOrganizationMemberResponse> {
  constructor(data?: PartialMessage<RemoveOrganizationMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.RemoveOrganizationMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOrganizationMemberResponse {
    return new RemoveOrganizationMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberResponse {
    return new RemoveOrganizationMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberResponse {
    return new RemoveOrganizationMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOrganizationMemberResponse | PlainMessage<RemoveOrganizationMemberResponse> | undefined, b: RemoveOrganizationMemberResponse | PlainMessage<RemoveOrganizationMemberResponse> | undefined): boolean {
    return proto3.util.equals(RemoveOrganizationMemberResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.SetOrganizationMemberRequest
 */
export class SetOrganizationMemberRequest extends Message<SetOrganizationMemberRequest> {
  /**
   * The ID of the organization for which the user's role will be set.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * The ID of the user whose role will be set.
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * The role to assign to the user.
   * Setting UNSPECIFIED means removing the user's role.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.OrganizationRole organization_role = 3;
   */
  organizationRole = OrganizationRole.UNSPECIFIED;

  constructor(data?: PartialMessage<SetOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.SetOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "organization_role", kind: "enum", T: proto3.getEnumType(OrganizationRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOrganizationMemberRequest {
    return new SetOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOrganizationMemberRequest {
    return new SetOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOrganizationMemberRequest {
    return new SetOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetOrganizationMemberRequest | PlainMessage<SetOrganizationMemberRequest> | undefined, b: SetOrganizationMemberRequest | PlainMessage<SetOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(SetOrganizationMemberRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.SetOrganizationMemberResponse
 */
export class SetOrganizationMemberResponse extends Message<SetOrganizationMemberResponse> {
  constructor(data?: PartialMessage<SetOrganizationMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.SetOrganizationMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOrganizationMemberResponse {
    return new SetOrganizationMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOrganizationMemberResponse {
    return new SetOrganizationMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOrganizationMemberResponse {
    return new SetOrganizationMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetOrganizationMemberResponse | PlainMessage<SetOrganizationMemberResponse> | undefined, b: SetOrganizationMemberResponse | PlainMessage<SetOrganizationMemberResponse> | undefined): boolean {
    return proto3.util.equals(SetOrganizationMemberResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetOrganizationSettingsRequest
 */
export class GetOrganizationSettingsRequest extends Message<GetOrganizationSettingsRequest> {
  /**
   * The ID of the organization for which to get the settings.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  constructor(data?: PartialMessage<GetOrganizationSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetOrganizationSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationSettingsRequest {
    return new GetOrganizationSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationSettingsRequest {
    return new GetOrganizationSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationSettingsRequest {
    return new GetOrganizationSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationSettingsRequest | PlainMessage<GetOrganizationSettingsRequest> | undefined, b: GetOrganizationSettingsRequest | PlainMessage<GetOrganizationSettingsRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationSettingsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetOrganizationSettingsResponse
 */
export class GetOrganizationSettingsResponse extends Message<GetOrganizationSettingsResponse> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.RepositoryRole repository_base_role = 1;
   */
  repositoryBaseRole = RepositoryRole.UNSPECIFIED;

  /**
   * @generated from field: buf.alpha.registry.v1alpha1.PluginRole plugin_base_role = 2;
   */
  pluginBaseRole = PluginRole.UNSPECIFIED;

  /**
   * @generated from field: buf.alpha.registry.v1alpha1.TemplateRole template_base_role = 3;
   */
  templateBaseRole = TemplateRole.UNSPECIFIED;

  /**
   * The number of members in the organization.
   *
   * @generated from field: uint32 members_count = 4;
   */
  membersCount = 0;

  constructor(data?: PartialMessage<GetOrganizationSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetOrganizationSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository_base_role", kind: "enum", T: proto3.getEnumType(RepositoryRole) },
    { no: 2, name: "plugin_base_role", kind: "enum", T: proto3.getEnumType(PluginRole) },
    { no: 3, name: "template_base_role", kind: "enum", T: proto3.getEnumType(TemplateRole) },
    { no: 4, name: "members_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationSettingsResponse {
    return new GetOrganizationSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationSettingsResponse {
    return new GetOrganizationSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationSettingsResponse {
    return new GetOrganizationSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationSettingsResponse | PlainMessage<GetOrganizationSettingsResponse> | undefined, b: GetOrganizationSettingsResponse | PlainMessage<GetOrganizationSettingsResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationSettingsResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.UpdateOrganizationSettingsRequest
 */
export class UpdateOrganizationSettingsRequest extends Message<UpdateOrganizationSettingsRequest> {
  /**
   * The ID of the organization for which to update the base roles.
   *
   * @generated from field: string organization_id = 1;
   */
  organizationId = "";

  /**
   * optional, no update to this base role will be made if this is unspecified.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.RepositoryRole repository_base_role = 2;
   */
  repositoryBaseRole = RepositoryRole.UNSPECIFIED;

  /**
   * optional, no update to this base role will be made if this is unspecified.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.PluginRole plugin_base_role = 3;
   */
  pluginBaseRole = PluginRole.UNSPECIFIED;

  /**
   * optional, no update to this base role will be made if this is unspecified.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.TemplateRole template_base_role = 4;
   */
  templateBaseRole = TemplateRole.UNSPECIFIED;

  constructor(data?: PartialMessage<UpdateOrganizationSettingsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.UpdateOrganizationSettingsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repository_base_role", kind: "enum", T: proto3.getEnumType(RepositoryRole) },
    { no: 3, name: "plugin_base_role", kind: "enum", T: proto3.getEnumType(PluginRole) },
    { no: 4, name: "template_base_role", kind: "enum", T: proto3.getEnumType(TemplateRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationSettingsRequest {
    return new UpdateOrganizationSettingsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationSettingsRequest {
    return new UpdateOrganizationSettingsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationSettingsRequest {
    return new UpdateOrganizationSettingsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationSettingsRequest | PlainMessage<UpdateOrganizationSettingsRequest> | undefined, b: UpdateOrganizationSettingsRequest | PlainMessage<UpdateOrganizationSettingsRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationSettingsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.UpdateOrganizationSettingsResponse
 */
export class UpdateOrganizationSettingsResponse extends Message<UpdateOrganizationSettingsResponse> {
  constructor(data?: PartialMessage<UpdateOrganizationSettingsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.UpdateOrganizationSettingsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationSettingsResponse {
    return new UpdateOrganizationSettingsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationSettingsResponse {
    return new UpdateOrganizationSettingsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationSettingsResponse {
    return new UpdateOrganizationSettingsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationSettingsResponse | PlainMessage<UpdateOrganizationSettingsResponse> | undefined, b: UpdateOrganizationSettingsResponse | PlainMessage<UpdateOrganizationSettingsResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationSettingsResponse, a, b);
  }
}

