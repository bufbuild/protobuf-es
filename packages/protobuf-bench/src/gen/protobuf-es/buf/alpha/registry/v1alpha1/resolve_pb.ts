// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.0.0-alpha.1 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/alpha/registry/v1alpha1/resolve.proto (package buf.alpha.registry.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenDescEnum, GenDescFile, GenDescMessage, GenDescService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { ModulePin, ModuleReference } from "../../module/v1alpha1/module_pb";
import { fileDesc_buf_alpha_module_v1alpha1_module } from "../../module/v1alpha1/module_pb";
import type { LocalModulePin, LocalModuleReference } from "./module_pb";
import { fileDesc_buf_alpha_registry_v1alpha1_module } from "./module_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file buf/alpha/registry/v1alpha1/resolve.proto.
 */
export const fileDesc_buf_alpha_registry_v1alpha1_resolve: GenDescFile = /*@__PURE__*/
  fileDesc("CilidWYvYWxwaGEvcmVnaXN0cnkvdjFhbHBoYTEvcmVzb2x2ZS5wcm90bxIbYnVmLmFscGhhLnJlZ2lzdHJ5LnYxYWxwaGExIqABChRHZXRNb2R1bGVQaW5zUmVxdWVzdBJFChFtb2R1bGVfcmVmZXJlbmNlcxgBIAMoCzIqLmJ1Zi5hbHBoYS5tb2R1bGUudjFhbHBoYTEuTW9kdWxlUmVmZXJlbmNlEkEKE2N1cnJlbnRfbW9kdWxlX3BpbnMYAiADKAsyJC5idWYuYWxwaGEubW9kdWxlLnYxYWxwaGExLk1vZHVsZVBpbiJSChVHZXRNb2R1bGVQaW5zUmVzcG9uc2USOQoLbW9kdWxlX3BpbnMYASADKAsyJC5idWYuYWxwaGEubW9kdWxlLnYxYWxwaGExLk1vZHVsZVBpbiJvChlHZXRMb2NhbE1vZHVsZVBpbnNSZXF1ZXN0ElIKF2xvY2FsX21vZHVsZV9yZWZlcmVuY2VzGAEgAygLMjEuYnVmLmFscGhhLnJlZ2lzdHJ5LnYxYWxwaGExLkxvY2FsTW9kdWxlUmVmZXJlbmNlIu8BChhMb2NhbE1vZHVsZVJlc29sdmVSZXN1bHQSRAoJcmVmZXJlbmNlGAEgASgLMjEuYnVmLmFscGhhLnJlZ2lzdHJ5LnYxYWxwaGExLkxvY2FsTW9kdWxlUmVmZXJlbmNlEjgKA3BpbhgCIAEoCzIrLmJ1Zi5hbHBoYS5yZWdpc3RyeS52MWFscGhhMS5Mb2NhbE1vZHVsZVBpbhJTChdyZXNvbHZlZF9yZWZlcmVuY2VfdHlwZRgDIAEoDjIyLmJ1Zi5hbHBoYS5yZWdpc3RyeS52MWFscGhhMS5SZXNvbHZlZFJlZmVyZW5jZVR5cGUitQEKGkdldExvY2FsTW9kdWxlUGluc1Jlc3BvbnNlElsKHGxvY2FsX21vZHVsZV9yZXNvbHZlX3Jlc3VsdHMYASADKAsyNS5idWYuYWxwaGEucmVnaXN0cnkudjFhbHBoYTEuTG9jYWxNb2R1bGVSZXNvbHZlUmVzdWx0EjoKDGRlcGVuZGVuY2llcxgCIAMoCzIkLmJ1Zi5hbHBoYS5tb2R1bGUudjFhbHBoYTEuTW9kdWxlUGluKswBChVSZXNvbHZlZFJlZmVyZW5jZVR5cGUSJwojUkVTT0xWRURfUkVGRVJFTkNFX1RZUEVfVU5TUEVDSUZJRUQQABIiCh5SRVNPTFZFRF9SRUZFUkVOQ0VfVFlQRV9DT01NSVQQARIiCh5SRVNPTFZFRF9SRUZFUkVOQ0VfVFlQRV9CUkFOQ0gQAhIfChtSRVNPTFZFRF9SRUZFUkVOQ0VfVFlQRV9UQUcQAxIhCh1SRVNPTFZFRF9SRUZFUkVOQ0VfVFlQRV9UUkFDSxAEMogBCg5SZXNvbHZlU2VydmljZRJ2Cg1HZXRNb2R1bGVQaW5zEjEuYnVmLmFscGhhLnJlZ2lzdHJ5LnYxYWxwaGExLkdldE1vZHVsZVBpbnNSZXF1ZXN0GjIuYnVmLmFscGhhLnJlZ2lzdHJ5LnYxYWxwaGExLkdldE1vZHVsZVBpbnNSZXNwb25zZTKdAQoTTG9jYWxSZXNvbHZlU2VydmljZRKFAQoSR2V0TG9jYWxNb2R1bGVQaW5zEjYuYnVmLmFscGhhLnJlZ2lzdHJ5LnYxYWxwaGExLkdldExvY2FsTW9kdWxlUGluc1JlcXVlc3QaNy5idWYuYWxwaGEucmVnaXN0cnkudjFhbHBoYTEuR2V0TG9jYWxNb2R1bGVQaW5zUmVzcG9uc2ViBnByb3RvMw", [fileDesc_buf_alpha_module_v1alpha1_module, fileDesc_buf_alpha_registry_v1alpha1_module]);

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetModulePinsRequest
 */
export type GetModulePinsRequest = Message<"buf.alpha.registry.v1alpha1.GetModulePinsRequest"> & {
  /**
   * @generated from field: repeated buf.alpha.module.v1alpha1.ModuleReference module_references = 1;
   */
  moduleReferences: ModuleReference[];

  /**
   * current_module_pins allows for partial dependency updates by letting clients
   * send a request with the pins for their current module and only the
   * identities of the dependencies they want to update in module_references.
   *
   * When resolving, if a client supplied module pin is:
   * - in the transitive closure of pins resolved from the module_references,
   *   the client supplied module pin will be an extra candidate for tie
   *   breaking.
   * - NOT in the in the transitive closure of pins resolved from the
   *   module_references, it will be returned as is.
   *
   * @generated from field: repeated buf.alpha.module.v1alpha1.ModulePin current_module_pins = 2;
   */
  currentModulePins: ModulePin[];
};

/**
 * Describes the message buf.alpha.registry.v1alpha1.GetModulePinsRequest.
 * Use `create(GetModulePinsRequestDesc)` to create a new message.
 */
export const GetModulePinsRequestDesc: GenDescMessage<GetModulePinsRequest> = /*@__PURE__*/
  messageDesc(fileDesc_buf_alpha_registry_v1alpha1_resolve, 0);

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetModulePinsResponse
 */
export type GetModulePinsResponse = Message<"buf.alpha.registry.v1alpha1.GetModulePinsResponse"> & {
  /**
   * @generated from field: repeated buf.alpha.module.v1alpha1.ModulePin module_pins = 1;
   */
  modulePins: ModulePin[];
};

/**
 * Describes the message buf.alpha.registry.v1alpha1.GetModulePinsResponse.
 * Use `create(GetModulePinsResponseDesc)` to create a new message.
 */
export const GetModulePinsResponseDesc: GenDescMessage<GetModulePinsResponse> = /*@__PURE__*/
  messageDesc(fileDesc_buf_alpha_registry_v1alpha1_resolve, 1);

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetLocalModulePinsRequest
 */
export type GetLocalModulePinsRequest = Message<"buf.alpha.registry.v1alpha1.GetLocalModulePinsRequest"> & {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.LocalModuleReference local_module_references = 1;
   */
  localModuleReferences: LocalModuleReference[];
};

/**
 * Describes the message buf.alpha.registry.v1alpha1.GetLocalModulePinsRequest.
 * Use `create(GetLocalModulePinsRequestDesc)` to create a new message.
 */
export const GetLocalModulePinsRequestDesc: GenDescMessage<GetLocalModulePinsRequest> = /*@__PURE__*/
  messageDesc(fileDesc_buf_alpha_registry_v1alpha1_resolve, 2);

/**
 * @generated from message buf.alpha.registry.v1alpha1.LocalModuleResolveResult
 */
export type LocalModuleResolveResult = Message<"buf.alpha.registry.v1alpha1.LocalModuleResolveResult"> & {
  /**
   * A copy of the reference that was resolved.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.LocalModuleReference reference = 1;
   */
  reference?: LocalModuleReference;

  /**
   * The pin the reference resolved to.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.LocalModulePin pin = 2;
   */
  pin?: LocalModulePin;

  /**
   * The type the reference resolved as.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.ResolvedReferenceType resolved_reference_type = 3;
   */
  resolvedReferenceType: ResolvedReferenceType;
};

/**
 * Describes the message buf.alpha.registry.v1alpha1.LocalModuleResolveResult.
 * Use `create(LocalModuleResolveResultDesc)` to create a new message.
 */
export const LocalModuleResolveResultDesc: GenDescMessage<LocalModuleResolveResult> = /*@__PURE__*/
  messageDesc(fileDesc_buf_alpha_registry_v1alpha1_resolve, 3);

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetLocalModulePinsResponse
 */
export type GetLocalModulePinsResponse = Message<"buf.alpha.registry.v1alpha1.GetLocalModulePinsResponse"> & {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.LocalModuleResolveResult local_module_resolve_results = 1;
   */
  localModuleResolveResults: LocalModuleResolveResult[];

  /**
   * dependencies are the dependencies of the LocalModulePins.
   *
   * This includes the transitive deps.
   *
   * @generated from field: repeated buf.alpha.module.v1alpha1.ModulePin dependencies = 2;
   */
  dependencies: ModulePin[];
};

/**
 * Describes the message buf.alpha.registry.v1alpha1.GetLocalModulePinsResponse.
 * Use `create(GetLocalModulePinsResponseDesc)` to create a new message.
 */
export const GetLocalModulePinsResponseDesc: GenDescMessage<GetLocalModulePinsResponse> = /*@__PURE__*/
  messageDesc(fileDesc_buf_alpha_registry_v1alpha1_resolve, 4);

/**
 * @generated from enum buf.alpha.registry.v1alpha1.ResolvedReferenceType
 */
export enum ResolvedReferenceType {
  /**
   * @generated from enum value: RESOLVED_REFERENCE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESOLVED_REFERENCE_TYPE_COMMIT = 1;
   */
  COMMIT = 1,

  /**
   * @generated from enum value: RESOLVED_REFERENCE_TYPE_BRANCH = 2;
   */
  BRANCH = 2,

  /**
   * @generated from enum value: RESOLVED_REFERENCE_TYPE_TAG = 3;
   */
  TAG = 3,

  /**
   * @generated from enum value: RESOLVED_REFERENCE_TYPE_TRACK = 4;
   */
  TRACK = 4,
}

/**
 * Describes the enum buf.alpha.registry.v1alpha1.ResolvedReferenceType.
 */
export const ResolvedReferenceTypeDesc: GenDescEnum<ResolvedReferenceType> = /*@__PURE__*/
  enumDesc(fileDesc_buf_alpha_registry_v1alpha1_resolve, 0);

/**
 * ResolveService is the resolve service.
 *
 * This is the public service.
 *
 * @generated from service buf.alpha.registry.v1alpha1.ResolveService
 */
export const ResolveService: GenDescService<{
  /**
   * GetModulePins finds all the latest digests and respective dependencies of
   * the provided module references and picks a set of distinct modules pins.
   *
   * Note that module references with commits should still be passed to this function
   * to make sure this function can do dependency resolution.
   *
   * This function also deals with tiebreaking what ModulePin wins for the same repository.
   *
   * @generated from rpc buf.alpha.registry.v1alpha1.ResolveService.GetModulePins
   */
  getModulePins: {
    kind: "unary";
    I: GetModulePinsRequest;
    O: GetModulePinsResponse;
  },
}
> = /*@__PURE__*/
  serviceDesc(fileDesc_buf_alpha_registry_v1alpha1_resolve, 0);

/**
 * LocalResolveService is the local resolve service.
 *
 * This is called by ResolveService implementations, and is enterprise.
 *
 * @generated from service buf.alpha.registry.v1alpha1.LocalResolveService
 */
export const LocalResolveService: GenDescService<{
  /**
   * GetLocalModulePins gets the latest pins for the specified local module references.
   * It also includes all of the modules transitive dependencies for the specified references.
   *
   * We want this for two reasons:
   *
   * 1. It makes it easy to say "we know we're looking for owner/repo on this specific remote".
   *    While we could just do this in GetModulePins by being aware of what our remote is
   *    (something we probably still need to know, DNS problems aside, which are more
   *    theoretical), this helps.
   * 2. Having a separate method makes us able to say "do not make decisions about what
   *    wins between competing pins for the same repo". This should only be done in
   *    GetModulePins, not in this function, i.e. only done at the top level.
   *
   * @generated from rpc buf.alpha.registry.v1alpha1.LocalResolveService.GetLocalModulePins
   */
  getLocalModulePins: {
    kind: "unary";
    I: GetLocalModulePinsRequest;
    O: GetLocalModulePinsResponse;
  },
}
> = /*@__PURE__*/
  serviceDesc(fileDesc_buf_alpha_registry_v1alpha1_resolve, 1);

