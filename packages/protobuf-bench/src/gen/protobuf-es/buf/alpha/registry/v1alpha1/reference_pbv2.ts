// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.8.0 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/alpha/registry/v1alpha1/reference.proto (package buf.alpha.registry.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenDescFile, GenDescMessage, GenDescService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { RepositoryBranch } from "./repository_branch_pbv2.js";
import { fileDesc_buf_alpha_registry_v1alpha1_repository_branch } from "./repository_branch_pbv2.js";
import type { RepositoryCommit } from "./repository_commit_pbv2.js";
import { fileDesc_buf_alpha_registry_v1alpha1_repository_commit } from "./repository_commit_pbv2.js";
import type { RepositoryTag } from "./repository_tag_pbv2.js";
import { fileDesc_buf_alpha_registry_v1alpha1_repository_tag } from "./repository_tag_pbv2.js";
import type { RepositoryTrack } from "./repository_track_pbv2.js";
import { fileDesc_buf_alpha_registry_v1alpha1_repository_track } from "./repository_track_pbv2.js";
import type { Message } from "@bufbuild/protobuf";

export const fileDesc_buf_alpha_registry_v1alpha1_reference: GenDescFile = /*@__PURE__*/
  fileDesc("CitidWYvYWxwaGEvcmVnaXN0cnkvdjFhbHBoYTEvcmVmZXJlbmNlLnByb3RvEhtidWYuYWxwaGEucmVnaXN0cnkudjFhbHBoYTEilAIKCVJlZmVyZW5jZRI/CgZicmFuY2gYASABKAsyLS5idWYuYWxwaGEucmVnaXN0cnkudjFhbHBoYTEuUmVwb3NpdG9yeUJyYW5jaEgAEjkKA3RhZxgCIAEoCzIqLmJ1Zi5hbHBoYS5yZWdpc3RyeS52MWFscGhhMS5SZXBvc2l0b3J5VGFnSAASPwoGY29tbWl0GAMgASgLMi0uYnVmLmFscGhhLnJlZ2lzdHJ5LnYxYWxwaGExLlJlcG9zaXRvcnlDb21taXRIABI9CgV0cmFjaxgEIAEoCzIsLmJ1Zi5hbHBoYS5yZWdpc3RyeS52MWFscGhhMS5SZXBvc2l0b3J5VHJhY2tIAEILCglyZWZlcmVuY2UiUQoZR2V0UmVmZXJlbmNlQnlOYW1lUmVxdWVzdBIMCgRuYW1lGAEgASgJEg0KBW93bmVyGAIgASgJEhcKD3JlcG9zaXRvcnlfbmFtZRgDIAEoCSJXChpHZXRSZWZlcmVuY2VCeU5hbWVSZXNwb25zZRI5CglyZWZlcmVuY2UYASABKAsyJi5idWYuYWxwaGEucmVnaXN0cnkudjFhbHBoYTEuUmVmZXJlbmNlMpoBChBSZWZlcmVuY2VTZXJ2aWNlEoUBChJHZXRSZWZlcmVuY2VCeU5hbWUSNi5idWYuYWxwaGEucmVnaXN0cnkudjFhbHBoYTEuR2V0UmVmZXJlbmNlQnlOYW1lUmVxdWVzdBo3LmJ1Zi5hbHBoYS5yZWdpc3RyeS52MWFscGhhMS5HZXRSZWZlcmVuY2VCeU5hbWVSZXNwb25zZWIGcHJvdG8z", [fileDesc_buf_alpha_registry_v1alpha1_repository_branch, fileDesc_buf_alpha_registry_v1alpha1_repository_commit, fileDesc_buf_alpha_registry_v1alpha1_repository_tag, fileDesc_buf_alpha_registry_v1alpha1_repository_track]);

/**
 * @generated from message buf.alpha.registry.v1alpha1.Reference
 */
export type Reference = Message<"buf.alpha.registry.v1alpha1.Reference"> & {
  /**
   * @generated from oneof buf.alpha.registry.v1alpha1.Reference.reference
   */
  reference: {
    /**
     * The requested reference is a branch.
     *
     * @generated from field: buf.alpha.registry.v1alpha1.RepositoryBranch branch = 1;
     */
    value: RepositoryBranch;
    case: "branch";
  } | {
    /**
     * The requested reference is a tag.
     *
     * @generated from field: buf.alpha.registry.v1alpha1.RepositoryTag tag = 2;
     */
    value: RepositoryTag;
    case: "tag";
  } | {
    /**
     * The requested reference is a commit.
     *
     * @generated from field: buf.alpha.registry.v1alpha1.RepositoryCommit commit = 3;
     */
    value: RepositoryCommit;
    case: "commit";
  } | {
    /**
     * The requested reference is a track.
     *
     * @generated from field: buf.alpha.registry.v1alpha1.RepositoryTrack track = 4;
     */
    value: RepositoryTrack;
    case: "track";
  } | { case: undefined; value?: undefined };
};

// Describes the message buf.alpha.registry.v1alpha1.Reference.
// Use `create(ReferenceDesc)` to create a new Reference.
export const ReferenceDesc: GenDescMessage<Reference> = /*@__PURE__*/
  messageDesc(fileDesc_buf_alpha_registry_v1alpha1_reference, 0);

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetReferenceByNameRequest
 */
export type GetReferenceByNameRequest = Message<"buf.alpha.registry.v1alpha1.GetReferenceByNameRequest"> & {
  /**
   * Name of the requested reference.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Owner of the repository the reference belongs to.
   *
   * @generated from field: string owner = 2;
   */
  owner: string;

  /**
   * Name of the repository the reference belongs to.
   *
   * @generated from field: string repository_name = 3;
   */
  repositoryName: string;
};

// Describes the message buf.alpha.registry.v1alpha1.GetReferenceByNameRequest.
// Use `create(GetReferenceByNameRequestDesc)` to create a new GetReferenceByNameRequest.
export const GetReferenceByNameRequestDesc: GenDescMessage<GetReferenceByNameRequest> = /*@__PURE__*/
  messageDesc(fileDesc_buf_alpha_registry_v1alpha1_reference, 1);

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetReferenceByNameResponse
 */
export type GetReferenceByNameResponse = Message<"buf.alpha.registry.v1alpha1.GetReferenceByNameResponse"> & {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.Reference reference = 1;
   */
  reference?: Reference;
};

// Describes the message buf.alpha.registry.v1alpha1.GetReferenceByNameResponse.
// Use `create(GetReferenceByNameResponseDesc)` to create a new GetReferenceByNameResponse.
export const GetReferenceByNameResponseDesc: GenDescMessage<GetReferenceByNameResponse> = /*@__PURE__*/
  messageDesc(fileDesc_buf_alpha_registry_v1alpha1_reference, 2);

/**
 * ReferenceService is a service that provides RPCs that allow the BSR to query
 * for reference information.
 *
 * @generated from service buf.alpha.registry.v1alpha1.ReferenceService
 */
export const ReferenceService: GenDescService<{
  /**
   * GetReferenceByName takes a reference name and returns the
   * reference either as a tag, branch, track or commit.
   *
   * @generated from rpc buf.alpha.registry.v1alpha1.ReferenceService.GetReferenceByName
   */
  getReferenceByName: {
    kind: "unary";
    I: GetReferenceByNameRequest;
    O: GetReferenceByNameResponse;
  },
}
> = /*@__PURE__*/
  serviceDesc(fileDesc_buf_alpha_registry_v1alpha1_reference, 0);

