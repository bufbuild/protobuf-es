// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v0.2.1 with parameter "ts_nocheck=false,target=ts"
// @generated from file buf/alpha/registry/v1alpha1/plugin.proto (package buf.alpha.registry.v1alpha1, syntax proto3)
/* eslint-disable */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import {RuntimeLibrary} from "./generate_pb.js";
import {User} from "./user_pb.js";
import {PluginRole, TemplateRole} from "./role_pb.js";

/**
 * PluginVisibility defines the visibility options available
 * for Plugins and Templates.
 *
 * @generated from enum buf.alpha.registry.v1alpha1.PluginVisibility
 */
export enum PluginVisibility {
  /**
   * @generated from enum value: PLUGIN_VISIBILITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PLUGIN_VISIBILITY_PUBLIC = 1;
   */
  PUBLIC = 1,

  /**
   * @generated from enum value: PLUGIN_VISIBILITY_PRIVATE = 2;
   */
  PRIVATE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PluginVisibility)
proto3.util.setEnumType(PluginVisibility, "buf.alpha.registry.v1alpha1.PluginVisibility", [
  { no: 0, name: "PLUGIN_VISIBILITY_UNSPECIFIED" },
  { no: 1, name: "PLUGIN_VISIBILITY_PUBLIC" },
  { no: 2, name: "PLUGIN_VISIBILITY_PRIVATE" },
]);

/**
 * Plugin represents a protoc plugin, such as protoc-gen-go.
 *
 * @generated from message buf.alpha.registry.v1alpha1.Plugin
 */
export class Plugin extends Message<Plugin> {
  /**
   * The ID of the plugin, which uniquely identifies the plugin.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The name of the plugin, i.e. "protoc-gen-go".
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The name of the owner of the plugin. Either a username or
   * organization name.
   *
   * @generated from field: string owner = 3;
   */
  owner = "";

  /**
   * The visibility of the plugin.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.PluginVisibility visibility = 4;
   */
  visibility = PluginVisibility.UNSPECIFIED;

  /**
   * deprecated means this plugin is deprecated.
   *
   * @generated from field: bool deprecated = 5;
   */
  deprecated = false;

  /**
   * deprecation_message is the message shown if the plugin is deprecated.
   *
   * @generated from field: string deprecation_message = 6;
   */
  deprecationMessage = "";

  constructor(data?: PartialMessage<Plugin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.Plugin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "visibility", kind: "enum", T: proto3.getEnumType(PluginVisibility) },
    { no: 5, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "deprecation_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Plugin {
    return new Plugin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Plugin {
    return new Plugin().fromJsonString(jsonString, options);
  }

  static equals(a: Plugin | PlainMessage<Plugin> | undefined, b: Plugin | PlainMessage<Plugin> | undefined): boolean {
    return proto3.util.equals(Plugin, a, b);
  }
}

/**
 * PluginVersion represents a specific build of a plugin,
 * such as protoc-gen-go v1.4.0.
 *
 * @generated from message buf.alpha.registry.v1alpha1.PluginVersion
 */
export class PluginVersion extends Message<PluginVersion> {
  /**
   * The ID of the plugin version, which uniquely identifies the plugin version.
   * Mostly used for pagination.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The name of the version, i.e. "v1.4.0".
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The name of the plugin to which this version relates.
   *
   * @generated from field: string plugin_name = 3;
   */
  pluginName = "";

  /**
   * The owner of the plugin to which this version relates.
   *
   * @generated from field: string plugin_owner = 4;
   */
  pluginOwner = "";

  /**
   * The full container image digest associated with this plugin version including
   * the algorithm.
   * Ref: https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests
   *
   * @generated from field: string container_image_digest = 5;
   */
  containerImageDigest = "";

  /**
   * Optionally define the runtime libraries.
   *
   * @generated from field: repeated buf.alpha.registry.v1alpha1.RuntimeLibrary runtime_libraries = 6;
   */
  runtimeLibraries: RuntimeLibrary[] = [];

  constructor(data?: PartialMessage<PluginVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.PluginVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "plugin_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "plugin_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "container_image_digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "runtime_libraries", kind: "message", T: RuntimeLibrary, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginVersion {
    return new PluginVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginVersion {
    return new PluginVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginVersion {
    return new PluginVersion().fromJsonString(jsonString, options);
  }

  static equals(a: PluginVersion | PlainMessage<PluginVersion> | undefined, b: PluginVersion | PlainMessage<PluginVersion> | undefined): boolean {
    return proto3.util.equals(PluginVersion, a, b);
  }
}

/**
 * Template defines a set of plugins that should be used together
 * i.e. "go-grpc" would include protoc-gen-go and protoc-gen-go-grpc.
 *
 * @generated from message buf.alpha.registry.v1alpha1.Template
 */
export class Template extends Message<Template> {
  /**
   * The ID of the template, which uniquely identifies the template.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The name of the template, i.e. "grpc-go".
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The name of the owner of the template. Either a
   * username or organization name.
   *
   * @generated from field: string owner = 3;
   */
  owner = "";

  /**
   * Must not contain duplicate plugins. Order of plugin configs
   * dictates insertion point order. Note that we're
   * intentionally putting most of the plugin configuration
   * in the template, so that template versions are
   * less likely to cause breakages for users.
   *
   * @generated from field: repeated buf.alpha.registry.v1alpha1.PluginConfig plugin_configs = 4;
   */
  pluginConfigs: PluginConfig[] = [];

  /**
   * The visibility of the template.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.PluginVisibility visibility = 5;
   */
  visibility = PluginVisibility.UNSPECIFIED;

  /**
   * deprecated means this template is deprecated.
   *
   * @generated from field: bool deprecated = 8;
   */
  deprecated = false;

  /**
   * deprecation_message is the message shown if the template is deprecated.
   *
   * @generated from field: string deprecation_message = 9;
   */
  deprecationMessage = "";

  constructor(data?: PartialMessage<Template>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.Template";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "plugin_configs", kind: "message", T: PluginConfig, repeated: true },
    { no: 5, name: "visibility", kind: "enum", T: proto3.getEnumType(PluginVisibility) },
    { no: 8, name: "deprecated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "deprecation_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Template {
    return new Template().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Template {
    return new Template().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Template {
    return new Template().fromJsonString(jsonString, options);
  }

  static equals(a: Template | PlainMessage<Template> | undefined, b: Template | PlainMessage<Template> | undefined): boolean {
    return proto3.util.equals(Template, a, b);
  }
}

/**
 * PluginConfig defines a runtime configuration for a plugin.
 *
 * @generated from message buf.alpha.registry.v1alpha1.PluginConfig
 */
export class PluginConfig extends Message<PluginConfig> {
  /**
   * The owner of the plugin to which this config relates.
   *
   * @generated from field: string plugin_owner = 1;
   */
  pluginOwner = "";

  /**
   * The name of the plugin to which this config relates.
   *
   * @generated from field: string plugin_name = 2;
   */
  pluginName = "";

  /**
   * Parameters that should be provided to the plugin. These are
   * joined with a "," before being provided to the plugin at runtime.
   *
   * @generated from field: repeated string parameters = 3;
   */
  parameters: string[] = [];

  /**
   * True if the source plugin is inaccessible by the user.
   *
   * @generated from field: bool inaccessible = 5;
   */
  inaccessible = false;

  constructor(data?: PartialMessage<PluginConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.PluginConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plugin_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parameters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "inaccessible", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginConfig {
    return new PluginConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginConfig {
    return new PluginConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginConfig {
    return new PluginConfig().fromJsonString(jsonString, options);
  }

  static equals(a: PluginConfig | PlainMessage<PluginConfig> | undefined, b: PluginConfig | PlainMessage<PluginConfig> | undefined): boolean {
    return proto3.util.equals(PluginConfig, a, b);
  }
}

/**
 * TemplateVersion defines a template at a
 * specific set of versions for the contained plugins.
 *
 * @generated from message buf.alpha.registry.v1alpha1.TemplateVersion
 */
export class TemplateVersion extends Message<TemplateVersion> {
  /**
   * The ID of the template version, which uniquely identifies the template version.
   * Mostly used for pagination.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The name of the template version, i.e. "v1".
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The owner of the template to which this version relates.
   *
   * @generated from field: string template_owner = 3;
   */
  templateOwner = "";

  /**
   * The name of the template to which this version relates.
   *
   * @generated from field: string template_name = 4;
   */
  templateName = "";

  /**
   * A map from plugin owner and name to version for the plugins
   * defined in the template. Every plugin in the template
   * must have a corresponding version in this array.
   *
   * @generated from field: repeated buf.alpha.registry.v1alpha1.PluginVersionMapping plugin_versions = 5;
   */
  pluginVersions: PluginVersionMapping[] = [];

  constructor(data?: PartialMessage<TemplateVersion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.TemplateVersion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "template_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "template_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "plugin_versions", kind: "message", T: PluginVersionMapping, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemplateVersion {
    return new TemplateVersion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemplateVersion {
    return new TemplateVersion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemplateVersion {
    return new TemplateVersion().fromJsonString(jsonString, options);
  }

  static equals(a: TemplateVersion | PlainMessage<TemplateVersion> | undefined, b: TemplateVersion | PlainMessage<TemplateVersion> | undefined): boolean {
    return proto3.util.equals(TemplateVersion, a, b);
  }
}

/**
 * PluginVersionMapping maps a plugin_id to a version.
 *
 * @generated from message buf.alpha.registry.v1alpha1.PluginVersionMapping
 */
export class PluginVersionMapping extends Message<PluginVersionMapping> {
  /**
   * The owner of the plugin to which this mapping relates.
   *
   * @generated from field: string plugin_owner = 1;
   */
  pluginOwner = "";

  /**
   * The name of the plugin to which this mapping relates.
   *
   * @generated from field: string plugin_name = 2;
   */
  pluginName = "";

  /**
   * The version of the plugin to use, i.e. "v1.4.0".
   *
   * @generated from field: string version = 3;
   */
  version = "";

  /**
   * True if the source plugin is inaccessible by the user.
   *
   * @generated from field: bool inaccessible = 5;
   */
  inaccessible = false;

  constructor(data?: PartialMessage<PluginVersionMapping>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.PluginVersionMapping";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "plugin_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "inaccessible", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginVersionMapping {
    return new PluginVersionMapping().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginVersionMapping {
    return new PluginVersionMapping().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginVersionMapping {
    return new PluginVersionMapping().fromJsonString(jsonString, options);
  }

  static equals(a: PluginVersionMapping | PlainMessage<PluginVersionMapping> | undefined, b: PluginVersionMapping | PlainMessage<PluginVersionMapping> | undefined): boolean {
    return proto3.util.equals(PluginVersionMapping, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.PluginContributor
 */
export class PluginContributor extends Message<PluginContributor> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.User user = 1;
   */
  user?: User;

  /**
   * The ID of the plugin which the role belongs to.
   *
   * @generated from field: string plugin_id = 2;
   */
  pluginId = "";

  /**
   * The role that the user has been explicitly assigned against the plugin.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.PluginRole explicit_role = 3;
   */
  explicitRole = PluginRole.UNSPECIFIED;

  /**
   * Optionally defines the role that the user has implicitly against the plugin through the owning organization.
   * If the plugin does not belong to an organization or the user is not part of the owning organization, this is unset.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.PluginRole implicit_role = 4;
   */
  implicitRole = PluginRole.UNSPECIFIED;

  constructor(data?: PartialMessage<PluginContributor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.PluginContributor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "plugin_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "explicit_role", kind: "enum", T: proto3.getEnumType(PluginRole) },
    { no: 4, name: "implicit_role", kind: "enum", T: proto3.getEnumType(PluginRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginContributor {
    return new PluginContributor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginContributor {
    return new PluginContributor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginContributor {
    return new PluginContributor().fromJsonString(jsonString, options);
  }

  static equals(a: PluginContributor | PlainMessage<PluginContributor> | undefined, b: PluginContributor | PlainMessage<PluginContributor> | undefined): boolean {
    return proto3.util.equals(PluginContributor, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.TemplateContributor
 */
export class TemplateContributor extends Message<TemplateContributor> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.User user = 1;
   */
  user?: User;

  /**
   * The ID of the template which the role belongs to.
   *
   * @generated from field: string template_id = 2;
   */
  templateId = "";

  /**
   * The role that the user has been explicitly assigned against the template.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.TemplateRole explicit_role = 3;
   */
  explicitRole = TemplateRole.UNSPECIFIED;

  /**
   * Optionally defines the role that the user has implicitly against the template through the owning organization.
   * If the template does not belong to an organization or the user is not part of the owning organization, this is unset.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.TemplateRole implicit_role = 4;
   */
  implicitRole = TemplateRole.UNSPECIFIED;

  constructor(data?: PartialMessage<TemplateContributor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.TemplateContributor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
    { no: 2, name: "template_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "explicit_role", kind: "enum", T: proto3.getEnumType(TemplateRole) },
    { no: 4, name: "implicit_role", kind: "enum", T: proto3.getEnumType(TemplateRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemplateContributor {
    return new TemplateContributor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemplateContributor {
    return new TemplateContributor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemplateContributor {
    return new TemplateContributor().fromJsonString(jsonString, options);
  }

  static equals(a: TemplateContributor | PlainMessage<TemplateContributor> | undefined, b: TemplateContributor | PlainMessage<TemplateContributor> | undefined): boolean {
    return proto3.util.equals(TemplateContributor, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListPluginsRequest
 */
export class ListPluginsRequest extends Message<ListPluginsRequest> {
  /**
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 3;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListPluginsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListPluginsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPluginsRequest {
    return new ListPluginsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPluginsRequest {
    return new ListPluginsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPluginsRequest {
    return new ListPluginsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPluginsRequest | PlainMessage<ListPluginsRequest> | undefined, b: ListPluginsRequest | PlainMessage<ListPluginsRequest> | undefined): boolean {
    return proto3.util.equals(ListPluginsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListPluginsResponse
 */
export class ListPluginsResponse extends Message<ListPluginsResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.Plugin plugins = 1;
   */
  plugins: Plugin[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListPluginsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListPluginsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugins", kind: "message", T: Plugin, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPluginsResponse {
    return new ListPluginsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPluginsResponse {
    return new ListPluginsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPluginsResponse {
    return new ListPluginsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPluginsResponse | PlainMessage<ListPluginsResponse> | undefined, b: ListPluginsResponse | PlainMessage<ListPluginsResponse> | undefined): boolean {
    return proto3.util.equals(ListPluginsResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListUserPluginsRequest
 */
export class ListUserPluginsRequest extends Message<ListUserPluginsRequest> {
  /**
   * The owner to list plugins for.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 4;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListUserPluginsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListUserPluginsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserPluginsRequest {
    return new ListUserPluginsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserPluginsRequest {
    return new ListUserPluginsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserPluginsRequest {
    return new ListUserPluginsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserPluginsRequest | PlainMessage<ListUserPluginsRequest> | undefined, b: ListUserPluginsRequest | PlainMessage<ListUserPluginsRequest> | undefined): boolean {
    return proto3.util.equals(ListUserPluginsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListUserPluginsResponse
 */
export class ListUserPluginsResponse extends Message<ListUserPluginsResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.Plugin plugins = 1;
   */
  plugins: Plugin[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListUserPluginsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListUserPluginsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugins", kind: "message", T: Plugin, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserPluginsResponse {
    return new ListUserPluginsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserPluginsResponse {
    return new ListUserPluginsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserPluginsResponse {
    return new ListUserPluginsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserPluginsResponse | PlainMessage<ListUserPluginsResponse> | undefined, b: ListUserPluginsResponse | PlainMessage<ListUserPluginsResponse> | undefined): boolean {
    return proto3.util.equals(ListUserPluginsResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListOrganizationPluginsRequest
 */
export class ListOrganizationPluginsRequest extends Message<ListOrganizationPluginsRequest> {
  /**
   * The organization to list plugins for.
   *
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 4;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListOrganizationPluginsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListOrganizationPluginsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationPluginsRequest {
    return new ListOrganizationPluginsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationPluginsRequest {
    return new ListOrganizationPluginsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationPluginsRequest {
    return new ListOrganizationPluginsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationPluginsRequest | PlainMessage<ListOrganizationPluginsRequest> | undefined, b: ListOrganizationPluginsRequest | PlainMessage<ListOrganizationPluginsRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationPluginsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListOrganizationPluginsResponse
 */
export class ListOrganizationPluginsResponse extends Message<ListOrganizationPluginsResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.Plugin plugins = 1;
   */
  plugins: Plugin[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationPluginsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListOrganizationPluginsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugins", kind: "message", T: Plugin, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationPluginsResponse {
    return new ListOrganizationPluginsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationPluginsResponse {
    return new ListOrganizationPluginsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationPluginsResponse {
    return new ListOrganizationPluginsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationPluginsResponse | PlainMessage<ListOrganizationPluginsResponse> | undefined, b: ListOrganizationPluginsResponse | PlainMessage<ListOrganizationPluginsResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationPluginsResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetPluginVersionRequest
 */
export class GetPluginVersionRequest extends Message<GetPluginVersionRequest> {
  /**
   * The owner of the plugin the version belongs to.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the plugin the version belongs to.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The name of the version.
   *
   * @generated from field: string version = 3;
   */
  version = "";

  constructor(data?: PartialMessage<GetPluginVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetPluginVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPluginVersionRequest {
    return new GetPluginVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPluginVersionRequest {
    return new GetPluginVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPluginVersionRequest {
    return new GetPluginVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPluginVersionRequest | PlainMessage<GetPluginVersionRequest> | undefined, b: GetPluginVersionRequest | PlainMessage<GetPluginVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetPluginVersionRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetPluginVersionResponse
 */
export class GetPluginVersionResponse extends Message<GetPluginVersionResponse> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.PluginVersion plugin_version = 1;
   */
  pluginVersion?: PluginVersion;

  constructor(data?: PartialMessage<GetPluginVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetPluginVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin_version", kind: "message", T: PluginVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPluginVersionResponse {
    return new GetPluginVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPluginVersionResponse {
    return new GetPluginVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPluginVersionResponse {
    return new GetPluginVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPluginVersionResponse | PlainMessage<GetPluginVersionResponse> | undefined, b: GetPluginVersionResponse | PlainMessage<GetPluginVersionResponse> | undefined): boolean {
    return proto3.util.equals(GetPluginVersionResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListPluginVersionsRequest
 */
export class ListPluginVersionsRequest extends Message<ListPluginVersionsRequest> {
  /**
   * The owner of the plugin to list versions for.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the plugin to list versions for.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The number of items to return.
   *
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 5;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListPluginVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListPluginVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPluginVersionsRequest {
    return new ListPluginVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPluginVersionsRequest {
    return new ListPluginVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPluginVersionsRequest {
    return new ListPluginVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPluginVersionsRequest | PlainMessage<ListPluginVersionsRequest> | undefined, b: ListPluginVersionsRequest | PlainMessage<ListPluginVersionsRequest> | undefined): boolean {
    return proto3.util.equals(ListPluginVersionsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListPluginVersionsResponse
 */
export class ListPluginVersionsResponse extends Message<ListPluginVersionsResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.PluginVersion plugin_versions = 1;
   */
  pluginVersions: PluginVersion[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListPluginVersionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListPluginVersionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin_versions", kind: "message", T: PluginVersion, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPluginVersionsResponse {
    return new ListPluginVersionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPluginVersionsResponse {
    return new ListPluginVersionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPluginVersionsResponse {
    return new ListPluginVersionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPluginVersionsResponse | PlainMessage<ListPluginVersionsResponse> | undefined, b: ListPluginVersionsResponse | PlainMessage<ListPluginVersionsResponse> | undefined): boolean {
    return proto3.util.equals(ListPluginVersionsResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.CreatePluginRequest
 */
export class CreatePluginRequest extends Message<CreatePluginRequest> {
  /**
   * The owner of the plugin. This must be either the name
   * of the authenticated user or an organization the user is
   * authorized to create plugins in.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the plugin, i.e. "protoc-gen-go".
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Whether the created plugin should be available to any user
   * or only those authorized through organization membership
   * or being the creator.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.PluginVisibility visibility = 3;
   */
  visibility = PluginVisibility.UNSPECIFIED;

  constructor(data?: PartialMessage<CreatePluginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.CreatePluginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "visibility", kind: "enum", T: proto3.getEnumType(PluginVisibility) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePluginRequest {
    return new CreatePluginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePluginRequest {
    return new CreatePluginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePluginRequest {
    return new CreatePluginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePluginRequest | PlainMessage<CreatePluginRequest> | undefined, b: CreatePluginRequest | PlainMessage<CreatePluginRequest> | undefined): boolean {
    return proto3.util.equals(CreatePluginRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.CreatePluginResponse
 */
export class CreatePluginResponse extends Message<CreatePluginResponse> {
  /**
   * The created plugin.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.Plugin plugin = 1;
   */
  plugin?: Plugin;

  constructor(data?: PartialMessage<CreatePluginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.CreatePluginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin", kind: "message", T: Plugin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePluginResponse {
    return new CreatePluginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePluginResponse {
    return new CreatePluginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePluginResponse {
    return new CreatePluginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePluginResponse | PlainMessage<CreatePluginResponse> | undefined, b: CreatePluginResponse | PlainMessage<CreatePluginResponse> | undefined): boolean {
    return proto3.util.equals(CreatePluginResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetPluginRequest
 */
export class GetPluginRequest extends Message<GetPluginRequest> {
  /**
   * The owner of the plugin.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the plugin.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GetPluginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetPluginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPluginRequest {
    return new GetPluginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPluginRequest {
    return new GetPluginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPluginRequest {
    return new GetPluginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPluginRequest | PlainMessage<GetPluginRequest> | undefined, b: GetPluginRequest | PlainMessage<GetPluginRequest> | undefined): boolean {
    return proto3.util.equals(GetPluginRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetPluginResponse
 */
export class GetPluginResponse extends Message<GetPluginResponse> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.Plugin plugin = 1;
   */
  plugin?: Plugin;

  constructor(data?: PartialMessage<GetPluginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetPluginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin", kind: "message", T: Plugin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPluginResponse {
    return new GetPluginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPluginResponse {
    return new GetPluginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPluginResponse {
    return new GetPluginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPluginResponse | PlainMessage<GetPluginResponse> | undefined, b: GetPluginResponse | PlainMessage<GetPluginResponse> | undefined): boolean {
    return proto3.util.equals(GetPluginResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeletePluginRequest
 */
export class DeletePluginRequest extends Message<DeletePluginRequest> {
  /**
   * The owner of the plugin to delete.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the plugin to delete.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<DeletePluginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeletePluginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePluginRequest {
    return new DeletePluginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePluginRequest {
    return new DeletePluginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePluginRequest {
    return new DeletePluginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePluginRequest | PlainMessage<DeletePluginRequest> | undefined, b: DeletePluginRequest | PlainMessage<DeletePluginRequest> | undefined): boolean {
    return proto3.util.equals(DeletePluginRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeletePluginResponse
 */
export class DeletePluginResponse extends Message<DeletePluginResponse> {
  constructor(data?: PartialMessage<DeletePluginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeletePluginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePluginResponse {
    return new DeletePluginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePluginResponse {
    return new DeletePluginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePluginResponse {
    return new DeletePluginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePluginResponse | PlainMessage<DeletePluginResponse> | undefined, b: DeletePluginResponse | PlainMessage<DeletePluginResponse> | undefined): boolean {
    return proto3.util.equals(DeletePluginResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.SetPluginContributorRequest
 */
export class SetPluginContributorRequest extends Message<SetPluginContributorRequest> {
  /**
   * The ID of the plugin for which the user's role will be set.
   *
   * @generated from field: string plugin_id = 1;
   */
  pluginId = "";

  /**
   * The ID of the user whose role will be set.
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * The role to assign to the user.
   * Setting UNSPECIFIED means removing the user's role.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.PluginRole plugin_role = 3;
   */
  pluginRole = PluginRole.UNSPECIFIED;

  constructor(data?: PartialMessage<SetPluginContributorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.SetPluginContributorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "plugin_role", kind: "enum", T: proto3.getEnumType(PluginRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPluginContributorRequest {
    return new SetPluginContributorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPluginContributorRequest {
    return new SetPluginContributorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPluginContributorRequest {
    return new SetPluginContributorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetPluginContributorRequest | PlainMessage<SetPluginContributorRequest> | undefined, b: SetPluginContributorRequest | PlainMessage<SetPluginContributorRequest> | undefined): boolean {
    return proto3.util.equals(SetPluginContributorRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.SetPluginContributorResponse
 */
export class SetPluginContributorResponse extends Message<SetPluginContributorResponse> {
  constructor(data?: PartialMessage<SetPluginContributorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.SetPluginContributorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetPluginContributorResponse {
    return new SetPluginContributorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetPluginContributorResponse {
    return new SetPluginContributorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetPluginContributorResponse {
    return new SetPluginContributorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetPluginContributorResponse | PlainMessage<SetPluginContributorResponse> | undefined, b: SetPluginContributorResponse | PlainMessage<SetPluginContributorResponse> | undefined): boolean {
    return proto3.util.equals(SetPluginContributorResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListPluginContributorsRequest
 */
export class ListPluginContributorsRequest extends Message<ListPluginContributorsRequest> {
  /**
   * @generated from field: string plugin_id = 1;
   */
  pluginId = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 4;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListPluginContributorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListPluginContributorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plugin_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPluginContributorsRequest {
    return new ListPluginContributorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPluginContributorsRequest {
    return new ListPluginContributorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPluginContributorsRequest {
    return new ListPluginContributorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPluginContributorsRequest | PlainMessage<ListPluginContributorsRequest> | undefined, b: ListPluginContributorsRequest | PlainMessage<ListPluginContributorsRequest> | undefined): boolean {
    return proto3.util.equals(ListPluginContributorsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListPluginContributorsResponse
 */
export class ListPluginContributorsResponse extends Message<ListPluginContributorsResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.PluginContributor users = 1;
   */
  users: PluginContributor[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListPluginContributorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListPluginContributorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: PluginContributor, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPluginContributorsResponse {
    return new ListPluginContributorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPluginContributorsResponse {
    return new ListPluginContributorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPluginContributorsResponse {
    return new ListPluginContributorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPluginContributorsResponse | PlainMessage<ListPluginContributorsResponse> | undefined, b: ListPluginContributorsResponse | PlainMessage<ListPluginContributorsResponse> | undefined): boolean {
    return proto3.util.equals(ListPluginContributorsResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeprecatePluginRequest
 */
export class DeprecatePluginRequest extends Message<DeprecatePluginRequest> {
  /**
   * The owner of the plugin.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the plugin.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * A message shown along with the deprecation warning for this plugin.
   *
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<DeprecatePluginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeprecatePluginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeprecatePluginRequest {
    return new DeprecatePluginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeprecatePluginRequest {
    return new DeprecatePluginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeprecatePluginRequest {
    return new DeprecatePluginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeprecatePluginRequest | PlainMessage<DeprecatePluginRequest> | undefined, b: DeprecatePluginRequest | PlainMessage<DeprecatePluginRequest> | undefined): boolean {
    return proto3.util.equals(DeprecatePluginRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeprecatePluginResponse
 */
export class DeprecatePluginResponse extends Message<DeprecatePluginResponse> {
  constructor(data?: PartialMessage<DeprecatePluginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeprecatePluginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeprecatePluginResponse {
    return new DeprecatePluginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeprecatePluginResponse {
    return new DeprecatePluginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeprecatePluginResponse {
    return new DeprecatePluginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeprecatePluginResponse | PlainMessage<DeprecatePluginResponse> | undefined, b: DeprecatePluginResponse | PlainMessage<DeprecatePluginResponse> | undefined): boolean {
    return proto3.util.equals(DeprecatePluginResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.UndeprecatePluginRequest
 */
export class UndeprecatePluginRequest extends Message<UndeprecatePluginRequest> {
  /**
   * The owner of the plugin.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the plugin.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<UndeprecatePluginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.UndeprecatePluginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeprecatePluginRequest {
    return new UndeprecatePluginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeprecatePluginRequest {
    return new UndeprecatePluginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeprecatePluginRequest {
    return new UndeprecatePluginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UndeprecatePluginRequest | PlainMessage<UndeprecatePluginRequest> | undefined, b: UndeprecatePluginRequest | PlainMessage<UndeprecatePluginRequest> | undefined): boolean {
    return proto3.util.equals(UndeprecatePluginRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.UndeprecatePluginResponse
 */
export class UndeprecatePluginResponse extends Message<UndeprecatePluginResponse> {
  constructor(data?: PartialMessage<UndeprecatePluginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.UndeprecatePluginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeprecatePluginResponse {
    return new UndeprecatePluginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeprecatePluginResponse {
    return new UndeprecatePluginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeprecatePluginResponse {
    return new UndeprecatePluginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UndeprecatePluginResponse | PlainMessage<UndeprecatePluginResponse> | undefined, b: UndeprecatePluginResponse | PlainMessage<UndeprecatePluginResponse> | undefined): boolean {
    return proto3.util.equals(UndeprecatePluginResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetTemplateRequest
 */
export class GetTemplateRequest extends Message<GetTemplateRequest> {
  /**
   * The owner of the template.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the template.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GetTemplateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetTemplateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTemplateRequest {
    return new GetTemplateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTemplateRequest {
    return new GetTemplateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTemplateRequest {
    return new GetTemplateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTemplateRequest | PlainMessage<GetTemplateRequest> | undefined, b: GetTemplateRequest | PlainMessage<GetTemplateRequest> | undefined): boolean {
    return proto3.util.equals(GetTemplateRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetTemplateResponse
 */
export class GetTemplateResponse extends Message<GetTemplateResponse> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.Template template = 1;
   */
  template?: Template;

  constructor(data?: PartialMessage<GetTemplateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetTemplateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "template", kind: "message", T: Template },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTemplateResponse {
    return new GetTemplateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTemplateResponse {
    return new GetTemplateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTemplateResponse {
    return new GetTemplateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTemplateResponse | PlainMessage<GetTemplateResponse> | undefined, b: GetTemplateResponse | PlainMessage<GetTemplateResponse> | undefined): boolean {
    return proto3.util.equals(GetTemplateResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListTemplatesRequest
 */
export class ListTemplatesRequest extends Message<ListTemplatesRequest> {
  /**
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 3;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListTemplatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListTemplatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTemplatesRequest {
    return new ListTemplatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTemplatesRequest {
    return new ListTemplatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTemplatesRequest {
    return new ListTemplatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTemplatesRequest | PlainMessage<ListTemplatesRequest> | undefined, b: ListTemplatesRequest | PlainMessage<ListTemplatesRequest> | undefined): boolean {
    return proto3.util.equals(ListTemplatesRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListTemplatesResponse
 */
export class ListTemplatesResponse extends Message<ListTemplatesResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.Template templates = 1;
   */
  templates: Template[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTemplatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListTemplatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "templates", kind: "message", T: Template, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTemplatesResponse {
    return new ListTemplatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTemplatesResponse {
    return new ListTemplatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTemplatesResponse {
    return new ListTemplatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTemplatesResponse | PlainMessage<ListTemplatesResponse> | undefined, b: ListTemplatesResponse | PlainMessage<ListTemplatesResponse> | undefined): boolean {
    return proto3.util.equals(ListTemplatesResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListUserTemplatesRequest
 */
export class ListUserTemplatesRequest extends Message<ListUserTemplatesRequest> {
  /**
   * The owner of the templates to list for.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 4;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListUserTemplatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListUserTemplatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserTemplatesRequest {
    return new ListUserTemplatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserTemplatesRequest {
    return new ListUserTemplatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserTemplatesRequest {
    return new ListUserTemplatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserTemplatesRequest | PlainMessage<ListUserTemplatesRequest> | undefined, b: ListUserTemplatesRequest | PlainMessage<ListUserTemplatesRequest> | undefined): boolean {
    return proto3.util.equals(ListUserTemplatesRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListUserTemplatesResponse
 */
export class ListUserTemplatesResponse extends Message<ListUserTemplatesResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.Template templates = 1;
   */
  templates: Template[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListUserTemplatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListUserTemplatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "templates", kind: "message", T: Template, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUserTemplatesResponse {
    return new ListUserTemplatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUserTemplatesResponse {
    return new ListUserTemplatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUserTemplatesResponse {
    return new ListUserTemplatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUserTemplatesResponse | PlainMessage<ListUserTemplatesResponse> | undefined, b: ListUserTemplatesResponse | PlainMessage<ListUserTemplatesResponse> | undefined): boolean {
    return proto3.util.equals(ListUserTemplatesResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetTemplateVersionRequest
 */
export class GetTemplateVersionRequest extends Message<GetTemplateVersionRequest> {
  /**
   * The owner of the template the version belongs to.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the template the version belongs to.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The name of the version.
   *
   * @generated from field: string version = 3;
   */
  version = "";

  constructor(data?: PartialMessage<GetTemplateVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetTemplateVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTemplateVersionRequest {
    return new GetTemplateVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTemplateVersionRequest {
    return new GetTemplateVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTemplateVersionRequest {
    return new GetTemplateVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTemplateVersionRequest | PlainMessage<GetTemplateVersionRequest> | undefined, b: GetTemplateVersionRequest | PlainMessage<GetTemplateVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetTemplateVersionRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.GetTemplateVersionResponse
 */
export class GetTemplateVersionResponse extends Message<GetTemplateVersionResponse> {
  /**
   * @generated from field: buf.alpha.registry.v1alpha1.TemplateVersion template_version = 1;
   */
  templateVersion?: TemplateVersion;

  constructor(data?: PartialMessage<GetTemplateVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.GetTemplateVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "template_version", kind: "message", T: TemplateVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTemplateVersionResponse {
    return new GetTemplateVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTemplateVersionResponse {
    return new GetTemplateVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTemplateVersionResponse {
    return new GetTemplateVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTemplateVersionResponse | PlainMessage<GetTemplateVersionResponse> | undefined, b: GetTemplateVersionResponse | PlainMessage<GetTemplateVersionResponse> | undefined): boolean {
    return proto3.util.equals(GetTemplateVersionResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListOrganizationTemplatesRequest
 */
export class ListOrganizationTemplatesRequest extends Message<ListOrganizationTemplatesRequest> {
  /**
   * The organization of the templates to list for.
   *
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 4;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListOrganizationTemplatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListOrganizationTemplatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationTemplatesRequest {
    return new ListOrganizationTemplatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationTemplatesRequest {
    return new ListOrganizationTemplatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationTemplatesRequest {
    return new ListOrganizationTemplatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationTemplatesRequest | PlainMessage<ListOrganizationTemplatesRequest> | undefined, b: ListOrganizationTemplatesRequest | PlainMessage<ListOrganizationTemplatesRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationTemplatesRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListOrganizationTemplatesResponse
 */
export class ListOrganizationTemplatesResponse extends Message<ListOrganizationTemplatesResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.Template templates = 1;
   */
  templates: Template[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationTemplatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListOrganizationTemplatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "templates", kind: "message", T: Template, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationTemplatesResponse {
    return new ListOrganizationTemplatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationTemplatesResponse {
    return new ListOrganizationTemplatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationTemplatesResponse {
    return new ListOrganizationTemplatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationTemplatesResponse | PlainMessage<ListOrganizationTemplatesResponse> | undefined, b: ListOrganizationTemplatesResponse | PlainMessage<ListOrganizationTemplatesResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationTemplatesResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListTemplateVersionsRequest
 */
export class ListTemplateVersionsRequest extends Message<ListTemplateVersionsRequest> {
  /**
   * The owner of the template to list versions for.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the template to list versions for.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The number of items to return.
   *
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 5;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListTemplateVersionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListTemplateVersionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTemplateVersionsRequest {
    return new ListTemplateVersionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTemplateVersionsRequest {
    return new ListTemplateVersionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTemplateVersionsRequest {
    return new ListTemplateVersionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTemplateVersionsRequest | PlainMessage<ListTemplateVersionsRequest> | undefined, b: ListTemplateVersionsRequest | PlainMessage<ListTemplateVersionsRequest> | undefined): boolean {
    return proto3.util.equals(ListTemplateVersionsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListTemplateVersionsResponse
 */
export class ListTemplateVersionsResponse extends Message<ListTemplateVersionsResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.TemplateVersion template_versions = 1;
   */
  templateVersions: TemplateVersion[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTemplateVersionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListTemplateVersionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "template_versions", kind: "message", T: TemplateVersion, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTemplateVersionsResponse {
    return new ListTemplateVersionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTemplateVersionsResponse {
    return new ListTemplateVersionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTemplateVersionsResponse {
    return new ListTemplateVersionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTemplateVersionsResponse | PlainMessage<ListTemplateVersionsResponse> | undefined, b: ListTemplateVersionsResponse | PlainMessage<ListTemplateVersionsResponse> | undefined): boolean {
    return proto3.util.equals(ListTemplateVersionsResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.CreateTemplateRequest
 */
export class CreateTemplateRequest extends Message<CreateTemplateRequest> {
  /**
   * The owner of the template. This will be either a username
   * or organization name.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the template version, i.e. "grpc-go".
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Whether the created template should be available to any user
   * or only those authorized through organization membership
   * or being the creator.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.PluginVisibility visibility = 3;
   */
  visibility = PluginVisibility.UNSPECIFIED;

  /**
   * The plugins and associated runtime configuration that make
   * up this template.
   *
   * @generated from field: repeated buf.alpha.registry.v1alpha1.PluginConfig plugin_configs = 4;
   */
  pluginConfigs: PluginConfig[] = [];

  constructor(data?: PartialMessage<CreateTemplateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.CreateTemplateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "visibility", kind: "enum", T: proto3.getEnumType(PluginVisibility) },
    { no: 4, name: "plugin_configs", kind: "message", T: PluginConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTemplateRequest {
    return new CreateTemplateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTemplateRequest {
    return new CreateTemplateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTemplateRequest {
    return new CreateTemplateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTemplateRequest | PlainMessage<CreateTemplateRequest> | undefined, b: CreateTemplateRequest | PlainMessage<CreateTemplateRequest> | undefined): boolean {
    return proto3.util.equals(CreateTemplateRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.CreateTemplateResponse
 */
export class CreateTemplateResponse extends Message<CreateTemplateResponse> {
  /**
   * The created template.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.Template template = 1;
   */
  template?: Template;

  constructor(data?: PartialMessage<CreateTemplateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.CreateTemplateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "template", kind: "message", T: Template },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTemplateResponse {
    return new CreateTemplateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTemplateResponse {
    return new CreateTemplateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTemplateResponse {
    return new CreateTemplateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTemplateResponse | PlainMessage<CreateTemplateResponse> | undefined, b: CreateTemplateResponse | PlainMessage<CreateTemplateResponse> | undefined): boolean {
    return proto3.util.equals(CreateTemplateResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeleteTemplateRequest
 */
export class DeleteTemplateRequest extends Message<DeleteTemplateRequest> {
  /**
   * The owner of the template to delete.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the template to delete.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteTemplateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeleteTemplateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTemplateRequest {
    return new DeleteTemplateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTemplateRequest {
    return new DeleteTemplateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTemplateRequest {
    return new DeleteTemplateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTemplateRequest | PlainMessage<DeleteTemplateRequest> | undefined, b: DeleteTemplateRequest | PlainMessage<DeleteTemplateRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTemplateRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeleteTemplateResponse
 */
export class DeleteTemplateResponse extends Message<DeleteTemplateResponse> {
  constructor(data?: PartialMessage<DeleteTemplateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeleteTemplateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTemplateResponse {
    return new DeleteTemplateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTemplateResponse {
    return new DeleteTemplateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTemplateResponse {
    return new DeleteTemplateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTemplateResponse | PlainMessage<DeleteTemplateResponse> | undefined, b: DeleteTemplateResponse | PlainMessage<DeleteTemplateResponse> | undefined): boolean {
    return proto3.util.equals(DeleteTemplateResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.CreateTemplateVersionRequest
 */
export class CreateTemplateVersionRequest extends Message<CreateTemplateVersionRequest> {
  /**
   * The name of the template version, i.e. "v1".
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The owner of the template.
   *
   * @generated from field: string template_owner = 2;
   */
  templateOwner = "";

  /**
   * The name of the template.
   *
   * @generated from field: string template_name = 3;
   */
  templateName = "";

  /**
   * A map from plugin owner and name to version for the plugins
   * defined in the template. Every plugin in the template
   * must have a corresponding version in this array.
   *
   * @generated from field: repeated buf.alpha.registry.v1alpha1.PluginVersionMapping plugin_versions = 4;
   */
  pluginVersions: PluginVersionMapping[] = [];

  constructor(data?: PartialMessage<CreateTemplateVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.CreateTemplateVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "template_owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "template_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "plugin_versions", kind: "message", T: PluginVersionMapping, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTemplateVersionRequest {
    return new CreateTemplateVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTemplateVersionRequest {
    return new CreateTemplateVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTemplateVersionRequest {
    return new CreateTemplateVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTemplateVersionRequest | PlainMessage<CreateTemplateVersionRequest> | undefined, b: CreateTemplateVersionRequest | PlainMessage<CreateTemplateVersionRequest> | undefined): boolean {
    return proto3.util.equals(CreateTemplateVersionRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.CreateTemplateVersionResponse
 */
export class CreateTemplateVersionResponse extends Message<CreateTemplateVersionResponse> {
  /**
   * The created template version.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.TemplateVersion template_version = 1;
   */
  templateVersion?: TemplateVersion;

  constructor(data?: PartialMessage<CreateTemplateVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.CreateTemplateVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "template_version", kind: "message", T: TemplateVersion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTemplateVersionResponse {
    return new CreateTemplateVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTemplateVersionResponse {
    return new CreateTemplateVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTemplateVersionResponse {
    return new CreateTemplateVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTemplateVersionResponse | PlainMessage<CreateTemplateVersionResponse> | undefined, b: CreateTemplateVersionResponse | PlainMessage<CreateTemplateVersionResponse> | undefined): boolean {
    return proto3.util.equals(CreateTemplateVersionResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.SetTemplateContributorRequest
 */
export class SetTemplateContributorRequest extends Message<SetTemplateContributorRequest> {
  /**
   * The ID of the template for which the user's role will be set.
   *
   * @generated from field: string template_id = 1;
   */
  templateId = "";

  /**
   * The ID of the user whose role will be set.
   *
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * The role to assign to the user.
   * Setting UNSPECIFIED means removing the user's role.
   *
   * @generated from field: buf.alpha.registry.v1alpha1.TemplateRole template_role = 3;
   */
  templateRole = TemplateRole.UNSPECIFIED;

  constructor(data?: PartialMessage<SetTemplateContributorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.SetTemplateContributorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "template_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "template_role", kind: "enum", T: proto3.getEnumType(TemplateRole) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetTemplateContributorRequest {
    return new SetTemplateContributorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetTemplateContributorRequest {
    return new SetTemplateContributorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetTemplateContributorRequest {
    return new SetTemplateContributorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetTemplateContributorRequest | PlainMessage<SetTemplateContributorRequest> | undefined, b: SetTemplateContributorRequest | PlainMessage<SetTemplateContributorRequest> | undefined): boolean {
    return proto3.util.equals(SetTemplateContributorRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.SetTemplateContributorResponse
 */
export class SetTemplateContributorResponse extends Message<SetTemplateContributorResponse> {
  constructor(data?: PartialMessage<SetTemplateContributorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.SetTemplateContributorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetTemplateContributorResponse {
    return new SetTemplateContributorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetTemplateContributorResponse {
    return new SetTemplateContributorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetTemplateContributorResponse {
    return new SetTemplateContributorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetTemplateContributorResponse | PlainMessage<SetTemplateContributorResponse> | undefined, b: SetTemplateContributorResponse | PlainMessage<SetTemplateContributorResponse> | undefined): boolean {
    return proto3.util.equals(SetTemplateContributorResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListTemplateContributorsRequest
 */
export class ListTemplateContributorsRequest extends Message<ListTemplateContributorsRequest> {
  /**
   * @generated from field: string template_id = 1;
   */
  templateId = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * The first page is returned if this is empty.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  /**
   * @generated from field: bool reverse = 4;
   */
  reverse = false;

  constructor(data?: PartialMessage<ListTemplateContributorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListTemplateContributorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "template_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "reverse", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTemplateContributorsRequest {
    return new ListTemplateContributorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTemplateContributorsRequest {
    return new ListTemplateContributorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTemplateContributorsRequest {
    return new ListTemplateContributorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTemplateContributorsRequest | PlainMessage<ListTemplateContributorsRequest> | undefined, b: ListTemplateContributorsRequest | PlainMessage<ListTemplateContributorsRequest> | undefined): boolean {
    return proto3.util.equals(ListTemplateContributorsRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.ListTemplateContributorsResponse
 */
export class ListTemplateContributorsResponse extends Message<ListTemplateContributorsResponse> {
  /**
   * @generated from field: repeated buf.alpha.registry.v1alpha1.TemplateContributor users = 1;
   */
  users: TemplateContributor[] = [];

  /**
   * There are no more pages if this is empty.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTemplateContributorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.ListTemplateContributorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: TemplateContributor, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTemplateContributorsResponse {
    return new ListTemplateContributorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTemplateContributorsResponse {
    return new ListTemplateContributorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTemplateContributorsResponse {
    return new ListTemplateContributorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTemplateContributorsResponse | PlainMessage<ListTemplateContributorsResponse> | undefined, b: ListTemplateContributorsResponse | PlainMessage<ListTemplateContributorsResponse> | undefined): boolean {
    return proto3.util.equals(ListTemplateContributorsResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeprecateTemplateRequest
 */
export class DeprecateTemplateRequest extends Message<DeprecateTemplateRequest> {
  /**
   * The owner of the template.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the template.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * A message shown along with the deprecation warning for this template.
   *
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<DeprecateTemplateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeprecateTemplateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeprecateTemplateRequest {
    return new DeprecateTemplateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeprecateTemplateRequest {
    return new DeprecateTemplateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeprecateTemplateRequest {
    return new DeprecateTemplateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeprecateTemplateRequest | PlainMessage<DeprecateTemplateRequest> | undefined, b: DeprecateTemplateRequest | PlainMessage<DeprecateTemplateRequest> | undefined): boolean {
    return proto3.util.equals(DeprecateTemplateRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.DeprecateTemplateResponse
 */
export class DeprecateTemplateResponse extends Message<DeprecateTemplateResponse> {
  constructor(data?: PartialMessage<DeprecateTemplateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.DeprecateTemplateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeprecateTemplateResponse {
    return new DeprecateTemplateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeprecateTemplateResponse {
    return new DeprecateTemplateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeprecateTemplateResponse {
    return new DeprecateTemplateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeprecateTemplateResponse | PlainMessage<DeprecateTemplateResponse> | undefined, b: DeprecateTemplateResponse | PlainMessage<DeprecateTemplateResponse> | undefined): boolean {
    return proto3.util.equals(DeprecateTemplateResponse, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.UndeprecateTemplateRequest
 */
export class UndeprecateTemplateRequest extends Message<UndeprecateTemplateRequest> {
  /**
   * The owner of the template.
   *
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * The name of the template.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<UndeprecateTemplateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.UndeprecateTemplateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeprecateTemplateRequest {
    return new UndeprecateTemplateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeprecateTemplateRequest {
    return new UndeprecateTemplateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeprecateTemplateRequest {
    return new UndeprecateTemplateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UndeprecateTemplateRequest | PlainMessage<UndeprecateTemplateRequest> | undefined, b: UndeprecateTemplateRequest | PlainMessage<UndeprecateTemplateRequest> | undefined): boolean {
    return proto3.util.equals(UndeprecateTemplateRequest, a, b);
  }
}

/**
 * @generated from message buf.alpha.registry.v1alpha1.UndeprecateTemplateResponse
 */
export class UndeprecateTemplateResponse extends Message<UndeprecateTemplateResponse> {
  constructor(data?: PartialMessage<UndeprecateTemplateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "buf.alpha.registry.v1alpha1.UndeprecateTemplateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UndeprecateTemplateResponse {
    return new UndeprecateTemplateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UndeprecateTemplateResponse {
    return new UndeprecateTemplateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UndeprecateTemplateResponse {
    return new UndeprecateTemplateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UndeprecateTemplateResponse | PlainMessage<UndeprecateTemplateResponse> | undefined, b: UndeprecateTemplateResponse | PlainMessage<UndeprecateTemplateResponse> | undefined): boolean {
    return proto3.util.equals(UndeprecateTemplateResponse, a, b);
  }
}

